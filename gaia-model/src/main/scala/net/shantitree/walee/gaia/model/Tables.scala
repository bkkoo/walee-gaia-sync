package net.shantitree.walee.gaia.model
/** Stand-alone Slick data model for immediate use */
object Tables extends {
  val profile = com.typesafe.slick.driver.ms.SQLServerDriver
} with Tables

/** Slick data model trait for extension, choice of backend or usage in the cake pattern. (Make sure to initialize this late.) */
trait Tables {
  val profile: scala.slick.driver.JdbcProfile
  import profile.simple._
  import scala.slick.model.ForeignKeyAction
  import scala.slick.collection.heterogenous._
  import scala.slick.collection.heterogenous.syntax._
  // NOTE: GetResult mappers for plain SQL are only generated for tables where Slick knows how to map the types of all columns.
  import scala.slick.jdbc.{GetResult => GR}
  
  /** DDL for all tables. Call .create to execute. */
  lazy val ddl = Dtproperties.ddl ++ Gaiaorgchartm.ddl ++ InvoiceDetail.ddl ++ Invoices.ddl ++ InvoiceSummary.ddl ++ MonthlyCommissionReport.ddl ++ Newmemberlog.ddl ++ PaymentMethod.ddl ++ Syncmember.ddl ++ Syncorder.ddl ++ Tbla0001.ddl ++ Tbla0001Bak.ddl ++ Tbla0002.ddl ++ Tbla0003.ddl ++ Tbla0005.ddl ++ Tbla0006.ddl ++ Tbla0007.ddl ++ Tbla0008.ddl ++ Tbla0009.ddl ++ Tbla0010.ddl ++ Tbla0011.ddl ++ Tbla0030.ddl ++ Tbla0030a.ddl ++ Tbla0030x.ddl ++ Tbla0031.ddl ++ Tbla0031w.ddl ++ Tblabank.ddl ++ Tblaction.ddl ++ Tblactiond.ddl ++ Tblactoindef.ddl ++ Tblannmessage.ddl ++ Tblannounce.ddl ++ Tblannounced.ddl ++ Tblannouncetarget.ddl ++ TblattendanceTmp.ddl ++ TblattendanceTmp2.ddl ++ Tblauthorization.ddl ++ Tblautono.ddl ++ Tblautonod.ddl ++ Tblbackd.ddl ++ Tblbackgroundjob.ddl ++ Tblbackgroundreport.ddl ++ Tblbackm.ddl ++ Tblbank.ddl ++ Tblbankd.ddl ++ Tblbarocde.ddl ++ Tblblacklist.ddl ++ Tblbonuschartw1.ddl ++ Tblbonuschartw2.ddl ++ Tblbonusdata.ddl ++ Tblbonusdata20111104.ddl ++ Tblbonusdatacheck.ddl ++ Tblbonusdatam.ddl ++ Tblbonusinfo.ddl ++ Tblbonusinvoice.ddl ++ Tblbonusm.ddl ++ Tblbonusmh.ddl ++ Tblbonusnetdata.ddl ++ TblbonusnetdataLog.ddl ++ Tblbonusreport00.ddl ++ Tblbonusreport01.ddl ++ Tblbonusreport02.ddl ++ Tblbonusreport03.ddl ++ Tblbonusreport04.ddl ++ Tblbonusreport05.ddl ++ Tblbonussetup.ddl ++ Tblbranch.ddl ++ Tblbranchd.ddl ++ Tblcallcenter.ddl ++ Tblcasher.ddl ++ Tblcenter.ddl ++ Tblchksafeqty.ddl ++ Tblcid.ddl ++ Tblcity.ddl ++ Tblcityd.ddl ++ Tblclass.ddl ++ Tblclassd.ddl ++ Tblclassexpense.ddl ++ Tblclassperson.ddl ++ Tblclassroom.ddl ++ Tblconnect.ddl ++ Tblcontact.ddl ++ Tblcountry.ddl ++ Tblcountryd.ddl ++ Tblcourse.ddl ++ Tblcoursed.ddl ++ Tblcourselimit.ddl ++ Tblcustomer.ddl ++ Tblcustreturn.ddl ++ Tbldiscprod.ddl ++ Tblemployees.ddl ++ Tblexchangeitem.ddl ++ Tblfaxdata.ddl ++ Tblfreight.ddl ++ Tblfunctionlist.ddl ++ Tblfunctionlistd.ddl ++ Tblgift.ddl ++ Tblgiftd.ddl ++ Tblgiftsetting.ddl ++ Tblgiftsettingd.ddl ++ Tblgrade.ddl ++ Tblgraded.ddl ++ Tblgroup.ddl ++ Tblgroupd.ddl ++ Tblhandom.ddl ++ Tblhandomlog.ddl ++ Tblhitrust.ddl ++ Tblinfodefine.ddl ++ Tblinfodefined.ddl ++ Tblinterviewq.ddl ++ Tblinterviewqd.ddl ++ Tblinv2620Temp.ddl ++ Tblinvcontrol.ddl ++ Tblinvdetail.ddl ++ Tblinvdiscdetail.ddl ++ Tblinvdiscount.ddl ++ Tblinventory.ddl ++ Tblinventoryd.ddl ++ Tblinvmachine.ddl ++ Tblinvmachined.ddl ++ Tblinvmaster.ddl ++ Tblinvsetup.ddl ++ Tblloanback.ddl ++ Tblloandetail.ddl ++ Tblloanmaster.ddl ++ Tblloopapply.ddl ++ Tblloopapplypause.ddl ++ Tblloopcombination.ddl ++ Tbllooporder.ddl ++ Tblloopordercurrent.ddl ++ Tblloopproduct.ddl ++ Tblloopweblog.ddl ++ Tblmachine.ddl ++ Tblmanifest.ddl ++ TblmanifestBacklog.ddl ++ Tblmanifestd.ddl ++ TblmanifestLog.ddl ++ TblmanifestSysout.ddl ++ TblmanifestSysoutD.ddl ++ Tblmem2000.ddl ++ Tblmem2000His.ddl ++ Tblmem2010.ddl ++ Tblmem2010His.ddl ++ Tblmember.ddl ++ Tblmember20101020.ddl ++ Tblmember20110107.ddl ++ Tblmember960402.ddl ++ Tblmemberhis.ddl ++ Tblmemberhis200707.ddl ++ Tblmemberhis20110110.ddl ++ TblmemberhisBak.ddl ++ Tblmembertrx.ddl ++ Tblmemcard.ddl ++ Tblmemmove.ddl ++ Tblmemrelation.ddl ++ Tblmessage.ddl ++ Tblmonthbank.ddl ++ Tblmonthbankd.ddl ++ Tblmonthlyfunds.ddl ++ Tblmonthlyfundsd.ddl ++ Tblmsgcenter.ddl ++ Tblmsgcenterm.ddl ++ Tblnetdata.ddl ++ Tblnetmaillog.ddl ++ Tblnetordercheck.ddl ++ Tblnetorderdetail.ddl ++ Tblnetordermaster.ddl ++ Tblnolistpartsexgfrom.ddl ++ Tblnolistpartsexgmaster.ddl ++ Tblnolistpartsexgto.ddl ++ Tblnumber.ddl ++ Tblordercheck.ddl ++ Tblordercheckreturn.ddl ++ Tblorderdetail.ddl ++ Tblorderinvdetail.ddl ++ Tblordermaster.ddl ++ TblordermasterTh.ddl ++ Tblorganization.ddl ++ Tblorganizationdef.ddl ++ Tblorganizationdefd.ddl ++ Tblorgchart.ddl ++ Tblorgchartd.ddl ++ Tblorgchartm.ddl ++ Tblorgchartw1.ddl ++ Tblorgchartw2.ddl ++ Tblorgchartw3.ddl ++ Tblorgprint.ddl ++ Tblorgrecommand.ddl ++ Tbloutline.ddl ++ Tblpdfcontrol.ddl ++ Tblperformace.ddl ++ Tblpersa.ddl ++ Tblpersad.ddl ++ Tblpersb.ddl ++ Tblpersbd.ddl ++ Tblperson.ddl ++ Tblplace.ddl ++ Tblpostd.ddl ++ Tblpostm.ddl ++ Tblprequest.ddl ++ Tblprequestd.ddl ++ TblprequestSalog.ddl ++ Tblprodinvname.ddl ++ Tblprodrel.ddl ++ Tblprodreld.ddl ++ Tblproduct.ddl ++ TblproductBase.ddl ++ Tblproductd.ddl ++ TblproductdBase.ddl ++ Tblproductexgdiff.ddl ++ Tblproductexgdiffd.ddl ++ Tblproductexgsame.ddl ++ Tblproductexgsamed.ddl ++ Tblproductlist.ddl ++ Tblproductprice.ddl ++ TblproductpriceBase.ddl ++ TblproductTrans.ddl ++ Tblproject.ddl ++ Tblqa.ddl ++ Tblqad.ddl ++ Tblquestion.ddl ++ Tblquestiond.ddl ++ Tblrefund.ddl ++ Tblrefundd.ddl ++ Tblrepaird.ddl ++ Tblrepairdlist.ddl ++ Tblrepairm.ddl ++ Tblreportbat.ddl ++ Tblreportlist.ddl ++ Tblreportsetting.ddl ++ Tblrepparts.ddl ++ Tblroom.ddl ++ Tblrpt01.ddl ++ Tblrptclass.ddl ++ Tblrptempresults.ddl ++ Tblrptmember.ddl ++ Tblrpttest.ddl ++ Tblsalesinfo.ddl ++ Tblsatisfy.ddl ++ Tblsatisfyd.ddl ++ Tblsatisfyq.ddl ++ Tblservey.ddl ++ Tblserveycollection.ddl ++ Tblserveypattern.ddl ++ Tblserveypatternqa.ddl ++ Tblservice.ddl ++ Tblserviced.ddl ++ Tblsetelevate.ddl ++ Tblsrvparts.ddl ++ Tblstate.ddl ++ Tblstated.ddl ++ Tblstation.ddl ++ Tblstationextend.ddl ++ Tblstationextendd.ddl ++ Tblstationopp.ddl ++ Tblstationpause.ddl ++ Tblstationtel.ddl ++ Tblstock.ddl ++ TblstockLog.ddl ++ TblstockTmp.ddl ++ Tblstorewarehouse.ddl ++ Tblstorewarehoused.ddl ++ Tblswhlog.ddl ++ TblswhlogTmp.ddl ++ Tblsyslog.ddl ++ Tblsysparameter.ddl ++ Tblsysparameterd.ddl ++ Tblsysparameterdata.ddl ++ Tblsysparameterdatad.ddl ++ Tblsystemsettings.ddl ++ Tbltabledesc.ddl ++ Tbltabledescd.ddl ++ Tbltablename.ddl ++ Tbltablenamed.ddl ++ Tbltarget.ddl ++ Tbltax01.ddl ++ Tbltax02.ddl ++ Tbltax03.ddl ++ Tbltaxm.ddl ++ Tbltaxy.ddl ++ Tbltchappr.ddl ++ Tbltchapprd.ddl ++ Tbltchapprq.ddl ++ Tblteacher.ddl ++ Tblthcomparison.ddl ++ Tblthing.ddl ++ Tbltmpproduct.ddl ++ Tbltrainproduct.ddl ++ Tbltrainproductd.ddl ++ Tblusers.ddl ++ Tblvisa.ddl ++ Tblweblog.ddl ++ Tblwebloginlog.ddl ++ Tblzip.ddl ++ Tblzipd.ddl ++ Tblzipdetail.ddl ++ TempPpvCalc.ddl ++ Testtrigger1.ddl ++ Testtrigger2.ddl ++ Tmp.ddl ++ Tmpa00011220071114.ddl ++ Tmpa0006.ddl ++ Tmpbonusdata20111104.ddl ++ Tmpbonusdata201111042.ddl ++ Tmpbonusdata20111107.ddl ++ Tmpbonusdata201111072.ddl ++ Tmpmember20071114.ddl ++ Tmptest.ddl ++ TracerOfCreatingOrder.ddl ++ Webbonusreports.ddl ++ Webmember.ddl ++ Webproduct.ddl ++ Xxx.ddl ++ Xxxtblhandombal.ddl ++ Xxxtblhandombald.ddl
  
  /** Entity class storing rows of table Dtproperties
   *  @param id Database column id DBType(int identity), AutoInc
   *  @param objectid Database column objectid DBType(int)
   *  @param property Database column property DBType(varchar), Length(64,true)
   *  @param value Database column value DBType(varchar), Length(255,true)
   *  @param uvalue Database column uvalue DBType(nvarchar), Length(255,true)
   *  @param lvalue Database column lvalue DBType(image)
   *  @param version Database column version DBType(int), Default(0) */
  case class DtpropertiesRow(id: Int, objectid: Option[Int], property: String, value: Option[String], uvalue: Option[String], lvalue: Option[java.sql.Blob], version: Int = 0)
  /** GetResult implicit for fetching DtpropertiesRow objects using plain SQL queries */
  implicit def GetResultDtpropertiesRow(implicit e0: GR[Int], e1: GR[Option[Int]], e2: GR[String], e3: GR[Option[String]], e4: GR[Option[java.sql.Blob]]): GR[DtpropertiesRow] = GR{
    prs => import prs._
    DtpropertiesRow.tupled((<<[Int], <<?[Int], <<[String], <<?[String], <<?[String], <<?[java.sql.Blob], <<[Int]))
  }
  /** Table description of table dtproperties. Objects of this class serve as prototypes for rows in queries. */
  class Dtproperties(_tableTag: Tag) extends Table[DtpropertiesRow](_tableTag, Some("dbo"), "dtproperties") {
    def * = (id, objectid, property, value, uvalue, lvalue, version) <> (DtpropertiesRow.tupled, DtpropertiesRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, objectid, property.?, value, uvalue, lvalue, version.?).shaped.<>({r=>import r._; _1.map(_=> DtpropertiesRow.tupled((_1.get, _2, _3.get, _4, _5, _6, _7.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(int identity), AutoInc */
    val id: Column[Int] = column[Int]("id", O.AutoInc)
    /** Database column objectid DBType(int) */
    val objectid: Column[Option[Int]] = column[Option[Int]]("objectid")
    /** Database column property DBType(varchar), Length(64,true) */
    val property: Column[String] = column[String]("property", O.Length(64,varying=true))
    /** Database column value DBType(varchar), Length(255,true) */
    val value: Column[Option[String]] = column[Option[String]]("value", O.Length(255,varying=true))
    /** Database column uvalue DBType(nvarchar), Length(255,true) */
    val uvalue: Column[Option[String]] = column[Option[String]]("uvalue", O.Length(255,varying=true))
    /** Database column lvalue DBType(image) */
    val lvalue: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("lvalue")
    /** Database column version DBType(int), Default(0) */
    val version: Column[Int] = column[Int]("version", O.Default(0))
    
    /** Primary key of Dtproperties (database name pk_dtproperties) */
    val pk = primaryKey("pk_dtproperties", (id, property))
  }
  /** Collection-like TableQuery object for table Dtproperties */
  lazy val Dtproperties = new TableQuery(tag => new Dtproperties(tag))
  
  /** Entity class storing rows of table Gaiaorgchartm
   *  @param cdmember Database column cdMember DBType(char), Length(10,false), Default()
   *  @param imembers Database column iMembers DBType(int), Default(Some(0))
   *  @param ipvgroup Database column iPvGroup DBType(int), Default(Some(0))
   *  @param cdcumpvbonuscode Database column cdCumPvBonusCode DBType(char), Length(10,false), Default(Some())
   *  @param sztext2 Database column szText2 DBType(char), Length(50,false), Default(Some())
   *  @param sztext3 Database column szText3 DBType(char), Length(50,false), Default(Some())
   *  @param cdstatus Database column cdStatus DBType(char), Length(2,false), Default(Some(Q))
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false), Default(Some())
   *  @param ilevels Database column iLevels DBType(int), Default(Some(6))
   *  @param cdcumpvgroup Database column cdCumPvGroup DBType(char), Length(1,false), Default(Some(Y))
   *  @param cdtel Database column cdTel DBType(char), Length(1,false), Default(Some(N))
   *  @param cdaddress Database column cdAddress DBType(char), Length(1,false), Default(Some(N))
   *  @param cdcontract Database column cdContract DBType(char), Length(1,false), Default(Some(N))
   *  @param cdrecal Database column cdReCal DBType(char), Length(1,false), Default(Some(N))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
  case class GaiaorgchartmRow(cdmember: String = "", imembers: Option[Int] = Some(0), ipvgroup: Option[Int] = Some(0), cdcumpvbonuscode: Option[String] = Some(""), sztext2: Option[String] = Some(""), sztext3: Option[String] = Some(""), cdstatus: Option[String] = Some("Q"), dtmodify: Option[java.sql.Timestamp], cdbonuscode: Option[String] = Some(""), ilevels: Option[Int] = Some(6), cdcumpvgroup: Option[String] = Some("Y"), cdtel: Option[String] = Some("N"), cdaddress: Option[String] = Some("N"), cdcontract: Option[String] = Some("N"), cdrecal: Option[String] = Some("N"), uidcreator: Option[String])
  /** GetResult implicit for fetching GaiaorgchartmRow objects using plain SQL queries */
  implicit def GetResultGaiaorgchartmRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[GaiaorgchartmRow] = GR{
    prs => import prs._
    GaiaorgchartmRow.tupled((<<[String], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table gaiaOrgChartM. Objects of this class serve as prototypes for rows in queries. */
  class Gaiaorgchartm(_tableTag: Tag) extends Table[GaiaorgchartmRow](_tableTag, Some("dbo"), "gaiaOrgChartM") {
    def * = (cdmember, imembers, ipvgroup, cdcumpvbonuscode, sztext2, sztext3, cdstatus, dtmodify, cdbonuscode, ilevels, cdcumpvgroup, cdtel, cdaddress, cdcontract, cdrecal, uidcreator) <> (GaiaorgchartmRow.tupled, GaiaorgchartmRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdmember.?, imembers, ipvgroup, cdcumpvbonuscode, sztext2, sztext3, cdstatus, dtmodify, cdbonuscode, ilevels, cdcumpvgroup, cdtel, cdaddress, cdcontract, cdrecal, uidcreator).shaped.<>({r=>import r._; _1.map(_=> GaiaorgchartmRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdMember DBType(char), Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false), O.Default(""))
    /** Database column iMembers DBType(int), Default(Some(0)) */
    val imembers: Column[Option[Int]] = column[Option[Int]]("iMembers", O.Default(Some(0)))
    /** Database column iPvGroup DBType(int), Default(Some(0)) */
    val ipvgroup: Column[Option[Int]] = column[Option[Int]]("iPvGroup", O.Default(Some(0)))
    /** Database column cdCumPvBonusCode DBType(char), Length(10,false), Default(Some()) */
    val cdcumpvbonuscode: Column[Option[String]] = column[Option[String]]("cdCumPvBonusCode", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szText2 DBType(char), Length(50,false), Default(Some()) */
    val sztext2: Column[Option[String]] = column[Option[String]]("szText2", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szText3 DBType(char), Length(50,false), Default(Some()) */
    val sztext3: Column[Option[String]] = column[Option[String]]("szText3", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column cdStatus DBType(char), Length(2,false), Default(Some(Q)) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(2,varying=false), O.Default(Some("Q")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdBonusCode DBType(char), Length(10,false), Default(Some()) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column iLevels DBType(int), Default(Some(6)) */
    val ilevels: Column[Option[Int]] = column[Option[Int]]("iLevels", O.Default(Some(6)))
    /** Database column cdCumPvGroup DBType(char), Length(1,false), Default(Some(Y)) */
    val cdcumpvgroup: Column[Option[String]] = column[Option[String]]("cdCumPvGroup", O.Length(1,varying=false), O.Default(Some("Y")))
    /** Database column cdTel DBType(char), Length(1,false), Default(Some(N)) */
    val cdtel: Column[Option[String]] = column[Option[String]]("cdTel", O.Length(1,varying=false), O.Default(Some("N")))
    /** Database column cdAddress DBType(char), Length(1,false), Default(Some(N)) */
    val cdaddress: Column[Option[String]] = column[Option[String]]("cdAddress", O.Length(1,varying=false), O.Default(Some("N")))
    /** Database column cdContract DBType(char), Length(1,false), Default(Some(N)) */
    val cdcontract: Column[Option[String]] = column[Option[String]]("cdContract", O.Length(1,varying=false), O.Default(Some("N")))
    /** Database column cdReCal DBType(char), Length(1,false), Default(Some(N)) */
    val cdrecal: Column[Option[String]] = column[Option[String]]("cdReCal", O.Length(1,varying=false), O.Default(Some("N")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
  }
  /** Collection-like TableQuery object for table Gaiaorgchartm */
  lazy val Gaiaorgchartm = new TableQuery(tag => new Gaiaorgchartm(tag))
  
  /** Entity class storing rows of table InvoiceDetail
   *  @param id Database column id DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param invoiceId Database column invoice_id DBType(uniqueidentifier), Length(36,false)
   *  @param productCode Database column product_code DBType(varchar), Length(10,true)
   *  @param description Database column description DBType(nvarchar), Length(200,true)
   *  @param quantity Database column quantity DBType(int)
   *  @param unitPrice Database column unit_price DBType(smallmoney) */
  case class InvoiceDetailRow(id: String, invoiceId: Option[String], productCode: String, description: String, quantity: Int, unitPrice: scala.math.BigDecimal)
  /** GetResult implicit for fetching InvoiceDetailRow objects using plain SQL queries */
  implicit def GetResultInvoiceDetailRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Int], e3: GR[scala.math.BigDecimal]): GR[InvoiceDetailRow] = GR{
    prs => import prs._
    InvoiceDetailRow.tupled((<<[String], <<?[String], <<[String], <<[String], <<[Int], <<[scala.math.BigDecimal]))
  }
  /** Table description of table invoice_detail. Objects of this class serve as prototypes for rows in queries. */
  class InvoiceDetail(_tableTag: Tag) extends Table[InvoiceDetailRow](_tableTag, Some("dbo"), "invoice_detail") {
    def * = (id, invoiceId, productCode, description, quantity, unitPrice) <> (InvoiceDetailRow.tupled, InvoiceDetailRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, invoiceId, productCode.?, description.?, quantity.?, unitPrice.?).shaped.<>({r=>import r._; _1.map(_=> InvoiceDetailRow.tupled((_1.get, _2, _3.get, _4.get, _5.get, _6.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val id: Column[String] = column[String]("id", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column invoice_id DBType(uniqueidentifier), Length(36,false) */
    val invoiceId: Column[Option[String]] = column[Option[String]]("invoice_id", O.Length(36,varying=false))
    /** Database column product_code DBType(varchar), Length(10,true) */
    val productCode: Column[String] = column[String]("product_code", O.Length(10,varying=true))
    /** Database column description DBType(nvarchar), Length(200,true) */
    val description: Column[String] = column[String]("description", O.Length(200,varying=true))
    /** Database column quantity DBType(int) */
    val quantity: Column[Int] = column[Int]("quantity")
    /** Database column unit_price DBType(smallmoney) */
    val unitPrice: Column[scala.math.BigDecimal] = column[scala.math.BigDecimal]("unit_price")
  }
  /** Collection-like TableQuery object for table InvoiceDetail */
  lazy val InvoiceDetail = new TableQuery(tag => new InvoiceDetail(tag))
  
  /** Entity class storing rows of table Invoices
   *  @param id Database column id DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param invoiceNo Database column invoice_no DBType(char), Length(20,false)
   *  @param orderNo Database column order_no DBType(char), Length(20,false)
   *  @param deliveryNo Database column delivery_no DBType(char), Length(20,false)
   *  @param issuedDate Database column issued_date DBType(datetime)
   *  @param customerName Database column customer_name DBType(nvarchar), Length(500,true)
   *  @param address Database column address DBType(nvarchar), Length(2000,true)
   *  @param phoneNumber Database column phone_number DBType(varchar), Length(500,true)
   *  @param memberCode Database column member_code DBType(char), Length(10,false)
   *  @param grossAmount Database column gross_amount DBType(money)
   *  @param discountAmount Database column discount_amount DBType(smallmoney)
   *  @param vatAmount Database column vat_amount DBType(smallmoney)
   *  @param createdByUserUid Database column created_by_user_uid DBType(uniqueidentifier), Length(36,false) */
  case class InvoicesRow(id: String, invoiceNo: String, orderNo: String, deliveryNo: String, issuedDate: java.sql.Timestamp, customerName: String, address: String, phoneNumber: String, memberCode: String, grossAmount: scala.math.BigDecimal, discountAmount: scala.math.BigDecimal, vatAmount: scala.math.BigDecimal, createdByUserUid: Option[String])
  /** GetResult implicit for fetching InvoicesRow objects using plain SQL queries */
  implicit def GetResultInvoicesRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[scala.math.BigDecimal], e3: GR[Option[String]]): GR[InvoicesRow] = GR{
    prs => import prs._
    InvoicesRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[java.sql.Timestamp], <<[String], <<[String], <<[String], <<[String], <<[scala.math.BigDecimal], <<[scala.math.BigDecimal], <<[scala.math.BigDecimal], <<?[String]))
  }
  /** Table description of table invoices. Objects of this class serve as prototypes for rows in queries. */
  class Invoices(_tableTag: Tag) extends Table[InvoicesRow](_tableTag, Some("dbo"), "invoices") {
    def * = (id, invoiceNo, orderNo, deliveryNo, issuedDate, customerName, address, phoneNumber, memberCode, grossAmount, discountAmount, vatAmount, createdByUserUid) <> (InvoicesRow.tupled, InvoicesRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, invoiceNo.?, orderNo.?, deliveryNo.?, issuedDate.?, customerName.?, address.?, phoneNumber.?, memberCode.?, grossAmount.?, discountAmount.?, vatAmount.?, createdByUserUid).shaped.<>({r=>import r._; _1.map(_=> InvoicesRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10.get, _11.get, _12.get, _13)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val id: Column[String] = column[String]("id", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column invoice_no DBType(char), Length(20,false) */
    val invoiceNo: Column[String] = column[String]("invoice_no", O.Length(20,varying=false))
    /** Database column order_no DBType(char), Length(20,false) */
    val orderNo: Column[String] = column[String]("order_no", O.Length(20,varying=false))
    /** Database column delivery_no DBType(char), Length(20,false) */
    val deliveryNo: Column[String] = column[String]("delivery_no", O.Length(20,varying=false))
    /** Database column issued_date DBType(datetime) */
    val issuedDate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("issued_date")
    /** Database column customer_name DBType(nvarchar), Length(500,true) */
    val customerName: Column[String] = column[String]("customer_name", O.Length(500,varying=true))
    /** Database column address DBType(nvarchar), Length(2000,true) */
    val address: Column[String] = column[String]("address", O.Length(2000,varying=true))
    /** Database column phone_number DBType(varchar), Length(500,true) */
    val phoneNumber: Column[String] = column[String]("phone_number", O.Length(500,varying=true))
    /** Database column member_code DBType(char), Length(10,false) */
    val memberCode: Column[String] = column[String]("member_code", O.Length(10,varying=false))
    /** Database column gross_amount DBType(money) */
    val grossAmount: Column[scala.math.BigDecimal] = column[scala.math.BigDecimal]("gross_amount")
    /** Database column discount_amount DBType(smallmoney) */
    val discountAmount: Column[scala.math.BigDecimal] = column[scala.math.BigDecimal]("discount_amount")
    /** Database column vat_amount DBType(smallmoney) */
    val vatAmount: Column[scala.math.BigDecimal] = column[scala.math.BigDecimal]("vat_amount")
    /** Database column created_by_user_uid DBType(uniqueidentifier), Length(36,false) */
    val createdByUserUid: Column[Option[String]] = column[Option[String]]("created_by_user_uid", O.Length(36,varying=false))
  }
  /** Collection-like TableQuery object for table Invoices */
  lazy val Invoices = new TableQuery(tag => new Invoices(tag))
  
  /** Entity class storing rows of table InvoiceSummary
   *  @param invoiceNo Database column invoice_no DBType(varchar), PrimaryKey, Length(12,true)
   *  @param issueDate Database column issue_date DBType(varchar), Length(12,true)
   *  @param memberCode Database column member_code DBType(varchar), Length(12,true)
   *  @param customerName Database column customer_name DBType(nvarchar)
   *  @param grossTotal Database column gross_total DBType(decimal) */
  case class InvoiceSummaryRow(invoiceNo: String, issueDate: String, memberCode: String, customerName: java.sql.Clob, grossTotal: scala.math.BigDecimal)
  /** GetResult implicit for fetching InvoiceSummaryRow objects using plain SQL queries */
  implicit def GetResultInvoiceSummaryRow(implicit e0: GR[String], e1: GR[java.sql.Clob], e2: GR[scala.math.BigDecimal]): GR[InvoiceSummaryRow] = GR{
    prs => import prs._
    InvoiceSummaryRow.tupled((<<[String], <<[String], <<[String], <<[java.sql.Clob], <<[scala.math.BigDecimal]))
  }
  /** Table description of table invoice_summary. Objects of this class serve as prototypes for rows in queries. */
  class InvoiceSummary(_tableTag: Tag) extends Table[InvoiceSummaryRow](_tableTag, Some("dbo"), "invoice_summary") {
    def * = (invoiceNo, issueDate, memberCode, customerName, grossTotal) <> (InvoiceSummaryRow.tupled, InvoiceSummaryRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (invoiceNo.?, issueDate.?, memberCode.?, customerName.?, grossTotal.?).shaped.<>({r=>import r._; _1.map(_=> InvoiceSummaryRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column invoice_no DBType(varchar), PrimaryKey, Length(12,true) */
    val invoiceNo: Column[String] = column[String]("invoice_no", O.PrimaryKey, O.Length(12,varying=true))
    /** Database column issue_date DBType(varchar), Length(12,true) */
    val issueDate: Column[String] = column[String]("issue_date", O.Length(12,varying=true))
    /** Database column member_code DBType(varchar), Length(12,true) */
    val memberCode: Column[String] = column[String]("member_code", O.Length(12,varying=true))
    /** Database column customer_name DBType(nvarchar) */
    val customerName: Column[java.sql.Clob] = column[java.sql.Clob]("customer_name")
    /** Database column gross_total DBType(decimal) */
    val grossTotal: Column[scala.math.BigDecimal] = column[scala.math.BigDecimal]("gross_total")
  }
  /** Collection-like TableQuery object for table InvoiceSummary */
  lazy val InvoiceSummary = new TableQuery(tag => new InvoiceSummary(tag))
  
  /** Entity class storing rows of table MonthlyCommissionReport
   *  @param id Database column id DBType(int), PrimaryKey
   *  @param memberCode Database column member_code DBType(char), Length(10,false)
   *  @param commissionAmount Database column commission_amount DBType(decimal)
   *  @param withHoldingTaxAmount Database column with_holding_tax_amount DBType(decimal)
   *  @param vatAmount Database column vat_amount DBType(decimal)
   *  @param netCommissionAmount Database column net_commission_amount DBType(decimal)
   *  @param monthOfPayment Database column month_of_payment DBType(int)
   *  @param ordering Database column ordering DBType(int)
   *  @param createdOn Database column created_on DBType(datetime)
   *  @param dateOfTaxPayment Database column date_of_tax_payment DBType(datetime)
   *  @param withHoldingTaxReportNo Database column with_holding_tax_report_no DBType(char), Length(6,false)
   *  @param withHoldingTaxReportIsIssued Database column with_holding_tax_report_is_issued DBType(bit) */
  case class MonthlyCommissionReportRow(id: Int, memberCode: Option[String], commissionAmount: Option[scala.math.BigDecimal], withHoldingTaxAmount: Option[scala.math.BigDecimal], vatAmount: Option[scala.math.BigDecimal], netCommissionAmount: Option[scala.math.BigDecimal], monthOfPayment: Option[Int], ordering: Option[Int], createdOn: Option[java.sql.Timestamp], dateOfTaxPayment: Option[java.sql.Timestamp], withHoldingTaxReportNo: Option[String], withHoldingTaxReportIsIssued: Option[Boolean])
  /** GetResult implicit for fetching MonthlyCommissionReportRow objects using plain SQL queries */
  implicit def GetResultMonthlyCommissionReportRow(implicit e0: GR[Int], e1: GR[Option[String]], e2: GR[Option[scala.math.BigDecimal]], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[Boolean]]): GR[MonthlyCommissionReportRow] = GR{
    prs => import prs._
    MonthlyCommissionReportRow.tupled((<<[Int], <<?[String], <<?[scala.math.BigDecimal], <<?[scala.math.BigDecimal], <<?[scala.math.BigDecimal], <<?[scala.math.BigDecimal], <<?[Int], <<?[Int], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[Boolean]))
  }
  /** Table description of table monthly_commission_report. Objects of this class serve as prototypes for rows in queries. */
  class MonthlyCommissionReport(_tableTag: Tag) extends Table[MonthlyCommissionReportRow](_tableTag, Some("dbo"), "monthly_commission_report") {
    def * = (id, memberCode, commissionAmount, withHoldingTaxAmount, vatAmount, netCommissionAmount, monthOfPayment, ordering, createdOn, dateOfTaxPayment, withHoldingTaxReportNo, withHoldingTaxReportIsIssued) <> (MonthlyCommissionReportRow.tupled, MonthlyCommissionReportRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, memberCode, commissionAmount, withHoldingTaxAmount, vatAmount, netCommissionAmount, monthOfPayment, ordering, createdOn, dateOfTaxPayment, withHoldingTaxReportNo, withHoldingTaxReportIsIssued).shaped.<>({r=>import r._; _1.map(_=> MonthlyCommissionReportRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(int), PrimaryKey */
    val id: Column[Int] = column[Int]("id", O.PrimaryKey)
    /** Database column member_code DBType(char), Length(10,false) */
    val memberCode: Column[Option[String]] = column[Option[String]]("member_code", O.Length(10,varying=false))
    /** Database column commission_amount DBType(decimal) */
    val commissionAmount: Column[Option[scala.math.BigDecimal]] = column[Option[scala.math.BigDecimal]]("commission_amount")
    /** Database column with_holding_tax_amount DBType(decimal) */
    val withHoldingTaxAmount: Column[Option[scala.math.BigDecimal]] = column[Option[scala.math.BigDecimal]]("with_holding_tax_amount")
    /** Database column vat_amount DBType(decimal) */
    val vatAmount: Column[Option[scala.math.BigDecimal]] = column[Option[scala.math.BigDecimal]]("vat_amount")
    /** Database column net_commission_amount DBType(decimal) */
    val netCommissionAmount: Column[Option[scala.math.BigDecimal]] = column[Option[scala.math.BigDecimal]]("net_commission_amount")
    /** Database column month_of_payment DBType(int) */
    val monthOfPayment: Column[Option[Int]] = column[Option[Int]]("month_of_payment")
    /** Database column ordering DBType(int) */
    val ordering: Column[Option[Int]] = column[Option[Int]]("ordering")
    /** Database column created_on DBType(datetime) */
    val createdOn: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("created_on")
    /** Database column date_of_tax_payment DBType(datetime) */
    val dateOfTaxPayment: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("date_of_tax_payment")
    /** Database column with_holding_tax_report_no DBType(char), Length(6,false) */
    val withHoldingTaxReportNo: Column[Option[String]] = column[Option[String]]("with_holding_tax_report_no", O.Length(6,varying=false))
    /** Database column with_holding_tax_report_is_issued DBType(bit) */
    val withHoldingTaxReportIsIssued: Column[Option[Boolean]] = column[Option[Boolean]]("with_holding_tax_report_is_issued")
  }
  /** Collection-like TableQuery object for table MonthlyCommissionReport */
  lazy val MonthlyCommissionReport = new TableQuery(tag => new MonthlyCommissionReport(tag))
  
  /** Entity class storing rows of table Newmemberlog
   *  @param id Database column id DBType(int identity), AutoInc, PrimaryKey
   *  @param code Database column code DBType(char), Length(10,false)
   *  @param idNo Database column id_no DBType(char), Length(20,false) */
  case class NewmemberlogRow(id: Int, code: Option[String], idNo: Option[String])
  /** GetResult implicit for fetching NewmemberlogRow objects using plain SQL queries */
  implicit def GetResultNewmemberlogRow(implicit e0: GR[Int], e1: GR[Option[String]]): GR[NewmemberlogRow] = GR{
    prs => import prs._
    NewmemberlogRow.tupled((<<[Int], <<?[String], <<?[String]))
  }
  /** Table description of table newMemberLog. Objects of this class serve as prototypes for rows in queries. */
  class Newmemberlog(_tableTag: Tag) extends Table[NewmemberlogRow](_tableTag, Some("dbo"), "newMemberLog") {
    def * = (id, code, idNo) <> (NewmemberlogRow.tupled, NewmemberlogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, code, idNo).shaped.<>({r=>import r._; _1.map(_=> NewmemberlogRow.tupled((_1.get, _2, _3)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(int identity), AutoInc, PrimaryKey */
    val id: Column[Int] = column[Int]("id", O.AutoInc, O.PrimaryKey)
    /** Database column code DBType(char), Length(10,false) */
    val code: Column[Option[String]] = column[Option[String]]("code", O.Length(10,varying=false))
    /** Database column id_no DBType(char), Length(20,false) */
    val idNo: Column[Option[String]] = column[Option[String]]("id_no", O.Length(20,varying=false))
  }
  /** Collection-like TableQuery object for table Newmemberlog */
  lazy val Newmemberlog = new TableQuery(tag => new Newmemberlog(tag))
  
  /** Entity class storing rows of table PaymentMethod
   *  @param id Database column id DBType(char), PrimaryKey, Length(1,false)
   *  @param description Database column description DBType(nvarchar), Length(100,true) */
  case class PaymentMethodRow(id: String, description: Option[String])
  /** GetResult implicit for fetching PaymentMethodRow objects using plain SQL queries */
  implicit def GetResultPaymentMethodRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[PaymentMethodRow] = GR{
    prs => import prs._
    PaymentMethodRow.tupled((<<[String], <<?[String]))
  }
  /** Table description of table payment_method. Objects of this class serve as prototypes for rows in queries. */
  class PaymentMethod(_tableTag: Tag) extends Table[PaymentMethodRow](_tableTag, Some("dbo"), "payment_method") {
    def * = (id, description) <> (PaymentMethodRow.tupled, PaymentMethodRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, description).shaped.<>({r=>import r._; _1.map(_=> PaymentMethodRow.tupled((_1.get, _2)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(char), PrimaryKey, Length(1,false) */
    val id: Column[String] = column[String]("id", O.PrimaryKey, O.Length(1,varying=false))
    /** Database column description DBType(nvarchar), Length(100,true) */
    val description: Column[Option[String]] = column[Option[String]]("description", O.Length(100,varying=true))
  }
  /** Collection-like TableQuery object for table PaymentMethod */
  lazy val PaymentMethod = new TableQuery(tag => new PaymentMethod(tag))
  
  /** Row type of table Syncmember */
  type SyncmemberRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[java.sql.Timestamp,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for SyncmemberRow providing default values if available in the database schema. */
  def SyncmemberRow(uid: String, cdmember: String = "", cdpersa: String = "", cdpergp: String = "", cdpersg: String = "", cdsponser: Option[String] = Some(""), idservice: Option[String] = Some(""), cdseller: Option[String] = Some("9999999999"), cdspecial: Option[String] = Some("9999999999"), cdagency: Option[String] = Some("9999999999"), cdsuper: Option[String] = Some("9999999999"), cdsupervise: Option[String] = Some("9999999999"), cdsrvmember: Option[String] = Some("9999999999"), cdmemkind: Option[String] = Some(""), szfullname: Option[String] = Some(""), cdsex: Option[String] = Some(""), dtbirthday: Option[java.sql.Timestamp], cdcid: Option[String], szfulladdr: Option[String] = Some(""), szdetail: Option[String] = Some(""), szteldetail: Option[String] = Some(""), szfax: Option[String] = Some(""), szmobile: Option[String] = Some(""), szmail: Option[String] = Some(""), idstatus: Option[String] = Some("1"), cdzip: Option[String] = Some(""), isvalid: Option[Boolean] = Some(true), isdone: Option[Boolean] = Some(false), dtcreate: java.sql.Timestamp, uidcreator: Option[String], dtmodify: Option[java.sql.Timestamp], uidmodifier: Option[String], szmemo: Option[String] = Some(""), cdid: Option[String]): SyncmemberRow = {
    uid :: cdmember :: cdpersa :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: cdmemkind :: szfullname :: cdsex :: dtbirthday :: cdcid :: szfulladdr :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: idstatus :: cdzip :: isvalid :: isdone :: dtcreate :: uidcreator :: dtmodify :: uidmodifier :: szmemo :: cdid :: HNil
  }
  /** GetResult implicit for fetching SyncmemberRow objects using plain SQL queries */
  implicit def GetResultSyncmemberRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]], e4: GR[java.sql.Timestamp]): GR[SyncmemberRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table syncMember. Objects of this class serve as prototypes for rows in queries. */
  class Syncmember(_tableTag: Tag) extends Table[SyncmemberRow](_tableTag, Some("dbo"), "syncMember") {
    def * = uid :: cdmember :: cdpersa :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: cdmemkind :: szfullname :: cdsex :: dtbirthday :: cdcid :: szfulladdr :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: idstatus :: cdzip :: isvalid :: isdone :: dtcreate :: uidcreator :: dtmodify :: uidmodifier :: szmemo :: cdid :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false), O.Default(""))
    /** Database column cdPerSa DBType(char), Length(4,false), Default() */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false), O.Default(""))
    /** Database column cdPerGp DBType(char), Length(2,false), Default() */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false), O.Default(""))
    /** Database column cdPerSg DBType(char), Length(2,false), Default() */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false), O.Default(""))
    /** Database column cdSponser DBType(char), Length(10,false), Default(Some()) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column idService DBType(char), Length(8,false), Default(Some()) */
    val idservice: Column[Option[String]] = column[Option[String]]("idService", O.Length(8,varying=false), O.Default(Some("")))
    /** Database column cdSeller DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSpecial DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdAgency DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSuper DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSupervise DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSrvMember DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdMemKind DBType(char), Length(1,false), Default(Some()) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column szFullName DBType(nvarchar), Length(120,true), Default(Some()) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true), O.Default(Some("")))
    /** Database column cdSex DBType(char), Length(1,false), Default(Some()) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column szFullAddr DBType(nvarchar), Length(128,true), Default(Some()) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szDetail DBType(nvarchar), Length(128,true), Default(Some()) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szTelDetail DBType(nvarchar), Length(10,true), Default(Some()) */
    val szteldetail: Column[Option[String]] = column[Option[String]]("szTelDetail", O.Length(10,varying=true), O.Default(Some("")))
    /** Database column szFax DBType(nvarchar), Length(128,true), Default(Some()) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szMobile DBType(nvarchar), Length(128,true), Default(Some()) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szMail DBType(nvarchar), Length(128,true), Default(Some()) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column idStatus DBType(char), Length(1,false), Default(Some(1)) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column cdZip DBType(char), Length(5,false), Default(Some()) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(5,varying=false), O.Default(Some("")))
    /** Database column isValid DBType(bit), Default(Some(true)) */
    val isvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isValid", O.Default(Some(true)))
    /** Database column isDone DBType(bit), Default(Some(false)) */
    val isdone: Column[Option[Boolean]] = column[Option[Boolean]]("isDone", O.Default(Some(false)))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column szMemo DBType(nvarchar), Length(50,true), Default(Some()) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column cdID DBType(varchar), Length(20,true) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=true))
  }
  /** Collection-like TableQuery object for table Syncmember */
  lazy val Syncmember = new TableQuery(tag => new Syncmember(tag))
  
  /** Entity class storing rows of table Syncorder
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdmember Database column cdMember DBType(nvarchar), Length(10,true), Default(Some())
   *  @param cdordernonet Database column cdOrderNoNet DBType(nvarchar), Length(50,true), Default(Some())
   *  @param cdorderno Database column cdOrderNo DBType(nvarchar), Length(50,true), Default(Some())
   *  @param isdone Database column isDone DBType(bit), Default(Some(false))
   *  @param isvalid Database column isValid DBType(bit), Default(Some(false))
   *  @param cdmodifytype Database column cdModifyType DBType(char), Length(1,false), Default(Some(M))
   *  @param szmemo Database column szMemo DBType(nvarchar), Length(50,true)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class SyncorderRow(uid: String, cdmember: Option[String] = Some(""), cdordernonet: Option[String] = Some(""), cdorderno: Option[String] = Some(""), isdone: Option[Boolean] = Some(false), isvalid: Option[Boolean] = Some(false), cdmodifytype: Option[String] = Some("M"), szmemo: Option[String], dtcreate: Option[java.sql.Timestamp], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching SyncorderRow objects using plain SQL queries */
  implicit def GetResultSyncorderRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Boolean]], e3: GR[Option[java.sql.Timestamp]]): GR[SyncorderRow] = GR{
    prs => import prs._
    SyncorderRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[Boolean], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp]))
  }
  /** Table description of table syncOrder. Objects of this class serve as prototypes for rows in queries. */
  class Syncorder(_tableTag: Tag) extends Table[SyncorderRow](_tableTag, Some("dbo"), "syncOrder") {
    def * = (uid, cdmember, cdordernonet, cdorderno, isdone, isvalid, cdmodifytype, szmemo, dtcreate, dtmodify) <> (SyncorderRow.tupled, SyncorderRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember, cdordernonet, cdorderno, isdone, isvalid, cdmodifytype, szmemo, dtcreate, dtmodify).shaped.<>({r=>import r._; _1.map(_=> SyncorderRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdMember DBType(nvarchar), Length(10,true), Default(Some()) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=true), O.Default(Some("")))
    /** Database column cdOrderNoNet DBType(nvarchar), Length(50,true), Default(Some()) */
    val cdordernonet: Column[Option[String]] = column[Option[String]]("cdOrderNoNet", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column cdOrderNo DBType(nvarchar), Length(50,true), Default(Some()) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column isDone DBType(bit), Default(Some(false)) */
    val isdone: Column[Option[Boolean]] = column[Option[Boolean]]("isDone", O.Default(Some(false)))
    /** Database column isValid DBType(bit), Default(Some(false)) */
    val isvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isValid", O.Default(Some(false)))
    /** Database column cdModifyType DBType(char), Length(1,false), Default(Some(M)) */
    val cdmodifytype: Column[Option[String]] = column[Option[String]]("cdModifyType", O.Length(1,varying=false), O.Default(Some("M")))
    /** Database column szMemo DBType(nvarchar), Length(50,true) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(50,varying=true))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Syncorder */
  lazy val Syncorder = new TableQuery(tag => new Syncorder(tag))
  
  /** Row type of table Tbla0001 */
  type Tbla0001Row = HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[java.sql.Timestamp,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[String,HCons[String,HCons[String,HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Boolean],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0001Row providing default values if available in the database schema. */
  def Tbla0001Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsub0001: String, cdpersa: String, cdpersb: String, cdpergp: String, cdpersg: String, uida0003: Option[String], cdmemkind: String, cdsponser: String, idstatus: String, iscite: Option[Boolean] = Some(true), cdlstate: Option[String], cdchgsponser: Option[String], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], issuspend: Option[Boolean] = Some(false), dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], cdstatus16: Option[String], szremark: Option[String] = Some("")): Tbla0001Row = {
    uid :: uidrelation :: dtstrdate :: dtenddate :: cdsub0001 :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: uida0003 :: cdmemkind :: cdsponser :: idstatus :: iscite :: cdlstate :: cdchgsponser :: cdmember :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: issuspend :: dtstrcontract :: dtendcontract :: cdstatus16 :: szremark :: HNil
  }
  /** GetResult implicit for fetching Tbla0001Row objects using plain SQL queries */
  implicit def GetResultTbla0001Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[Tbla0001Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Boolean] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblA0001. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0001(_tableTag: Tag) extends Table[Tbla0001Row](_tableTag, Some("dbo"), "tblA0001") {
    def * = uid :: uidrelation :: dtstrdate :: dtenddate :: cdsub0001 :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: uida0003 :: cdmemkind :: cdsponser :: idstatus :: iscite :: cdlstate :: cdchgsponser :: cdmember :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: issuspend :: dtstrcontract :: dtendcontract :: cdstatus16 :: szremark :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSub0001 DBType(char), Length(2,false) */
    val cdsub0001: Column[String] = column[String]("cdSub0001", O.Length(2,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSb DBType(char), Length(4,false) */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false))
    /** Database column uidA0003 DBType(uniqueidentifier), Length(36,false) */
    val uida0003: Column[Option[String]] = column[Option[String]]("uidA0003", O.Length(36,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[String] = column[String]("cdMemKind", O.Length(1,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[String] = column[String]("cdSponser", O.Length(10,varying=false))
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[String] = column[String]("idStatus", O.Length(1,varying=false))
    /** Database column isCite DBType(bit), Default(Some(true)) */
    val iscite: Column[Option[Boolean]] = column[Option[Boolean]]("isCite", O.Default(Some(true)))
    /** Database column cdLState DBType(char), Length(1,false) */
    val cdlstate: Column[Option[String]] = column[Option[String]]("cdLState", O.Length(1,varying=false))
    /** Database column cdChgSponser DBType(char), Length(10,false) */
    val cdchgsponser: Column[Option[String]] = column[Option[String]]("cdChgSponser", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column isSuspend DBType(bit), Default(Some(false)) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend", O.Default(Some(false)))
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column cdStatus16 DBType(char), Length(1,false) */
    val cdstatus16: Column[Option[String]] = column[Option[String]]("cdStatus16", O.Length(1,varying=false))
    /** Database column szRemark DBType(nvarchar), Length(128,true), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(128,varying=true), O.Default(Some("")))
    
    /** Primary key of Tbla0001 (database name PK_tblA0001) */
    val pk = primaryKey("PK_tblA0001", uid :: uidrelation :: dtstrdate :: dtenddate :: cdsub0001 :: HNil)
    
    /** Index over (uidrelation,dtstrdate) (database name IX_tblA0001) */
    val index1 = index("IX_tblA0001", uidrelation :: dtstrdate :: HNil)
    /** Index over (cdmember) (database name IX_tblA0001_1) */
    val index2 = index("IX_tblA0001_1", cdmember :: HNil)
    /** Index over (uid) (database name IX_tblA0001_2) */
    val index3 = index("IX_tblA0001_2", uid :: HNil)
  }
  /** Collection-like TableQuery object for table Tbla0001 */
  lazy val Tbla0001 = new TableQuery(tag => new Tbla0001(tag))
  
  /** Row type of table Tbla0001Bak */
  type Tbla0001BakRow = HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[java.sql.Timestamp,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[String,HCons[String,HCons[String,HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Boolean],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0001BakRow providing default values if available in the database schema. */
  def Tbla0001BakRow(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsub0001: String, cdpersa: String, cdpersb: String, cdpergp: String, cdpersg: String, uida0003: Option[String], cdmemkind: String, cdsponser: String, idstatus: String, iscite: Option[Boolean], cdlstate: Option[String], cdchgsponser: Option[String], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], issuspend: Option[Boolean], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], cdstatus16: Option[String]): Tbla0001BakRow = {
    uid :: uidrelation :: dtstrdate :: dtenddate :: cdsub0001 :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: uida0003 :: cdmemkind :: cdsponser :: idstatus :: iscite :: cdlstate :: cdchgsponser :: cdmember :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: issuspend :: dtstrcontract :: dtendcontract :: cdstatus16 :: HNil
  }
  /** GetResult implicit for fetching Tbla0001BakRow objects using plain SQL queries */
  implicit def GetResultTbla0001BakRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[Tbla0001BakRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Boolean] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: HNil
  }
  /** Table description of table tblA0001_bak. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0001Bak(_tableTag: Tag) extends Table[Tbla0001BakRow](_tableTag, Some("dbo"), "tblA0001_bak") {
    def * = uid :: uidrelation :: dtstrdate :: dtenddate :: cdsub0001 :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: uida0003 :: cdmemkind :: cdsponser :: idstatus :: iscite :: cdlstate :: cdchgsponser :: cdmember :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: issuspend :: dtstrcontract :: dtendcontract :: cdstatus16 :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSub0001 DBType(char), Length(2,false) */
    val cdsub0001: Column[String] = column[String]("cdSub0001", O.Length(2,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSb DBType(char), Length(4,false) */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false))
    /** Database column uidA0003 DBType(uniqueidentifier), Length(36,false) */
    val uida0003: Column[Option[String]] = column[Option[String]]("uidA0003", O.Length(36,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[String] = column[String]("cdMemKind", O.Length(1,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[String] = column[String]("cdSponser", O.Length(10,varying=false))
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[String] = column[String]("idStatus", O.Length(1,varying=false))
    /** Database column isCite DBType(bit) */
    val iscite: Column[Option[Boolean]] = column[Option[Boolean]]("isCite")
    /** Database column cdLState DBType(char), Length(1,false) */
    val cdlstate: Column[Option[String]] = column[Option[String]]("cdLState", O.Length(1,varying=false))
    /** Database column cdChgSponser DBType(char), Length(10,false) */
    val cdchgsponser: Column[Option[String]] = column[Option[String]]("cdChgSponser", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column isSuspend DBType(bit) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend")
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column cdStatus16 DBType(char), Length(1,false) */
    val cdstatus16: Column[Option[String]] = column[Option[String]]("cdStatus16", O.Length(1,varying=false))
    
    /** Primary key of Tbla0001Bak (database name PK_tblA0001_bak) */
    val pk = primaryKey("PK_tblA0001_bak", uid :: uidrelation :: dtstrdate :: dtenddate :: cdsub0001 :: HNil)
  }
  /** Collection-like TableQuery object for table Tbla0001Bak */
  lazy val Tbla0001Bak = new TableQuery(tag => new Tbla0001Bak(tag))
  
  /** Row type of table Tbla0002 */
  type Tbla0002Row = HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[java.sql.Timestamp,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0002Row providing default values if available in the database schema. */
  def Tbla0002Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdapplyarea: String, cdcountry: Option[String], szfirstname: Option[String], szlastname: Option[String], szfullname: Option[String], szename: Option[String], cdsex: Option[String], dtbirthday: Option[java.sql.Timestamp], cdmarry: Option[String], uida0005: Option[String], cdcid: Option[String], uidcid: Option[String], cdeat: Option[String], cdlanguage: Option[String], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], szefirstname: Option[String], szelastname: Option[String]): Tbla0002Row = {
    uid :: uidrelation :: dtstrdate :: dtenddate :: cdapplyarea :: cdcountry :: szfirstname :: szlastname :: szfullname :: szename :: cdsex :: dtbirthday :: cdmarry :: uida0005 :: cdcid :: uidcid :: cdeat :: cdlanguage :: cdmember :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: szefirstname :: szelastname :: HNil
  }
  /** GetResult implicit for fetching Tbla0002Row objects using plain SQL queries */
  implicit def GetResultTbla0002Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[Tbla0002Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblA0002. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0002(_tableTag: Tag) extends Table[Tbla0002Row](_tableTag, Some("dbo"), "tblA0002") {
    def * = uid :: uidrelation :: dtstrdate :: dtenddate :: cdapplyarea :: cdcountry :: szfirstname :: szlastname :: szfullname :: szename :: cdsex :: dtbirthday :: cdmarry :: uida0005 :: cdcid :: uidcid :: cdeat :: cdlanguage :: cdmember :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: szefirstname :: szelastname :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdApplyArea DBType(char), Length(4,false) */
    val cdapplyarea: Column[String] = column[String]("cdApplyArea", O.Length(4,varying=false))
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column szFirstName DBType(nchar), Length(40,false) */
    val szfirstname: Column[Option[String]] = column[Option[String]]("szFirstName", O.Length(40,varying=false))
    /** Database column szLastName DBType(nchar), Length(80,false) */
    val szlastname: Column[Option[String]] = column[Option[String]]("szLastName", O.Length(80,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column szEName DBType(nchar), Length(120,false) */
    val szename: Column[Option[String]] = column[Option[String]]("szEName", O.Length(120,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdMarry DBType(char), Length(2,false) */
    val cdmarry: Column[Option[String]] = column[Option[String]]("cdMarry", O.Length(2,varying=false))
    /** Database column uidA0005 DBType(uniqueidentifier), Length(36,false) */
    val uida0005: Column[Option[String]] = column[Option[String]]("uidA0005", O.Length(36,varying=false))
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column uidCid DBType(uniqueidentifier), Length(36,false) */
    val uidcid: Column[Option[String]] = column[Option[String]]("uidCid", O.Length(36,varying=false))
    /** Database column cdEat DBType(char), Length(2,false) */
    val cdeat: Column[Option[String]] = column[Option[String]]("cdEat", O.Length(2,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column szEFirstName DBType(nchar), Length(40,false) */
    val szefirstname: Column[Option[String]] = column[Option[String]]("szEFirstName", O.Length(40,varying=false))
    /** Database column szELastName DBType(nchar), Length(80,false) */
    val szelastname: Column[Option[String]] = column[Option[String]]("szELastName", O.Length(80,varying=false))
    
    /** Index over (uidrelation,dtstrdate) (database name IX_tblA0002) */
    val index1 = index("IX_tblA0002", uidrelation :: dtstrdate :: HNil)
    /** Index over (cdmember) (database name IX_tblA0002_1) */
    val index2 = index("IX_tblA0002_1", cdmember :: HNil)
  }
  /** Collection-like TableQuery object for table Tbla0002 */
  lazy val Tbla0002 = new TableQuery(tag => new Tbla0002(tag))
  
  /** Entity class storing rows of table Tbla0003
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdsub0003 Database column cdSub0003 DBType(char), Length(2,false)
   *  @param cdid Database column cdId DBType(char), Length(20,false)
   *  @param cdissuecountry Database column cdIssueCountry DBType(char), Length(4,false)
   *  @param isdefault Database column isDefault DBType(bit)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class Tbla0003Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsub0003: String, cdid: String, cdissuecountry: Option[String], isdefault: Option[Boolean], szremark: Option[String], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching Tbla0003Row objects using plain SQL queries */
  implicit def GetResultTbla0003Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[Tbla0003Row] = GR{
    prs => import prs._
    Tbla0003Row.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<[String], <<?[String], <<?[Boolean], <<?[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblA0003. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0003(_tableTag: Tag) extends Table[Tbla0003Row](_tableTag, Some("dbo"), "tblA0003") {
    def * = (uid, uidrelation, dtstrdate, dtenddate, cdsub0003, cdid, cdissuecountry, isdefault, szremark, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (Tbla0003Row.tupled, Tbla0003Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation.?, dtstrdate.?, dtenddate.?, cdsub0003.?, cdid.?, cdissuecountry, isdefault, szremark, cdmember.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> Tbla0003Row.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7, _8, _9, _10.get, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSub0003 DBType(char), Length(2,false) */
    val cdsub0003: Column[String] = column[String]("cdSub0003", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[String] = column[String]("cdId", O.Length(20,varying=false))
    /** Database column cdIssueCountry DBType(char), Length(4,false) */
    val cdissuecountry: Column[Option[String]] = column[Option[String]]("cdIssueCountry", O.Length(4,varying=false))
    /** Database column isDefault DBType(bit) */
    val isdefault: Column[Option[Boolean]] = column[Option[Boolean]]("isDefault")
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Index over (uidrelation,dtstrdate) (database name IX_tblA0003) */
    val index1 = index("IX_tblA0003", (uidrelation, dtstrdate))
    /** Index over (cdmember) (database name IX_tblA0003_1) */
    val index2 = index("IX_tblA0003_1", cdmember)
  }
  /** Collection-like TableQuery object for table Tbla0003 */
  lazy val Tbla0003 = new TableQuery(tag => new Tbla0003(tag))
  
  /** Entity class storing rows of table Tbla0005
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdsubtype Database column cdSubType DBType(char), Length(4,false)
   *  @param cdsub0005 Database column cdSub0005 DBType(char), Length(2,false)
   *  @param szfirstname Database column szFirstName DBType(nchar), Length(40,false)
   *  @param szlastname Database column szLastName DBType(nchar), Length(80,false)
   *  @param szfullname Database column szFullName DBType(nchar), Length(120,false)
   *  @param cdsub0003 Database column cdSub0003 DBType(char), Length(2,false)
   *  @param cdid Database column cdId DBType(char), Length(20,false)
   *  @param cdsex Database column cdSex DBType(char), Length(1,false)
   *  @param cdcountry Database column cdCountry DBType(char), Length(10,false)
   *  @param dtbirthday Database column dtBirthday DBType(datetime)
   *  @param cdeat Database column cdEat DBType(char), Length(2,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param icardno Database column iCardNo DBType(int), Default(Some(0))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class Tbla0005Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsubtype: String, cdsub0005: String, szfirstname: Option[String], szlastname: Option[String], szfullname: Option[String], cdsub0003: Option[String], cdid: Option[String], cdsex: Option[String], cdcountry: Option[String], dtbirthday: Option[java.sql.Timestamp], cdeat: Option[String], cdmember: Option[String], icardno: Option[Int] = Some(0), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching Tbla0005Row objects using plain SQL queries */
  implicit def GetResultTbla0005Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Int]], e5: GR[Option[java.sql.Blob]]): GR[Tbla0005Row] = GR{
    prs => import prs._
    Tbla0005Row.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblA0005. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0005(_tableTag: Tag) extends Table[Tbla0005Row](_tableTag, Some("dbo"), "tblA0005") {
    def * = (uid, uidrelation, dtstrdate, dtenddate, cdsubtype, cdsub0005, szfirstname, szlastname, szfullname, cdsub0003, cdid, cdsex, cdcountry, dtbirthday, cdeat, cdmember, icardno, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (Tbla0005Row.tupled, Tbla0005Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation.?, dtstrdate.?, dtenddate.?, cdsubtype.?, cdsub0005.?, szfirstname, szlastname, szfullname, cdsub0003, cdid, cdsex, cdcountry, dtbirthday, cdeat, cdmember, icardno, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> Tbla0005Row.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(4,false) */
    val cdsubtype: Column[String] = column[String]("cdSubType", O.Length(4,varying=false))
    /** Database column cdSub0005 DBType(char), Length(2,false) */
    val cdsub0005: Column[String] = column[String]("cdSub0005", O.Length(2,varying=false))
    /** Database column szFirstName DBType(nchar), Length(40,false) */
    val szfirstname: Column[Option[String]] = column[Option[String]]("szFirstName", O.Length(40,varying=false))
    /** Database column szLastName DBType(nchar), Length(80,false) */
    val szlastname: Column[Option[String]] = column[Option[String]]("szLastName", O.Length(80,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column cdSub0003 DBType(char), Length(2,false) */
    val cdsub0003: Column[Option[String]] = column[Option[String]]("cdSub0003", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdEat DBType(char), Length(2,false) */
    val cdeat: Column[Option[String]] = column[Option[String]]("cdEat", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column iCardNo DBType(int), Default(Some(0)) */
    val icardno: Column[Option[Int]] = column[Option[Int]]("iCardNo", O.Default(Some(0)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tbla0005 */
  lazy val Tbla0005 = new TableQuery(tag => new Tbla0005(tag))
  
  /** Entity class storing rows of table Tbla0006
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdsubtype Database column cdSubType DBType(char), Length(2,false)
   *  @param cdcountry Database column cdCountry DBType(char), Length(10,false)
   *  @param cdarea Database column cdArea DBType(char), Length(10,false)
   *  @param szdistrict Database column szDistrict DBType(nchar), Length(10,false)
   *  @param cdcity Database column cdCity DBType(char), Length(10,false)
   *  @param cdzip Database column cdZip DBType(char), Length(10,false)
   *  @param cdshowaddr Database column cdShowAddr DBType(char), Length(1,false)
   *  @param szaddress Database column szAddress DBType(nchar), Length(128,false)
   *  @param szfulladdr Database column szFullAddr DBType(nchar), Length(255,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param isdefault Database column isDefault DBType(bit)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class Tbla0006Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsubtype: String, cdcountry: Option[String], cdarea: Option[String], szdistrict: Option[String], cdcity: Option[String], cdzip: Option[String], cdshowaddr: Option[String], szaddress: Option[String], szfulladdr: Option[String], szremark: Option[String], isdefault: Option[Boolean], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching Tbla0006Row objects using plain SQL queries */
  implicit def GetResultTbla0006Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[Tbla0006Row] = GR{
    prs => import prs._
    Tbla0006Row.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblA0006. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0006(_tableTag: Tag) extends Table[Tbla0006Row](_tableTag, Some("dbo"), "tblA0006") {
    def * = (uid, uidrelation, dtstrdate, dtenddate, cdsubtype, cdcountry, cdarea, szdistrict, cdcity, cdzip, cdshowaddr, szaddress, szfulladdr, szremark, isdefault, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (Tbla0006Row.tupled, Tbla0006Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation.?, dtstrdate.?, dtenddate.?, cdsubtype.?, cdcountry, cdarea, szdistrict, cdcity, cdzip, cdshowaddr, szaddress, szfulladdr, szremark, isdefault, cdmember.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> Tbla0006Row.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16.get, _17, _18, _19, _20, _21)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(2,false) */
    val cdsubtype: Column[String] = column[String]("cdSubType", O.Length(2,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column szDistrict DBType(nchar), Length(10,false) */
    val szdistrict: Column[Option[String]] = column[Option[String]]("szDistrict", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(10,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column cdShowAddr DBType(char), Length(1,false) */
    val cdshowaddr: Column[Option[String]] = column[Option[String]]("cdShowAddr", O.Length(1,varying=false))
    /** Database column szAddress DBType(nchar), Length(128,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column isDefault DBType(bit) */
    val isdefault: Column[Option[Boolean]] = column[Option[Boolean]]("isDefault")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Index over (uidrelation,dtstrdate) (database name IX_tblA0006) */
    val index1 = index("IX_tblA0006", (uidrelation, dtstrdate))
    /** Index over (cdmember) (database name IX_tblA0006_1) */
    val index2 = index("IX_tblA0006_1", cdmember)
  }
  /** Collection-like TableQuery object for table Tbla0006 */
  lazy val Tbla0006 = new TableQuery(tag => new Tbla0006(tag))
  
  /** Entity class storing rows of table Tbla0007
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdsubtype Database column cdSubType DBType(char), Length(2,false)
   *  @param cdcountry Database column cdCountry DBType(char), Length(4,false)
   *  @param cdarea Database column cdArea DBType(char), Length(10,false)
   *  @param cdcity Database column cdCity DBType(char), Length(4,false)
   *  @param szdetail Database column szDetail DBType(nchar), Length(128,false)
   *  @param cdext Database column cdExt DBType(char), Length(10,false)
   *  @param isdefault Database column isDefault DBType(bit)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class Tbla0007Row(uid: String, uidrelation: Option[String], dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], cdsubtype: Option[String], cdcountry: Option[String], cdarea: Option[String], cdcity: Option[String], szdetail: Option[String], cdext: Option[String], isdefault: Option[Boolean], cdmember: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching Tbla0007Row objects using plain SQL queries */
  implicit def GetResultTbla0007Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Blob]]): GR[Tbla0007Row] = GR{
    prs => import prs._
    Tbla0007Row.tupled((<<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblA0007. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0007(_tableTag: Tag) extends Table[Tbla0007Row](_tableTag, Some("dbo"), "tblA0007") {
    def * = (uid, uidrelation, dtstrdate, dtenddate, cdsubtype, cdcountry, cdarea, cdcity, szdetail, cdext, isdefault, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (Tbla0007Row.tupled, Tbla0007Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation, dtstrdate, dtenddate, cdsubtype, cdcountry, cdarea, cdcity, szdetail, cdext, isdefault, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> Tbla0007Row.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(2,false) */
    val cdsubtype: Column[Option[String]] = column[Option[String]]("cdSubType", O.Length(2,varying=false))
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(4,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(4,varying=false))
    /** Database column szDetail DBType(nchar), Length(128,false) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false))
    /** Database column cdExt DBType(char), Length(10,false) */
    val cdext: Column[Option[String]] = column[Option[String]]("cdExt", O.Length(10,varying=false))
    /** Database column isDefault DBType(bit) */
    val isdefault: Column[Option[Boolean]] = column[Option[Boolean]]("isDefault")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Index over (uidrelation,dtstrdate) (database name IX_tblA0007) */
    val index1 = index("IX_tblA0007", (uidrelation, dtstrdate))
    /** Index over (cdmember) (database name IX_tblA0007_1) */
    val index2 = index("IX_tblA0007_1", cdmember)
  }
  /** Collection-like TableQuery object for table Tbla0007 */
  lazy val Tbla0007 = new TableQuery(tag => new Tbla0007(tag))
  
  /** Entity class storing rows of table Tbla0008
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdsubtype Database column cdSubType DBType(char), Length(4,false)
   *  @param szyyyymm Database column szYYYYMM DBType(char), Length(6,false)
   *  @param dtamount Database column dtAmount DBType(datetime)
   *  @param dtexpdate Database column dtExpDate DBType(datetime)
   *  @param famount Database column fAmount DBType(float), Default(Some(0.0))
   *  @param dtcaldate Database column dtCalDate DBType(datetime)
   *  @param dtpaydate Database column dtPayDate DBType(datetime)
   *  @param cdexpstate Database column cdExpState DBType(char), Length(2,false)
   *  @param cdpaymethod Database column cdPayMethod DBType(char), Length(1,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp)
   *  @param ioperation Database column iOperation DBType(int)
   *  @param szremark Database column szRemark DBType(nchar), Length(128,false), Default(Some())
   *  @param fremamount Database column fRemAmount DBType(float) */
  case class Tbla0008Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsubtype: String, szyyyymm: Option[String], dtamount: Option[java.sql.Timestamp], dtexpdate: Option[java.sql.Timestamp], famount: Option[Double] = Some(0.0), dtcaldate: Option[java.sql.Timestamp], dtpaydate: Option[java.sql.Timestamp], cdexpstate: Option[String], cdpaymethod: Option[String], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], ioperation: Option[Int], szremark: Option[String] = Some(""), fremamount: Option[Double])
  /** GetResult implicit for fetching Tbla0008Row objects using plain SQL queries */
  implicit def GetResultTbla0008Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Double]], e5: GR[Option[java.sql.Blob]], e6: GR[Option[Int]]): GR[Tbla0008Row] = GR{
    prs => import prs._
    Tbla0008Row.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[Double], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[Int], <<?[String], <<?[Double]))
  }
  /** Table description of table tblA0008. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0008(_tableTag: Tag) extends Table[Tbla0008Row](_tableTag, Some("dbo"), "tblA0008") {
    def * = (uid, uidrelation, dtstrdate, dtenddate, cdsubtype, szyyyymm, dtamount, dtexpdate, famount, dtcaldate, dtpaydate, cdexpstate, cdpaymethod, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, byts, ioperation, szremark, fremamount) <> (Tbla0008Row.tupled, Tbla0008Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation.?, dtstrdate.?, dtenddate.?, cdsubtype.?, szyyyymm, dtamount, dtexpdate, famount, dtcaldate, dtpaydate, cdexpstate, cdpaymethod, cdmember.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts, ioperation, szremark, fremamount).shaped.<>({r=>import r._; _1.map(_=> Tbla0008Row.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14.get, _15, _16, _17, _18, _19, _20, _21, _22)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(4,false) */
    val cdsubtype: Column[String] = column[String]("cdSubType", O.Length(4,varying=false))
    /** Database column szYYYYMM DBType(char), Length(6,false) */
    val szyyyymm: Column[Option[String]] = column[Option[String]]("szYYYYMM", O.Length(6,varying=false))
    /** Database column dtAmount DBType(datetime) */
    val dtamount: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtAmount")
    /** Database column dtExpDate DBType(datetime) */
    val dtexpdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtExpDate")
    /** Database column fAmount DBType(float), Default(Some(0.0)) */
    val famount: Column[Option[Double]] = column[Option[Double]]("fAmount", O.Default(Some(0.0)))
    /** Database column dtCalDate DBType(datetime) */
    val dtcaldate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCalDate")
    /** Database column dtPayDate DBType(datetime) */
    val dtpaydate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPayDate")
    /** Database column cdExpState DBType(char), Length(2,false) */
    val cdexpstate: Column[Option[String]] = column[Option[String]]("cdExpState", O.Length(2,varying=false))
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column iOperation DBType(int) */
    val ioperation: Column[Option[Int]] = column[Option[Int]]("iOperation")
    /** Database column szRemark DBType(nchar), Length(128,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column fRemAmount DBType(float) */
    val fremamount: Column[Option[Double]] = column[Option[Double]]("fRemAmount")
    
    /** Index over (uidrelation,dtstrdate) (database name IX_tblA0008) */
    val index1 = index("IX_tblA0008", (uidrelation, dtstrdate))
    /** Index over (cdmember) (database name IX_tblA0008_1) */
    val index2 = index("IX_tblA0008_1", cdmember)
  }
  /** Collection-like TableQuery object for table Tbla0008 */
  lazy val Tbla0008 = new TableQuery(tag => new Tbla0008(tag))
  
  /** Row type of table Tbla0009 */
  type Tbla0009Row = HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[java.sql.Timestamp,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0009Row providing default values if available in the database schema. */
  def Tbla0009Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsubtype: String, cdcardtype: String, cdcardkind: Option[String], cdbank: Option[String], cdbranch: Option[String], szaccountno: Option[String], szholder: Option[String], isdefault: Option[Boolean] = Some(false), dtstrvalid: Option[String], dtendvalid: Option[String], szpassword: Option[String], isconfirm: Option[Boolean], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], szchkno: Option[String], icardno: Option[Int] = Some(0), cdid: Option[String] = Some(""), cdbank2: Option[String] = Some(""), cdbranch2: Option[String], szremittance: Option[String] = Some("")): Tbla0009Row = {
    uid :: uidrelation :: dtstrdate :: dtenddate :: cdsubtype :: cdcardtype :: cdcardkind :: cdbank :: cdbranch :: szaccountno :: szholder :: isdefault :: dtstrvalid :: dtendvalid :: szpassword :: isconfirm :: cdmember :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: szchkno :: icardno :: cdid :: cdbank2 :: cdbranch2 :: szremittance :: HNil
  }
  /** GetResult implicit for fetching Tbla0009Row objects using plain SQL queries */
  implicit def GetResultTbla0009Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]], e6: GR[Option[Int]]): GR[Tbla0009Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblA0009. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0009(_tableTag: Tag) extends Table[Tbla0009Row](_tableTag, Some("dbo"), "tblA0009") {
    def * = uid :: uidrelation :: dtstrdate :: dtenddate :: cdsubtype :: cdcardtype :: cdcardkind :: cdbank :: cdbranch :: szaccountno :: szholder :: isdefault :: dtstrvalid :: dtendvalid :: szpassword :: isconfirm :: cdmember :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: szchkno :: icardno :: cdid :: cdbank2 :: cdbranch2 :: szremittance :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(20,false) */
    val cdsubtype: Column[String] = column[String]("cdSubType", O.Length(20,varying=false))
    /** Database column cdCardType DBType(char), Length(10,false) */
    val cdcardtype: Column[String] = column[String]("cdCardType", O.Length(10,varying=false))
    /** Database column cdCardKind DBType(char), Length(20,false) */
    val cdcardkind: Column[Option[String]] = column[Option[String]]("cdCardKind", O.Length(20,varying=false))
    /** Database column cdBank DBType(char), Length(60,false) */
    val cdbank: Column[Option[String]] = column[Option[String]]("cdBank", O.Length(60,varying=false))
    /** Database column cdBranch DBType(char), Length(60,false) */
    val cdbranch: Column[Option[String]] = column[Option[String]]("cdBranch", O.Length(60,varying=false))
    /** Database column szAccountNo DBType(char), Length(30,false) */
    val szaccountno: Column[Option[String]] = column[Option[String]]("szAccountNo", O.Length(30,varying=false))
    /** Database column szHolder DBType(nchar), Length(120,false) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=false))
    /** Database column isDefault DBType(bit), Default(Some(false)) */
    val isdefault: Column[Option[Boolean]] = column[Option[Boolean]]("isDefault", O.Default(Some(false)))
    /** Database column dtStrValid DBType(char), Length(6,false) */
    val dtstrvalid: Column[Option[String]] = column[Option[String]]("dtStrValid", O.Length(6,varying=false))
    /** Database column dtEndValid DBType(char), Length(6,false) */
    val dtendvalid: Column[Option[String]] = column[Option[String]]("dtEndValid", O.Length(6,varying=false))
    /** Database column szPassword DBType(char), Length(40,false) */
    val szpassword: Column[Option[String]] = column[Option[String]]("szPassword", O.Length(40,varying=false))
    /** Database column isConfirm DBType(bit) */
    val isconfirm: Column[Option[Boolean]] = column[Option[Boolean]]("isConfirm")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column szChkNo DBType(char), Length(3,false) */
    val szchkno: Column[Option[String]] = column[Option[String]]("szChkNo", O.Length(3,varying=false))
    /** Database column iCardNo DBType(int), Default(Some(0)) */
    val icardno: Column[Option[Int]] = column[Option[Int]]("iCardNo", O.Default(Some(0)))
    /** Database column cdID DBType(char), Length(10,false), Default(Some()) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdBank2 DBType(char), Length(60,false), Default(Some()) */
    val cdbank2: Column[Option[String]] = column[Option[String]]("cdBank2", O.Length(60,varying=false), O.Default(Some("")))
    /** Database column cdBranch2 DBType(char), Length(60,false) */
    val cdbranch2: Column[Option[String]] = column[Option[String]]("cdBranch2", O.Length(60,varying=false))
    /** Database column szRemittance DBType(char), Length(30,false), Default(Some()) */
    val szremittance: Column[Option[String]] = column[Option[String]]("szRemittance", O.Length(30,varying=false), O.Default(Some("")))
  }
  /** Collection-like TableQuery object for table Tbla0009 */
  lazy val Tbla0009 = new TableQuery(tag => new Tbla0009(tag))
  
  /** Entity class storing rows of table Tbla0010
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdsubdate Database column cdSubDate DBType(char), Length(2,false)
   *  @param szauthenticno Database column szAuthenticNo DBType(char), Length(10,false)
   *  @param dtissue Database column dtIssue DBType(datetime)
   *  @param iperiod Database column iPeriod DBType(int)
   *  @param isvoucher Database column isVoucher DBType(bit)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param uidcourse Database column uidCourse DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class Tbla0010Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsubdate: String, szauthenticno: Option[String], dtissue: Option[java.sql.Timestamp], iperiod: Option[Int], isvoucher: Option[Boolean], szremark: Option[String], uidcourse: Option[String], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching Tbla0010Row objects using plain SQL queries */
  implicit def GetResultTbla0010Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Int]], e5: GR[Option[Boolean]], e6: GR[Option[java.sql.Blob]]): GR[Tbla0010Row] = GR{
    prs => import prs._
    Tbla0010Row.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[Int], <<?[Boolean], <<?[String], <<?[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblA0010. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0010(_tableTag: Tag) extends Table[Tbla0010Row](_tableTag, Some("dbo"), "tblA0010") {
    def * = (uid, uidrelation, dtstrdate, dtenddate, cdsubdate, szauthenticno, dtissue, iperiod, isvoucher, szremark, uidcourse, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (Tbla0010Row.tupled, Tbla0010Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation.?, dtstrdate.?, dtenddate.?, cdsubdate.?, szauthenticno, dtissue, iperiod, isvoucher, szremark, uidcourse, cdmember.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> Tbla0010Row.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12.get, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubDate DBType(char), Length(2,false) */
    val cdsubdate: Column[String] = column[String]("cdSubDate", O.Length(2,varying=false))
    /** Database column szAuthenticNo DBType(char), Length(10,false) */
    val szauthenticno: Column[Option[String]] = column[Option[String]]("szAuthenticNo", O.Length(10,varying=false))
    /** Database column dtIssue DBType(datetime) */
    val dtissue: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtIssue")
    /** Database column iPeriod DBType(int) */
    val iperiod: Column[Option[Int]] = column[Option[Int]]("iPeriod")
    /** Database column isVoucher DBType(bit) */
    val isvoucher: Column[Option[Boolean]] = column[Option[Boolean]]("isVoucher")
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column uidCourse DBType(uniqueidentifier), Length(36,false) */
    val uidcourse: Column[Option[String]] = column[Option[String]]("uidCourse", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Index over (uidrelation,dtstrdate) (database name IX_tblA0010) */
    val index1 = index("IX_tblA0010", (uidrelation, dtstrdate))
    /** Index over (cdmember) (database name IX_tblA0010_1) */
    val index2 = index("IX_tblA0010_1", cdmember)
  }
  /** Collection-like TableQuery object for table Tbla0010 */
  lazy val Tbla0010 = new TableQuery(tag => new Tbla0010(tag))
  
  /** Entity class storing rows of table Tbla0011
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdsubtype Database column cdSubType DBType(char), Length(2,false)
   *  @param szreason Database column szReason DBType(nchar), Length(255,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class Tbla0011Row(uid: String, uidrelation: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdsubtype: String, szreason: Option[String], cdmember: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching Tbla0011Row objects using plain SQL queries */
  implicit def GetResultTbla0011Row(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[Tbla0011Row] = GR{
    prs => import prs._
    Tbla0011Row.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<?[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblA0011. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0011(_tableTag: Tag) extends Table[Tbla0011Row](_tableTag, Some("dbo"), "tblA0011") {
    def * = (uid, uidrelation, dtstrdate, dtenddate, cdsubtype, szreason, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (Tbla0011Row.tupled, Tbla0011Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation.?, dtstrdate.?, dtenddate.?, cdsubtype.?, szreason, cdmember.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> Tbla0011Row.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7.get, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(2,false) */
    val cdsubtype: Column[String] = column[String]("cdSubType", O.Length(2,varying=false))
    /** Database column szReason DBType(nchar), Length(255,false) */
    val szreason: Column[Option[String]] = column[Option[String]]("szReason", O.Length(255,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Index over (uidrelation,dtstrdate) (database name IX_tblA0011) */
    val index1 = index("IX_tblA0011", (uidrelation, dtstrdate))
    /** Index over (cdmember) (database name IX_tblA0011_1) */
    val index2 = index("IX_tblA0011_1", cdmember)
  }
  /** Collection-like TableQuery object for table Tbla0011 */
  lazy val Tbla0011 = new TableQuery(tag => new Tbla0011(tag))
  
  /** Row type of table Tbla0030 */
  type Tbla0030Row = HCons[String,HCons[String,HCons[Option[java.sql.Timestamp],HCons[java.sql.Timestamp,HCons[Option[String],HCons[String,HCons[String,HCons[Option[String],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0030Row providing default values if available in the database schema. */
  def Tbla0030Row(uid: String, cdpersa: String = "", dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, cdsubtype: Option[String], uidclass: String = "{00000000-0000-0000-0000-000000000000}", uida0031: String = "{00000000-0000-0000-0000-000000000000}", cdgoal: Option[String] = Some(""), iscore: Option[Int] = Some(0), iscertificated: Option[Boolean] = Some(false), cdcertificate: Option[String] = Some(""), dtcertificate: Option[java.sql.Timestamp], dtstrvalidate: Option[java.sql.Timestamp], dtendvalidate: Option[java.sql.Timestamp], iscontract: Option[Boolean] = Some(false), cdstudenttype: Option[String], cdstudentno: Option[String], cdid: Option[String] = Some(""), szname: Option[String] = Some(""), uidrelation: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), szremark: Option[String] = Some(""), is3100: Option[Boolean] = Some(false), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], fsoredays: Option[Double] = Some(0.0), szf1: Option[String] = Some(""), szf2: Option[String] = Some("")): Tbla0030Row = {
    uid :: cdpersa :: dtstrdate :: dtenddate :: cdsubtype :: uidclass :: uida0031 :: cdgoal :: iscore :: iscertificated :: cdcertificate :: dtcertificate :: dtstrvalidate :: dtendvalidate :: iscontract :: cdstudenttype :: cdstudentno :: cdid :: szname :: uidrelation :: szremark :: is3100 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: fsoredays :: szf1 :: szf2 :: HNil
  }
  /** GetResult implicit for fetching Tbla0030Row objects using plain SQL queries */
  implicit def GetResultTbla0030Row(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[java.sql.Timestamp], e3: GR[Option[String]], e4: GR[Option[Int]], e5: GR[Option[Boolean]], e6: GR[Option[java.sql.Blob]], e7: GR[Option[Double]]): GR[Tbla0030Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[Int] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Double] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblA0030. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0030(_tableTag: Tag) extends Table[Tbla0030Row](_tableTag, Some("dbo"), "tblA0030") {
    def * = uid :: cdpersa :: dtstrdate :: dtenddate :: cdsubtype :: uidclass :: uida0031 :: cdgoal :: iscore :: iscertificated :: cdcertificate :: dtcertificate :: dtstrvalidate :: dtendvalidate :: iscontract :: cdstudenttype :: cdstudentno :: cdid :: szname :: uidrelation :: szremark :: is3100 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: fsoredays :: szf1 :: szf2 :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false), Default() */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false), O.Default(""))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(1,false) */
    val cdsubtype: Column[Option[String]] = column[Option[String]]("cdSubType", O.Length(1,varying=false))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000}) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false), O.Default("{00000000-0000-0000-0000-000000000000}"))
    /** Database column uidA0031 DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000}) */
    val uida0031: Column[String] = column[String]("uidA0031", O.Length(36,varying=false), O.Default("{00000000-0000-0000-0000-000000000000}"))
    /** Database column cdGoal DBType(char), Length(2,false), Default(Some()) */
    val cdgoal: Column[Option[String]] = column[Option[String]]("cdGoal", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column iScore DBType(int), Default(Some(0)) */
    val iscore: Column[Option[Int]] = column[Option[Int]]("iScore", O.Default(Some(0)))
    /** Database column isCertificated DBType(bit), Default(Some(false)) */
    val iscertificated: Column[Option[Boolean]] = column[Option[Boolean]]("isCertificated", O.Default(Some(false)))
    /** Database column cdCertificate DBType(char), Length(20,false), Default(Some()) */
    val cdcertificate: Column[Option[String]] = column[Option[String]]("cdCertificate", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column dtCertificate DBType(datetime) */
    val dtcertificate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCertificate")
    /** Database column dtStrValidate DBType(datetime) */
    val dtstrvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrValidate")
    /** Database column dtEndValidate DBType(datetime) */
    val dtendvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndValidate")
    /** Database column isContract DBType(bit), Default(Some(false)) */
    val iscontract: Column[Option[Boolean]] = column[Option[Boolean]]("isContract", O.Default(Some(false)))
    /** Database column cdStudentType DBType(char), Length(1,false) */
    val cdstudenttype: Column[Option[String]] = column[Option[String]]("cdStudentType", O.Length(1,varying=false))
    /** Database column cdStudentNo DBType(char), Length(12,false) */
    val cdstudentno: Column[Option[String]] = column[Option[String]]("cdStudentNo", O.Length(12,varying=false))
    /** Database column cdID DBType(char), Length(20,false), Default(Some()) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column szName DBType(nchar), Length(120,false), Default(Some()) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column is3100 DBType(bit), Default(Some(false)) */
    val is3100: Column[Option[Boolean]] = column[Option[Boolean]]("is3100", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column fSoreDays DBType(float), Default(Some(0.0)) */
    val fsoredays: Column[Option[Double]] = column[Option[Double]]("fSoreDays", O.Default(Some(0.0)))
    /** Database column szF1 DBType(char), Length(10,false), Default(Some()) */
    val szf1: Column[Option[String]] = column[Option[String]]("szF1", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szF2 DBType(char), Length(10,false), Default(Some()) */
    val szf2: Column[Option[String]] = column[Option[String]]("szF2", O.Length(10,varying=false), O.Default(Some("")))
    
    /** Primary key of Tbla0030 (database name PK_tblA0030) */
    val pk = primaryKey("PK_tblA0030", cdpersa :: dtenddate :: uidclass :: uida0031 :: HNil)
    
    /** Index over (cdpersa,uidclass) (database name IX_tblA0030) */
    val index1 = index("IX_tblA0030", cdpersa :: uidclass :: HNil)
    /** Index over (cdpersa,dtstrdate,dtenddate,uida0031) (database name IX_tblA0030_1) */
    val index2 = index("IX_tblA0030_1", cdpersa :: dtstrdate :: dtenddate :: uida0031 :: HNil)
    /** Index over (cdpersa,cdstudenttype,cdstudentno,szname) (database name IX_tblA0030_2) */
    val index3 = index("IX_tblA0030_2", cdpersa :: cdstudenttype :: cdstudentno :: szname :: HNil)
  }
  /** Collection-like TableQuery object for table Tbla0030 */
  lazy val Tbla0030 = new TableQuery(tag => new Tbla0030(tag))
  
  /** Row type of table Tbla0030a */
  type Tbla0030aRow = HCons[String,HCons[String,HCons[Option[java.sql.Timestamp],HCons[java.sql.Timestamp,HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Boolean],HCons[String,HCons[String,HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0030aRow providing default values if available in the database schema. */
  def Tbla0030aRow(uid: String, cdpersa: String = "", dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, cdsubtype: Option[String], uidclass: String = "{00000000-0000-0000-0000-000000000000}", uida0031: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), cdgoal: Option[String] = Some(""), iscore: Option[Int] = Some(0), iscertificated: Option[Boolean] = Some(false), cdcertificate: Option[String] = Some(""), dtcertificate: Option[java.sql.Timestamp], dtstrvalidate: Option[java.sql.Timestamp], dtendvalidate: Option[java.sql.Timestamp], iscontract: Option[Boolean] = Some(false), cdstudenttype: String, cdstudentno: String, cdid: Option[String] = Some(""), szname: String = "", uidrelation: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), szremark: Option[String] = Some(""), is3100: Option[Boolean] = Some(false), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], fsoredays: Option[Double] = Some(0.0), szf1: Option[String] = Some(""), szf2: Option[String] = Some(""), cdsignupway: Option[String] = Some("1"), cdsigninstatus: Option[String] = Some("0"), szabsence: Option[String] = Some(""), isingin: Option[Int] = Some(0), iclassdays: Option[Int] = Some(0)): Tbla0030aRow = {
    uid :: cdpersa :: dtstrdate :: dtenddate :: cdsubtype :: uidclass :: uida0031 :: cdgoal :: iscore :: iscertificated :: cdcertificate :: dtcertificate :: dtstrvalidate :: dtendvalidate :: iscontract :: cdstudenttype :: cdstudentno :: cdid :: szname :: uidrelation :: szremark :: is3100 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: fsoredays :: szf1 :: szf2 :: cdsignupway :: cdsigninstatus :: szabsence :: isingin :: iclassdays :: HNil
  }
  /** GetResult implicit for fetching Tbla0030aRow objects using plain SQL queries */
  implicit def GetResultTbla0030aRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[java.sql.Timestamp], e3: GR[Option[String]], e4: GR[Option[Int]], e5: GR[Option[Boolean]], e6: GR[Option[java.sql.Blob]], e7: GR[Option[Double]]): GR[Tbla0030aRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Boolean] :: <<[String] :: <<[String] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: HNil
  }
  /** Table description of table tblA0030a. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0030a(_tableTag: Tag) extends Table[Tbla0030aRow](_tableTag, Some("dbo"), "tblA0030a") {
    def * = uid :: cdpersa :: dtstrdate :: dtenddate :: cdsubtype :: uidclass :: uida0031 :: cdgoal :: iscore :: iscertificated :: cdcertificate :: dtcertificate :: dtstrvalidate :: dtendvalidate :: iscontract :: cdstudenttype :: cdstudentno :: cdid :: szname :: uidrelation :: szremark :: is3100 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: fsoredays :: szf1 :: szf2 :: cdsignupway :: cdsigninstatus :: szabsence :: isingin :: iclassdays :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false), Default() */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false), O.Default(""))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(1,false) */
    val cdsubtype: Column[Option[String]] = column[Option[String]]("cdSubType", O.Length(1,varying=false))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000}) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false), O.Default("{00000000-0000-0000-0000-000000000000}"))
    /** Database column uidA0031 DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uida0031: Column[Option[String]] = column[Option[String]]("uidA0031", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column cdGoal DBType(char), Length(2,false), Default(Some()) */
    val cdgoal: Column[Option[String]] = column[Option[String]]("cdGoal", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column iScore DBType(int), Default(Some(0)) */
    val iscore: Column[Option[Int]] = column[Option[Int]]("iScore", O.Default(Some(0)))
    /** Database column isCertificated DBType(bit), Default(Some(false)) */
    val iscertificated: Column[Option[Boolean]] = column[Option[Boolean]]("isCertificated", O.Default(Some(false)))
    /** Database column cdCertificate DBType(char), Length(20,false), Default(Some()) */
    val cdcertificate: Column[Option[String]] = column[Option[String]]("cdCertificate", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column dtCertificate DBType(datetime) */
    val dtcertificate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCertificate")
    /** Database column dtStrValidate DBType(datetime) */
    val dtstrvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrValidate")
    /** Database column dtEndValidate DBType(datetime) */
    val dtendvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndValidate")
    /** Database column isContract DBType(bit), Default(Some(false)) */
    val iscontract: Column[Option[Boolean]] = column[Option[Boolean]]("isContract", O.Default(Some(false)))
    /** Database column cdStudentType DBType(char), Length(1,false) */
    val cdstudenttype: Column[String] = column[String]("cdStudentType", O.Length(1,varying=false))
    /** Database column cdStudentNo DBType(char), Length(12,false) */
    val cdstudentno: Column[String] = column[String]("cdStudentNo", O.Length(12,varying=false))
    /** Database column cdID DBType(char), Length(20,false), Default(Some()) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column szName DBType(nchar), Length(120,false), Default() */
    val szname: Column[String] = column[String]("szName", O.Length(120,varying=false), O.Default(""))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column is3100 DBType(bit), Default(Some(false)) */
    val is3100: Column[Option[Boolean]] = column[Option[Boolean]]("is3100", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column fSoreDays DBType(float), Default(Some(0.0)) */
    val fsoredays: Column[Option[Double]] = column[Option[Double]]("fSoreDays", O.Default(Some(0.0)))
    /** Database column szF1 DBType(char), Length(10,false), Default(Some()) */
    val szf1: Column[Option[String]] = column[Option[String]]("szF1", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szF2 DBType(char), Length(10,false), Default(Some()) */
    val szf2: Column[Option[String]] = column[Option[String]]("szF2", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdSignUpWay DBType(char), Length(1,false), Default(Some(1)) */
    val cdsignupway: Column[Option[String]] = column[Option[String]]("cdSignUpWay", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column cdSignInStatus DBType(char), Length(1,false), Default(Some(0)) */
    val cdsigninstatus: Column[Option[String]] = column[Option[String]]("cdSignInStatus", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column szAbsence DBType(nchar), Length(255,false), Default(Some()) */
    val szabsence: Column[Option[String]] = column[Option[String]]("szAbsence", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column iSingIn DBType(int), Default(Some(0)) */
    val isingin: Column[Option[Int]] = column[Option[Int]]("iSingIn", O.Default(Some(0)))
    /** Database column iClassDays DBType(int), Default(Some(0)) */
    val iclassdays: Column[Option[Int]] = column[Option[Int]]("iClassDays", O.Default(Some(0)))
    
    /** Primary key of Tbla0030a (database name PK_tblA0030a) */
    val pk = primaryKey("PK_tblA0030a", cdpersa :: dtenddate :: uidclass :: cdstudentno :: szname :: HNil)
  }
  /** Collection-like TableQuery object for table Tbla0030a */
  lazy val Tbla0030a = new TableQuery(tag => new Tbla0030a(tag))
  
  /** Row type of table Tbla0030x */
  type Tbla0030xRow = HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0030xRow providing default values if available in the database schema. */
  def Tbla0030xRow(uid: Option[String], cdpersa: Option[String], dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], cdsubtype: Option[String], uidclass: Option[String], uida0031: Option[String], cdgoal: Option[String], iscore: Option[Int], iscertificated: Option[Int], cdcertificate: Option[String], dtcertificate: Option[java.sql.Timestamp], dtstrvalidate: Option[java.sql.Timestamp], dtendvalidate: Option[java.sql.Timestamp], iscontract: Option[Int], cdstudenttype: Option[String], cdstudentno: Option[String], cdid: Option[String], szname: Option[String], uidrelation: Option[String], szremark: Option[String], is3100: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): Tbla0030xRow = {
    uid :: cdpersa :: dtstrdate :: dtenddate :: cdsubtype :: uidclass :: uida0031 :: cdgoal :: iscore :: iscertificated :: cdcertificate :: dtcertificate :: dtstrvalidate :: dtendvalidate :: iscontract :: cdstudenttype :: cdstudentno :: cdid :: szname :: uidrelation :: szremark :: is3100 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching Tbla0030xRow objects using plain SQL queries */
  implicit def GetResultTbla0030xRow(implicit e0: GR[Option[String]], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[Int]]): GR[Tbla0030xRow] = GR{
    prs => import prs._
    <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblA0030x. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0030x(_tableTag: Tag) extends Table[Tbla0030xRow](_tableTag, Some("dbo"), "tblA0030x") {
    def * = uid :: cdpersa :: dtstrdate :: dtenddate :: cdsubtype :: uidclass :: uida0031 :: cdgoal :: iscore :: iscertificated :: cdcertificate :: dtcertificate :: dtstrvalidate :: dtendvalidate :: iscontract :: cdstudenttype :: cdstudentno :: cdid :: szname :: uidrelation :: szremark :: is3100 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[Option[String]] = column[Option[String]]("cdPerSa", O.Length(4,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(1,false) */
    val cdsubtype: Column[Option[String]] = column[Option[String]]("cdSubType", O.Length(1,varying=false))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false) */
    val uidclass: Column[Option[String]] = column[Option[String]]("uidClass", O.Length(36,varying=false))
    /** Database column uidA0031 DBType(uniqueidentifier), Length(36,false) */
    val uida0031: Column[Option[String]] = column[Option[String]]("uidA0031", O.Length(36,varying=false))
    /** Database column cdGoal DBType(char), Length(2,false) */
    val cdgoal: Column[Option[String]] = column[Option[String]]("cdGoal", O.Length(2,varying=false))
    /** Database column iScore DBType(int) */
    val iscore: Column[Option[Int]] = column[Option[Int]]("iScore")
    /** Database column isCertificated DBType(int) */
    val iscertificated: Column[Option[Int]] = column[Option[Int]]("isCertificated")
    /** Database column cdCertificate DBType(char), Length(20,false) */
    val cdcertificate: Column[Option[String]] = column[Option[String]]("cdCertificate", O.Length(20,varying=false))
    /** Database column dtCertificate DBType(datetime) */
    val dtcertificate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCertificate")
    /** Database column dtStrValidate DBType(datetime) */
    val dtstrvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrValidate")
    /** Database column dtEndValidate DBType(datetime) */
    val dtendvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndValidate")
    /** Database column isContract DBType(int) */
    val iscontract: Column[Option[Int]] = column[Option[Int]]("isContract")
    /** Database column cdStudentType DBType(char), Length(1,false) */
    val cdstudenttype: Column[Option[String]] = column[Option[String]]("cdStudentType", O.Length(1,varying=false))
    /** Database column cdStudentNo DBType(char), Length(12,false) */
    val cdstudentno: Column[Option[String]] = column[Option[String]]("cdStudentNo", O.Length(12,varying=false))
    /** Database column cdID DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=false))
    /** Database column szName DBType(nchar), Length(120,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(120,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column is3100 DBType(int) */
    val is3100: Column[Option[Int]] = column[Option[Int]]("is3100")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tbla0030x */
  lazy val Tbla0030x = new TableQuery(tag => new Tbla0030x(tag))
  
  /** Row type of table Tbla0031 */
  type Tbla0031Row = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[String,HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[java.sql.Timestamp,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Double],HCons[Option[Boolean],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0031Row providing default values if available in the database schema. */
  def Tbla0031Row(uid: String, cdpersa: String = "", uidclass: String = "{00000000-0000-0000-0000-000000000000}", idsignupno: Int, cdstudenttype: String = "1", cdstudentno: String = "", cdpayer: Option[String] = Some(""), dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, cdsubtype: Option[String], cdid: Option[String] = Some(""), szname: Option[String] = Some(""), uidrelation: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), cdsignupway: Option[String], cdeat: Option[String] = Some("1"), uidroom: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), isshareroom: Option[Boolean] = Some(true), cdsroomatte: Option[String] = Some(""), ftrainfee: Option[Double] = Some(0.0), isincludeeat: Option[Boolean] = Some(false), ftotalmoney: Option[Double] = Some(0.0), cdstatus: Option[String], szfulladdr: Option[String] = Some(""), cdorderno: Option[String] = Some(""), szremark: Option[String] = Some(""), uidnewclass: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), uidnewsignup: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), uidstatusmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtstatusmodify: Option[java.sql.Timestamp], szmodifyreason: Option[String] = Some(""), cdsigninstatus: Option[String], szabsence: Option[String] = Some(""), isignin: Option[Int] = Some(0), iclassdays: Option[Int] = Some(0), is3100: Option[Boolean] = Some(false), cdroomno: Option[String] = Some(""), szf1: Option[String] = Some(""), szf2: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob]): Tbla0031Row = {
    uid :: cdpersa :: uidclass :: idsignupno :: cdstudenttype :: cdstudentno :: cdpayer :: dtstrdate :: dtenddate :: cdsubtype :: cdid :: szname :: uidrelation :: cdsignupway :: cdeat :: uidroom :: isshareroom :: cdsroomatte :: ftrainfee :: isincludeeat :: ftotalmoney :: cdstatus :: szfulladdr :: cdorderno :: szremark :: uidnewclass :: uidnewsignup :: uidstatusmodifier :: dtstatusmodify :: szmodifyreason :: cdsigninstatus :: szabsence :: isignin :: iclassdays :: is3100 :: cdroomno :: szf1 :: szf2 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
  }
  /** GetResult implicit for fetching Tbla0031Row objects using plain SQL queries */
  implicit def GetResultTbla0031Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[java.sql.Timestamp], e5: GR[Option[Boolean]], e6: GR[Option[Double]], e7: GR[Option[Int]], e8: GR[Option[java.sql.Blob]]): GR[Tbla0031Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Double] :: <<?[Boolean] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: HNil
  }
  /** Table description of table tblA0031. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0031(_tableTag: Tag) extends Table[Tbla0031Row](_tableTag, Some("dbo"), "tblA0031") {
    def * = uid :: cdpersa :: uidclass :: idsignupno :: cdstudenttype :: cdstudentno :: cdpayer :: dtstrdate :: dtenddate :: cdsubtype :: cdid :: szname :: uidrelation :: cdsignupway :: cdeat :: uidroom :: isshareroom :: cdsroomatte :: ftrainfee :: isincludeeat :: ftotalmoney :: cdstatus :: szfulladdr :: cdorderno :: szremark :: uidnewclass :: uidnewsignup :: uidstatusmodifier :: dtstatusmodify :: szmodifyreason :: cdsigninstatus :: szabsence :: isignin :: iclassdays :: is3100 :: cdroomno :: szf1 :: szf2 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false), Default() */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false), O.Default(""))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000}) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false), O.Default("{00000000-0000-0000-0000-000000000000}"))
    /** Database column idSignUpNo DBType(int) */
    val idsignupno: Column[Int] = column[Int]("idSignUpNo")
    /** Database column cdStudentType DBType(char), Length(1,false), Default(1) */
    val cdstudenttype: Column[String] = column[String]("cdStudentType", O.Length(1,varying=false), O.Default("1"))
    /** Database column cdStudentNo DBType(char), Length(12,false), Default() */
    val cdstudentno: Column[String] = column[String]("cdStudentNo", O.Length(12,varying=false), O.Default(""))
    /** Database column cdPayer DBType(char), Length(12,false), Default(Some()) */
    val cdpayer: Column[Option[String]] = column[Option[String]]("cdPayer", O.Length(12,varying=false), O.Default(Some("")))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(2,false) */
    val cdsubtype: Column[Option[String]] = column[Option[String]]("cdSubType", O.Length(2,varying=false))
    /** Database column cdID DBType(char), Length(20,false), Default(Some()) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column szName DBType(nchar), Length(120,false), Default(Some()) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column cdSignUpWay DBType(char), Length(1,false) */
    val cdsignupway: Column[Option[String]] = column[Option[String]]("cdSignUpWay", O.Length(1,varying=false))
    /** Database column cdEat DBType(char), Length(1,false), Default(Some(1)) */
    val cdeat: Column[Option[String]] = column[Option[String]]("cdEat", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column uidRoom DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidroom: Column[Option[String]] = column[Option[String]]("uidRoom", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column isShareRoom DBType(bit), Default(Some(true)) */
    val isshareroom: Column[Option[Boolean]] = column[Option[Boolean]]("isShareRoom", O.Default(Some(true)))
    /** Database column cdSRoomAtte DBType(char), Length(12,false), Default(Some()) */
    val cdsroomatte: Column[Option[String]] = column[Option[String]]("cdSRoomAtte", O.Length(12,varying=false), O.Default(Some("")))
    /** Database column fTrainFee DBType(float), Default(Some(0.0)) */
    val ftrainfee: Column[Option[Double]] = column[Option[Double]]("fTrainFee", O.Default(Some(0.0)))
    /** Database column isIncludeEat DBType(bit), Default(Some(false)) */
    val isincludeeat: Column[Option[Boolean]] = column[Option[Boolean]]("isIncludeEat", O.Default(Some(false)))
    /** Database column fTotalMoney DBType(float), Default(Some(0.0)) */
    val ftotalmoney: Column[Option[Double]] = column[Option[Double]]("fTotalMoney", O.Default(Some(0.0)))
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false), Default(Some()) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column cdOrderNo DBType(char), Length(14,false), Default(Some()) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column uidNewClass DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidnewclass: Column[Option[String]] = column[Option[String]]("uidNewClass", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column uidNewSignUp DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidnewsignup: Column[Option[String]] = column[Option[String]]("uidNewSignUp", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column uidStatusModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidstatusmodifier: Column[Option[String]] = column[Option[String]]("uidStatusModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtStatusModify DBType(datetime) */
    val dtstatusmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStatusModify")
    /** Database column szModifyReason DBType(nchar), Length(255,false), Default(Some()) */
    val szmodifyreason: Column[Option[String]] = column[Option[String]]("szModifyReason", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column cdSignInStatus DBType(char), Length(1,false) */
    val cdsigninstatus: Column[Option[String]] = column[Option[String]]("cdSignInStatus", O.Length(1,varying=false))
    /** Database column szAbsence DBType(nchar), Length(255,false), Default(Some()) */
    val szabsence: Column[Option[String]] = column[Option[String]]("szAbsence", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column iSignIn DBType(int), Default(Some(0)) */
    val isignin: Column[Option[Int]] = column[Option[Int]]("iSignIn", O.Default(Some(0)))
    /** Database column iClassDays DBType(int), Default(Some(0)) */
    val iclassdays: Column[Option[Int]] = column[Option[Int]]("iClassDays", O.Default(Some(0)))
    /** Database column is3100 DBType(bit), Default(Some(false)) */
    val is3100: Column[Option[Boolean]] = column[Option[Boolean]]("is3100", O.Default(Some(false)))
    /** Database column cdRoomNo DBType(char), Length(10,false), Default(Some()) */
    val cdroomno: Column[Option[String]] = column[Option[String]]("cdRoomNo", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szF1 DBType(nchar), Length(10,false), Default(Some()) */
    val szf1: Column[Option[String]] = column[Option[String]]("szF1", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szF2 DBType(nchar), Length(10,false), Default(Some()) */
    val szf2: Column[Option[String]] = column[Option[String]]("szF2", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tbla0031 (database name PK_tblA0031) */
    val pk = primaryKey("PK_tblA0031", cdpersa :: uidclass :: idsignupno :: cdstudenttype :: cdstudentno :: HNil)
    
    /** Index over (cdpersa,uidclass,idsignupno) (database name IX_tblA0031) */
    val index1 = index("IX_tblA0031", cdpersa :: uidclass :: idsignupno :: HNil)
    /** Index over (cdpersa,dtstrdate,dtenddate,cdstudenttype,cdstudentno) (database name IX_tblA0031_1) */
    val index2 = index("IX_tblA0031_1", cdpersa :: dtstrdate :: dtenddate :: cdstudenttype :: cdstudentno :: HNil)
  }
  /** Collection-like TableQuery object for table Tbla0031 */
  lazy val Tbla0031 = new TableQuery(tag => new Tbla0031(tag))
  
  /** Row type of table Tbla0031w */
  type Tbla0031wRow = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[String,HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[java.sql.Timestamp,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbla0031wRow providing default values if available in the database schema. */
  def Tbla0031wRow(uid: String, cdpersa: String = "", uidclass: String, idnetsignup: Int, cdstudenttype: String = "1", cdstudentno: String = "", cdpayer: Option[String] = Some(""), dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, cdsubtype: Option[String] = Some(""), cdid: Option[String] = Some(""), szname: Option[String] = Some(""), cdsponser: Option[String] = Some(""), uidrelation: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), cdsignupway: Option[String] = Some("4"), cdeat: Option[String] = Some(""), cdroom: Option[String] = Some(""), sztel: Option[String] = Some(""), szfulladdr: Option[String] = Some(""), szmail: Option[String] = Some(""), isagreedesc: Option[Boolean] = Some(true), szremark: Option[String] = Some(""), idsignupno: Option[Int] = Some(0), isshareroom: Option[Boolean] = Some(true), cdsroomatte: Option[String] = Some(""), cdstatus: Option[String] = Some("1"), isweb: Option[Boolean] = Some(true), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdnetorder: Option[String] = Some("")): Tbla0031wRow = {
    uid :: cdpersa :: uidclass :: idnetsignup :: cdstudenttype :: cdstudentno :: cdpayer :: dtstrdate :: dtenddate :: cdsubtype :: cdid :: szname :: cdsponser :: uidrelation :: cdsignupway :: cdeat :: cdroom :: sztel :: szfulladdr :: szmail :: isagreedesc :: szremark :: idsignupno :: isshareroom :: cdsroomatte :: cdstatus :: isweb :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdnetorder :: HNil
  }
  /** GetResult implicit for fetching Tbla0031wRow objects using plain SQL queries */
  implicit def GetResultTbla0031wRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[java.sql.Timestamp], e5: GR[Option[Boolean]], e6: GR[Option[Int]], e7: GR[Option[java.sql.Blob]]): GR[Tbla0031wRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Int] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: HNil
  }
  /** Table description of table tblA0031w. Objects of this class serve as prototypes for rows in queries. */
  class Tbla0031w(_tableTag: Tag) extends Table[Tbla0031wRow](_tableTag, Some("dbo"), "tblA0031w") {
    def * = uid :: cdpersa :: uidclass :: idnetsignup :: cdstudenttype :: cdstudentno :: cdpayer :: dtstrdate :: dtenddate :: cdsubtype :: cdid :: szname :: cdsponser :: uidrelation :: cdsignupway :: cdeat :: cdroom :: sztel :: szfulladdr :: szmail :: isagreedesc :: szremark :: idsignupno :: isshareroom :: cdsroomatte :: cdstatus :: isweb :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdnetorder :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false), Default() */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false), O.Default(""))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false))
    /** Database column idNetSignUp DBType(int) */
    val idnetsignup: Column[Int] = column[Int]("idNetSignUp")
    /** Database column cdStudentType DBType(char), Length(1,false), Default(1) */
    val cdstudenttype: Column[String] = column[String]("cdStudentType", O.Length(1,varying=false), O.Default("1"))
    /** Database column cdStudentNo DBType(char), Length(12,false), Default() */
    val cdstudentno: Column[String] = column[String]("cdStudentNo", O.Length(12,varying=false), O.Default(""))
    /** Database column cdPayer DBType(char), Length(12,false), Default(Some()) */
    val cdpayer: Column[Option[String]] = column[Option[String]]("cdPayer", O.Length(12,varying=false), O.Default(Some("")))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdSubType DBType(char), Length(2,false), Default(Some()) */
    val cdsubtype: Column[Option[String]] = column[Option[String]]("cdSubType", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column cdID DBType(char), Length(20,false), Default(Some()) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column szName DBType(nchar), Length(120,false), Default(Some()) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column cdSponser DBType(char), Length(10,false), Default(Some()) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column cdSignUpWay DBType(char), Length(1,false), Default(Some(4)) */
    val cdsignupway: Column[Option[String]] = column[Option[String]]("cdSignUpWay", O.Length(1,varying=false), O.Default(Some("4")))
    /** Database column cdEat DBType(char), Length(1,false), Default(Some()) */
    val cdeat: Column[Option[String]] = column[Option[String]]("cdEat", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdRoom DBType(char), Length(2,false), Default(Some()) */
    val cdroom: Column[Option[String]] = column[Option[String]]("cdRoom", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column szTEL DBType(nchar), Length(150,false), Default(Some()) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTEL", O.Length(150,varying=false), O.Default(Some("")))
    /** Database column szFullAddr DBType(nchar), Length(255,false), Default(Some()) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szMail DBType(nchar), Length(128,false), Default(Some()) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column isAgreeDesc DBType(bit), Default(Some(true)) */
    val isagreedesc: Column[Option[Boolean]] = column[Option[Boolean]]("isAgreeDesc", O.Default(Some(true)))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column idSignUpNo DBType(int), Default(Some(0)) */
    val idsignupno: Column[Option[Int]] = column[Option[Int]]("idSignUpNo", O.Default(Some(0)))
    /** Database column isShareRoom DBType(bit), Default(Some(true)) */
    val isshareroom: Column[Option[Boolean]] = column[Option[Boolean]]("isShareRoom", O.Default(Some(true)))
    /** Database column cdSRoomAtte DBType(char), Length(12,false), Default(Some()) */
    val cdsroomatte: Column[Option[String]] = column[Option[String]]("cdSRoomAtte", O.Length(12,varying=false), O.Default(Some("")))
    /** Database column cdStatus DBType(char), Length(1,false), Default(Some(1)) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column isWeb DBType(bit), Default(Some(true)) */
    val isweb: Column[Option[Boolean]] = column[Option[Boolean]]("isWeb", O.Default(Some(true)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdNetOrder DBType(char), Length(14,false), Default(Some()) */
    val cdnetorder: Column[Option[String]] = column[Option[String]]("cdNetOrder", O.Length(14,varying=false), O.Default(Some("")))
    
    /** Primary key of Tbla0031w (database name PK_tblA0031w) */
    val pk = primaryKey("PK_tblA0031w", cdpersa :: uidclass :: idnetsignup :: cdstudenttype :: cdstudentno :: dtenddate :: HNil)
  }
  /** Collection-like TableQuery object for table Tbla0031w */
  lazy val Tbla0031w = new TableQuery(tag => new Tbla0031w(tag))
  
  /** Entity class storing rows of table Tblabank
   *  @param cdmem Database column cdMEM DBType(char), Length(10,false)
   *  @param bankl Database column BANKL DBType(char), Length(40,false)
   *  @param suid Database column suid DBType(uniqueidentifier), Length(36,false) */
  case class TblabankRow(cdmem: Option[String], bankl: Option[String], suid: Option[String])
  /** GetResult implicit for fetching TblabankRow objects using plain SQL queries */
  implicit def GetResultTblabankRow(implicit e0: GR[Option[String]]): GR[TblabankRow] = GR{
    prs => import prs._
    TblabankRow.tupled((<<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblABank. Objects of this class serve as prototypes for rows in queries. */
  class Tblabank(_tableTag: Tag) extends Table[TblabankRow](_tableTag, Some("dbo"), "tblABank") {
    def * = (cdmem, bankl, suid) <> (TblabankRow.tupled, TblabankRow.unapply)
    
    /** Database column cdMEM DBType(char), Length(10,false) */
    val cdmem: Column[Option[String]] = column[Option[String]]("cdMEM", O.Length(10,varying=false))
    /** Database column BANKL DBType(char), Length(40,false) */
    val bankl: Column[Option[String]] = column[Option[String]]("BANKL", O.Length(40,varying=false))
    /** Database column suid DBType(uniqueidentifier), Length(36,false) */
    val suid: Column[Option[String]] = column[Option[String]]("suid", O.Length(36,varying=false))
  }
  /** Collection-like TableQuery object for table Tblabank */
  lazy val Tblabank = new TableQuery(tag => new Tblabank(tag))
  
  /** Entity class storing rows of table Tblaction
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdaction Database column cdAction DBType(char), PrimaryKey, Length(8,false)
   *  @param cdgroup Database column cdGroup DBType(char), Length(3,false)
   *  @param cdpackage Database column cdPackage DBType(char), Length(8,false)
   *  @param cdkind Database column cdKind DBType(char), Length(2,false) */
  case class TblactionRow(uid: String, cdaction: String, cdgroup: Option[String], cdpackage: String, cdkind: Option[String])
  /** GetResult implicit for fetching TblactionRow objects using plain SQL queries */
  implicit def GetResultTblactionRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[TblactionRow] = GR{
    prs => import prs._
    TblactionRow.tupled((<<[String], <<[String], <<?[String], <<[String], <<?[String]))
  }
  /** Table description of table tblAction. Objects of this class serve as prototypes for rows in queries. */
  class Tblaction(_tableTag: Tag) extends Table[TblactionRow](_tableTag, Some("dbo"), "tblAction") {
    def * = (uid, cdaction, cdgroup, cdpackage, cdkind) <> (TblactionRow.tupled, TblactionRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdaction.?, cdgroup, cdpackage.?, cdkind).shaped.<>({r=>import r._; _1.map(_=> TblactionRow.tupled((_1.get, _2.get, _3, _4.get, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdAction DBType(char), PrimaryKey, Length(8,false) */
    val cdaction: Column[String] = column[String]("cdAction", O.PrimaryKey, O.Length(8,varying=false))
    /** Database column cdGroup DBType(char), Length(3,false) */
    val cdgroup: Column[Option[String]] = column[Option[String]]("cdGroup", O.Length(3,varying=false))
    /** Database column cdPackage DBType(char), Length(8,false) */
    val cdpackage: Column[String] = column[String]("cdPackage", O.Length(8,varying=false))
    /** Database column cdKind DBType(char), Length(2,false) */
    val cdkind: Column[Option[String]] = column[Option[String]]("cdKind", O.Length(2,varying=false))
  }
  /** Collection-like TableQuery object for table Tblaction */
  lazy val Tblaction = new TableQuery(tag => new Tblaction(tag))
  
  /** Entity class storing rows of table Tblactiond
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidaction Database column uidAction DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szactiondesc Database column szActionDesc DBType(nchar), Length(255,false) */
  case class TblactiondRow(uid: String, uidaction: String, cdlanguage: String, szactiondesc: Option[String])
  /** GetResult implicit for fetching TblactiondRow objects using plain SQL queries */
  implicit def GetResultTblactiondRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[TblactiondRow] = GR{
    prs => import prs._
    TblactiondRow.tupled((<<[String], <<[String], <<[String], <<?[String]))
  }
  /** Table description of table tblActionD. Objects of this class serve as prototypes for rows in queries. */
  class Tblactiond(_tableTag: Tag) extends Table[TblactiondRow](_tableTag, Some("dbo"), "tblActionD") {
    def * = (uid, uidaction, cdlanguage, szactiondesc) <> (TblactiondRow.tupled, TblactiondRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidaction.?, cdlanguage.?, szactiondesc).shaped.<>({r=>import r._; _1.map(_=> TblactiondRow.tupled((_1.get, _2.get, _3.get, _4)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidAction DBType(uniqueidentifier), Length(36,false) */
    val uidaction: Column[String] = column[String]("uidAction", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szActionDesc DBType(nchar), Length(255,false) */
    val szactiondesc: Column[Option[String]] = column[Option[String]]("szActionDesc", O.Length(255,varying=false))
    
    /** Primary key of Tblactiond (database name PK_tblActionD) */
    val pk = primaryKey("PK_tblActionD", (uidaction, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblactiond */
  lazy val Tblactiond = new TableQuery(tag => new Tblactiond(tag))
  
  /** Entity class storing rows of table Tblactoindef
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidaction Database column uidAction DBType(uniqueidentifier), Length(36,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param cdinfotype Database column cdInfoType DBType(char), Length(4,false) */
  case class TblactoindefRow(uid: String, uidaction: String, iseq: Int, cdinfotype: String)
  /** GetResult implicit for fetching TblactoindefRow objects using plain SQL queries */
  implicit def GetResultTblactoindefRow(implicit e0: GR[String], e1: GR[Int]): GR[TblactoindefRow] = GR{
    prs => import prs._
    TblactoindefRow.tupled((<<[String], <<[String], <<[Int], <<[String]))
  }
  /** Table description of table tblActoinDef. Objects of this class serve as prototypes for rows in queries. */
  class Tblactoindef(_tableTag: Tag) extends Table[TblactoindefRow](_tableTag, Some("dbo"), "tblActoinDef") {
    def * = (uid, uidaction, iseq, cdinfotype) <> (TblactoindefRow.tupled, TblactoindefRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidaction.?, iseq.?, cdinfotype.?).shaped.<>({r=>import r._; _1.map(_=> TblactoindefRow.tupled((_1.get, _2.get, _3.get, _4.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidAction DBType(uniqueidentifier), Length(36,false) */
    val uidaction: Column[String] = column[String]("uidAction", O.Length(36,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdInfoType DBType(char), Length(4,false) */
    val cdinfotype: Column[String] = column[String]("cdInfoType", O.Length(4,varying=false))
  }
  /** Collection-like TableQuery object for table Tblactoindef */
  lazy val Tblactoindef = new TableQuery(tag => new Tblactoindef(tag))
  
  /** Entity class storing rows of table Tblannmessage
   *  @param cdannounce Database column cdAnnounce DBType(char), Length(10,false), Default()
   *  @param cdkind Database column cdKind DBType(char), Length(1,false), Default()
   *  @param cdnotify Database column cdNotify DBType(char), Length(1,false), Default()
   *  @param cdresponse Database column cdResponse DBType(char), Length(1,false), Default()
   *  @param sztitle Database column szTitle DBType(nchar), Length(40,false)
   *  @param szbody Database column szBody DBType(nvarchar), Length(1024,true), Default(Some())
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblannmessageRow(cdannounce: String = "", cdkind: String = "", cdnotify: String = "", cdresponse: String = "", sztitle: Option[String], szbody: Option[String] = Some(""), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblannmessageRow objects using plain SQL queries */
  implicit def GetResultTblannmessageRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblannmessageRow] = GR{
    prs => import prs._
    TblannmessageRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblANNmessage. Objects of this class serve as prototypes for rows in queries. */
  class Tblannmessage(_tableTag: Tag) extends Table[TblannmessageRow](_tableTag, Some("dbo"), "tblANNmessage") {
    def * = (cdannounce, cdkind, cdnotify, cdresponse, sztitle, szbody, dtmodify) <> (TblannmessageRow.tupled, TblannmessageRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdannounce.?, cdkind.?, cdnotify.?, cdresponse.?, sztitle, szbody, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblannmessageRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdAnnounce DBType(char), Length(10,false), Default() */
    val cdannounce: Column[String] = column[String]("cdAnnounce", O.Length(10,varying=false), O.Default(""))
    /** Database column cdKind DBType(char), Length(1,false), Default() */
    val cdkind: Column[String] = column[String]("cdKind", O.Length(1,varying=false), O.Default(""))
    /** Database column cdNotify DBType(char), Length(1,false), Default() */
    val cdnotify: Column[String] = column[String]("cdNotify", O.Length(1,varying=false), O.Default(""))
    /** Database column cdResponse DBType(char), Length(1,false), Default() */
    val cdresponse: Column[String] = column[String]("cdResponse", O.Length(1,varying=false), O.Default(""))
    /** Database column szTitle DBType(nchar), Length(40,false) */
    val sztitle: Column[Option[String]] = column[Option[String]]("szTitle", O.Length(40,varying=false))
    /** Database column szBody DBType(nvarchar), Length(1024,true), Default(Some()) */
    val szbody: Column[Option[String]] = column[Option[String]]("szBody", O.Length(1024,varying=true), O.Default(Some("")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblannmessage (database name PK_tblANNmessage) */
    val pk = primaryKey("PK_tblANNmessage", (cdannounce, cdkind, cdnotify, cdresponse))
  }
  /** Collection-like TableQuery object for table Tblannmessage */
  lazy val Tblannmessage = new TableQuery(tag => new Tblannmessage(tag))
  
  /** Entity class storing rows of table Tblannounce
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdbatchno Database column cdBatchNo DBType(char), PrimaryKey, Length(10,false)
   *  @param cdannounce Database column cdAnnounce DBType(char), Length(5,false), Default()
   *  @param cdnoticemethod Database column cdNoticeMethod DBType(char), Length(1,false), Default(0)
   *  @param sznoticeways Database column szNoticeWays DBType(char), Length(50,false), Default(Some())
   *  @param dtannounce Database column dtAnnounce DBType(datetime)
   *  @param sznoticetarget Database column szNoticeTarget DBType(char), Length(100,false), Default()
   *  @param szcontent Database column szContent DBType(nchar), Length(160,false), Default()
   *  @param szfile Database column szFile DBType(nchar), Length(256,false), Default(Some())
   *  @param szparameter01 Database column szParameter01 DBType(nchar), Length(100,false), Default(Some())
   *  @param szparameter02 Database column szParameter02 DBType(nchar), Length(100,false)
   *  @param szparameter03 Database column szParameter03 DBType(nchar), Length(100,false), Default(Some())
   *  @param szparameter04 Database column szParameter04 DBType(nchar), Length(100,false), Default(Some())
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param szemailtitle Database column szEmailTitle DBType(nvarchar), Length(100,true), Default(Some())
   *  @param szemailbody Database column szEmailBody DBType(nvarchar), Length(1024,true), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblannounceRow(uid: String, cdbatchno: String, cdannounce: String = "", cdnoticemethod: String = "0", sznoticeways: Option[String] = Some(""), dtannounce: java.sql.Timestamp, sznoticetarget: String = "", szcontent: String = "", szfile: Option[String] = Some(""), szparameter01: Option[String] = Some(""), szparameter02: Option[String], szparameter03: Option[String] = Some(""), szparameter04: Option[String] = Some(""), isinvalid: Option[Boolean] = Some(false), szemailtitle: Option[String] = Some(""), szemailbody: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblannounceRow objects using plain SQL queries */
  implicit def GetResultTblannounceRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[java.sql.Timestamp], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]]): GR[TblannounceRow] = GR{
    prs => import prs._
    TblannounceRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<[java.sql.Timestamp], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblAnnounce. Objects of this class serve as prototypes for rows in queries. */
  class Tblannounce(_tableTag: Tag) extends Table[TblannounceRow](_tableTag, Some("dbo"), "tblAnnounce") {
    def * = (uid, cdbatchno, cdannounce, cdnoticemethod, sznoticeways, dtannounce, sznoticetarget, szcontent, szfile, szparameter01, szparameter02, szparameter03, szparameter04, isinvalid, szemailtitle, szemailbody, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblannounceRow.tupled, TblannounceRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdbatchno.?, cdannounce.?, cdnoticemethod.?, sznoticeways, dtannounce.?, sznoticetarget.?, szcontent.?, szfile, szparameter01, szparameter02, szparameter03, szparameter04, isinvalid, szemailtitle, szemailbody, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblannounceRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6.get, _7.get, _8.get, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdBatchNo DBType(char), PrimaryKey, Length(10,false) */
    val cdbatchno: Column[String] = column[String]("cdBatchNo", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column cdAnnounce DBType(char), Length(5,false), Default() */
    val cdannounce: Column[String] = column[String]("cdAnnounce", O.Length(5,varying=false), O.Default(""))
    /** Database column cdNoticeMethod DBType(char), Length(1,false), Default(0) */
    val cdnoticemethod: Column[String] = column[String]("cdNoticeMethod", O.Length(1,varying=false), O.Default("0"))
    /** Database column szNoticeWays DBType(char), Length(50,false), Default(Some()) */
    val sznoticeways: Column[Option[String]] = column[Option[String]]("szNoticeWays", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column dtAnnounce DBType(datetime) */
    val dtannounce: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtAnnounce")
    /** Database column szNoticeTarget DBType(char), Length(100,false), Default() */
    val sznoticetarget: Column[String] = column[String]("szNoticeTarget", O.Length(100,varying=false), O.Default(""))
    /** Database column szContent DBType(nchar), Length(160,false), Default() */
    val szcontent: Column[String] = column[String]("szContent", O.Length(160,varying=false), O.Default(""))
    /** Database column szFile DBType(nchar), Length(256,false), Default(Some()) */
    val szfile: Column[Option[String]] = column[Option[String]]("szFile", O.Length(256,varying=false), O.Default(Some("")))
    /** Database column szParameter01 DBType(nchar), Length(100,false), Default(Some()) */
    val szparameter01: Column[Option[String]] = column[Option[String]]("szParameter01", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column szParameter02 DBType(nchar), Length(100,false) */
    val szparameter02: Column[Option[String]] = column[Option[String]]("szParameter02", O.Length(100,varying=false))
    /** Database column szParameter03 DBType(nchar), Length(100,false), Default(Some()) */
    val szparameter03: Column[Option[String]] = column[Option[String]]("szParameter03", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column szParameter04 DBType(nchar), Length(100,false), Default(Some()) */
    val szparameter04: Column[Option[String]] = column[Option[String]]("szParameter04", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column szEmailTitle DBType(nvarchar), Length(100,true), Default(Some()) */
    val szemailtitle: Column[Option[String]] = column[Option[String]]("szEmailTitle", O.Length(100,varying=true), O.Default(Some("")))
    /** Database column szEmailBody DBType(nvarchar), Length(1024,true), Default(Some()) */
    val szemailbody: Column[Option[String]] = column[Option[String]]("szEmailBody", O.Length(1024,varying=true), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Index over (dtannounce,cdbatchno) (database name IX_tblAnnounce) */
    val index1 = index("IX_tblAnnounce", (dtannounce, cdbatchno))
  }
  /** Collection-like TableQuery object for table Tblannounce */
  lazy val Tblannounce = new TableQuery(tag => new Tblannounce(tag))
  
  /** Row type of table Tblannounced */
  type TblannouncedRow = HCons[String,HCons[Int,HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblannouncedRow providing default values if available in the database schema. */
  def TblannouncedRow(uid: String, idseq: Int, cdbatchno: String, cdannounce: String = "", dtannounce: java.sql.Timestamp, cdnoticeway: String = "", cdmember: String = "", szfullname: Option[String] = Some(""), cdsex: Option[String] = Some(""), sztel: Option[String] = Some(""), szmobile: Option[String] = Some(""), szfax: Option[String] = Some(""), cdzip: Option[String] = Some(""), szfulladdr: Option[String] = Some(""), szmail: Option[String] = Some(""), szcontent: Option[String] = Some(""), szemailtitle: Option[String] = Some(""), szemailbody: Option[String] = Some(""), szremark: Option[String] = Some(""), cdstatus: Option[String] = Some("0"), cdmobilecode: Option[String] = Some(""), cdf1: Option[String] = Some(""), cdf2: Option[String] = Some("")): TblannouncedRow = {
    uid :: idseq :: cdbatchno :: cdannounce :: dtannounce :: cdnoticeway :: cdmember :: szfullname :: cdsex :: sztel :: szmobile :: szfax :: cdzip :: szfulladdr :: szmail :: szcontent :: szemailtitle :: szemailbody :: szremark :: cdstatus :: cdmobilecode :: cdf1 :: cdf2 :: HNil
  }
  /** GetResult implicit for fetching TblannouncedRow objects using plain SQL queries */
  implicit def GetResultTblannouncedRow(implicit e0: GR[String], e1: GR[Int], e2: GR[java.sql.Timestamp], e3: GR[Option[String]]): GR[TblannouncedRow] = GR{
    prs => import prs._
    <<[String] :: <<[Int] :: <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblAnnounceD. Objects of this class serve as prototypes for rows in queries. */
  class Tblannounced(_tableTag: Tag) extends Table[TblannouncedRow](_tableTag, Some("dbo"), "tblAnnounceD") {
    def * = uid :: idseq :: cdbatchno :: cdannounce :: dtannounce :: cdnoticeway :: cdmember :: szfullname :: cdsex :: sztel :: szmobile :: szfax :: cdzip :: szfulladdr :: szmail :: szcontent :: szemailtitle :: szemailbody :: szremark :: cdstatus :: cdmobilecode :: cdf1 :: cdf2 :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column idSeq DBType(int identity), AutoInc, PrimaryKey */
    val idseq: Column[Int] = column[Int]("idSeq", O.AutoInc, O.PrimaryKey)
    /** Database column cdBatchNo DBType(char), Length(10,false) */
    val cdbatchno: Column[String] = column[String]("cdBatchNo", O.Length(10,varying=false))
    /** Database column cdAnnounce DBType(char), Length(5,false), Default() */
    val cdannounce: Column[String] = column[String]("cdAnnounce", O.Length(5,varying=false), O.Default(""))
    /** Database column dtAnnounce DBType(datetime) */
    val dtannounce: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtAnnounce")
    /** Database column cdNoticeWay DBType(char), Length(1,false), Default() */
    val cdnoticeway: Column[String] = column[String]("cdNoticeWay", O.Length(1,varying=false), O.Default(""))
    /** Database column cdMember DBType(char), Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false), O.Default(""))
    /** Database column szFullName DBType(nchar), Length(120,false), Default(Some()) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column cdSex DBType(char), Length(1,false), Default(Some()) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column szTel DBType(char), Length(50,false), Default(Some()) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szMobile DBType(char), Length(50,false), Default(Some()) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szFAX DBType(char), Length(128,false), Default(Some()) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFAX", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column cdZIP DBType(char), Length(50,false), Default(Some()) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZIP", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szFullAddr DBType(nchar), Length(128,false), Default(Some()) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szMail DBType(char), Length(128,false), Default(Some()) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szContent DBType(nchar), Length(160,false), Default(Some()) */
    val szcontent: Column[Option[String]] = column[Option[String]]("szContent", O.Length(160,varying=false), O.Default(Some("")))
    /** Database column szEmailTitle DBType(nvarchar), Length(100,true), Default(Some()) */
    val szemailtitle: Column[Option[String]] = column[Option[String]]("szEmailTitle", O.Length(100,varying=true), O.Default(Some("")))
    /** Database column szEmailBody DBType(nvarchar), Length(1024,true), Default(Some()) */
    val szemailbody: Column[Option[String]] = column[Option[String]]("szEmailBody", O.Length(1024,varying=true), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(50,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column cdStatus DBType(char), Length(1,false), Default(Some(0)) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column cdMobileCode DBType(char), Length(10,false), Default(Some()) */
    val cdmobilecode: Column[Option[String]] = column[Option[String]]("cdMobileCode", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdF1 DBType(nchar), Length(120,false), Default(Some()) */
    val cdf1: Column[Option[String]] = column[Option[String]]("cdF1", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column cdF2 DBType(nchar), Length(120,false), Default(Some()) */
    val cdf2: Column[Option[String]] = column[Option[String]]("cdF2", O.Length(120,varying=false), O.Default(Some("")))
    
    /** Index over (cdbatchno) (database name IX_tblAnnounceD) */
    val index1 = index("IX_tblAnnounceD", cdbatchno :: HNil)
    /** Index over (dtannounce,cdnoticeway,cdbatchno) (database name IX_tblAnnounceD_1) */
    val index2 = index("IX_tblAnnounceD_1", dtannounce :: cdnoticeway :: cdbatchno :: HNil)
  }
  /** Collection-like TableQuery object for table Tblannounced */
  lazy val Tblannounced = new TableQuery(tag => new Tblannounced(tag))
  
  /** Entity class storing rows of table Tblannouncetarget
   *  @param cdbatchno Database column cdBatchNo DBType(char), Length(10,false)
   *  @param cdtarget Database column cdTarget DBType(varchar), Length(20,true) */
  case class TblannouncetargetRow(cdbatchno: String, cdtarget: String)
  /** GetResult implicit for fetching TblannouncetargetRow objects using plain SQL queries */
  implicit def GetResultTblannouncetargetRow(implicit e0: GR[String]): GR[TblannouncetargetRow] = GR{
    prs => import prs._
    TblannouncetargetRow.tupled((<<[String], <<[String]))
  }
  /** Table description of table tblAnnounceTarget. Objects of this class serve as prototypes for rows in queries. */
  class Tblannouncetarget(_tableTag: Tag) extends Table[TblannouncetargetRow](_tableTag, Some("dbo"), "tblAnnounceTarget") {
    def * = (cdbatchno, cdtarget) <> (TblannouncetargetRow.tupled, TblannouncetargetRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdbatchno.?, cdtarget.?).shaped.<>({r=>import r._; _1.map(_=> TblannouncetargetRow.tupled((_1.get, _2.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdBatchNo DBType(char), Length(10,false) */
    val cdbatchno: Column[String] = column[String]("cdBatchNo", O.Length(10,varying=false))
    /** Database column cdTarget DBType(varchar), Length(20,true) */
    val cdtarget: Column[String] = column[String]("cdTarget", O.Length(20,varying=true))
    
    /** Primary key of Tblannouncetarget (database name PK_tblAnnounceTarget) */
    val pk = primaryKey("PK_tblAnnounceTarget", (cdbatchno, cdtarget))
  }
  /** Collection-like TableQuery object for table Tblannouncetarget */
  lazy val Tblannouncetarget = new TableQuery(tag => new Tblannouncetarget(tag))
  
  /** Row type of table TblattendanceTmp */
  type TblattendanceTmpRow = HCons[Int,HCons[String,HCons[String,HCons[String,HCons[Int,HCons[Option[Int],HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblattendanceTmpRow providing default values if available in the database schema. */
  def TblattendanceTmpRow(idbseq: Int, cduser: String, cdclass: String, cdexlseq: String, iseq: Int, idsignupno: Option[Int], cdmember: String, szname: String, szabsence: Option[String] = Some(""), szremark: Option[String] = Some(""), cdrelaion: Option[String] = Some(""), dtopen1: Option[String], dtopen2: Option[String], dtopen3: Option[String], dtopen4: Option[String], dtopen5: Option[String], dtopen6: Option[String], dtopen7: Option[String], dtopen8: Option[String], dtopen9: Option[String], dtopen10: Option[String], dtopen11: Option[String], dtopen12: Option[String], dtopen13: Option[String], dtopen14: Option[String], dtopen15: Option[String]): TblattendanceTmpRow = {
    idbseq :: cduser :: cdclass :: cdexlseq :: iseq :: idsignupno :: cdmember :: szname :: szabsence :: szremark :: cdrelaion :: dtopen1 :: dtopen2 :: dtopen3 :: dtopen4 :: dtopen5 :: dtopen6 :: dtopen7 :: dtopen8 :: dtopen9 :: dtopen10 :: dtopen11 :: dtopen12 :: dtopen13 :: dtopen14 :: dtopen15 :: HNil
  }
  /** GetResult implicit for fetching TblattendanceTmpRow objects using plain SQL queries */
  implicit def GetResultTblattendanceTmpRow(implicit e0: GR[Int], e1: GR[String], e2: GR[Option[Int]], e3: GR[Option[String]]): GR[TblattendanceTmpRow] = GR{
    prs => import prs._
    <<[Int] :: <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<?[Int] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblAttendance_Tmp. Objects of this class serve as prototypes for rows in queries. */
  class TblattendanceTmp(_tableTag: Tag) extends Table[TblattendanceTmpRow](_tableTag, Some("dbo"), "tblAttendance_Tmp") {
    def * = idbseq :: cduser :: cdclass :: cdexlseq :: iseq :: idsignupno :: cdmember :: szname :: szabsence :: szremark :: cdrelaion :: dtopen1 :: dtopen2 :: dtopen3 :: dtopen4 :: dtopen5 :: dtopen6 :: dtopen7 :: dtopen8 :: dtopen9 :: dtopen10 :: dtopen11 :: dtopen12 :: dtopen13 :: dtopen14 :: dtopen15 :: HNil
    
    /** Database column idbSeq DBType(int identity), AutoInc */
    val idbseq: Column[Int] = column[Int]("idbSeq", O.AutoInc)
    /** Database column cdUser DBType(char), Length(40,false) */
    val cduser: Column[String] = column[String]("cdUser", O.Length(40,varying=false))
    /** Database column cdClass DBType(char), Length(11,false) */
    val cdclass: Column[String] = column[String]("cdClass", O.Length(11,varying=false))
    /** Database column cdExlSeq DBType(char), Length(1,false) */
    val cdexlseq: Column[String] = column[String]("cdExlSeq", O.Length(1,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column idSignUpNo DBType(int) */
    val idsignupno: Column[Option[Int]] = column[Option[Int]]("idSignUpNo")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column szName DBType(nvarchar), Length(128,true) */
    val szname: Column[String] = column[String]("szName", O.Length(128,varying=true))
    /** Database column szAbsence DBType(nvarchar), Length(255,true), Default(Some()) */
    val szabsence: Column[Option[String]] = column[Option[String]]("szAbsence", O.Length(255,varying=true), O.Default(Some("")))
    /** Database column szRemark DBType(nvarchar), Length(50,true), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column cdRelaion DBType(char), Length(1,false), Default(Some()) */
    val cdrelaion: Column[Option[String]] = column[Option[String]]("cdRelaion", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column dtOpen1 DBType(char), Length(1,false) */
    val dtopen1: Column[Option[String]] = column[Option[String]]("dtOpen1", O.Length(1,varying=false))
    /** Database column dtOpen2 DBType(char), Length(1,false) */
    val dtopen2: Column[Option[String]] = column[Option[String]]("dtOpen2", O.Length(1,varying=false))
    /** Database column dtOpen3 DBType(char), Length(1,false) */
    val dtopen3: Column[Option[String]] = column[Option[String]]("dtOpen3", O.Length(1,varying=false))
    /** Database column dtOpen4 DBType(char), Length(1,false) */
    val dtopen4: Column[Option[String]] = column[Option[String]]("dtOpen4", O.Length(1,varying=false))
    /** Database column dtOpen5 DBType(char), Length(1,false) */
    val dtopen5: Column[Option[String]] = column[Option[String]]("dtOpen5", O.Length(1,varying=false))
    /** Database column dtOpen6 DBType(char), Length(1,false) */
    val dtopen6: Column[Option[String]] = column[Option[String]]("dtOpen6", O.Length(1,varying=false))
    /** Database column dtOpen7 DBType(char), Length(1,false) */
    val dtopen7: Column[Option[String]] = column[Option[String]]("dtOpen7", O.Length(1,varying=false))
    /** Database column dtOpen8 DBType(char), Length(1,false) */
    val dtopen8: Column[Option[String]] = column[Option[String]]("dtOpen8", O.Length(1,varying=false))
    /** Database column dtOpen9 DBType(char), Length(1,false) */
    val dtopen9: Column[Option[String]] = column[Option[String]]("dtOpen9", O.Length(1,varying=false))
    /** Database column dtOpen10 DBType(char), Length(1,false) */
    val dtopen10: Column[Option[String]] = column[Option[String]]("dtOpen10", O.Length(1,varying=false))
    /** Database column dtOpen11 DBType(char), Length(1,false) */
    val dtopen11: Column[Option[String]] = column[Option[String]]("dtOpen11", O.Length(1,varying=false))
    /** Database column dtOpen12 DBType(char), Length(1,false) */
    val dtopen12: Column[Option[String]] = column[Option[String]]("dtOpen12", O.Length(1,varying=false))
    /** Database column dtOpen13 DBType(char), Length(1,false) */
    val dtopen13: Column[Option[String]] = column[Option[String]]("dtOpen13", O.Length(1,varying=false))
    /** Database column dtOpen14 DBType(char), Length(1,false) */
    val dtopen14: Column[Option[String]] = column[Option[String]]("dtOpen14", O.Length(1,varying=false))
    /** Database column dtOpen15 DBType(char), Length(1,false) */
    val dtopen15: Column[Option[String]] = column[Option[String]]("dtOpen15", O.Length(1,varying=false))
    
    /** Primary key of TblattendanceTmp (database name PK_tblAttendance_Tmp) */
    val pk = primaryKey("PK_tblAttendance_Tmp", cduser :: cdclass :: cdexlseq :: cdmember :: szname :: HNil)
  }
  /** Collection-like TableQuery object for table TblattendanceTmp */
  lazy val TblattendanceTmp = new TableQuery(tag => new TblattendanceTmp(tag))
  
  /** Entity class storing rows of table TblattendanceTmp2
   *  @param cduser Database column cdUser DBType(char), Length(40,false)
   *  @param cdclass Database column cdClass DBType(char), Length(11,false)
   *  @param idsignupno Database column idSignUpNo DBType(int)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param szname Database column szName DBType(nvarchar), Length(128,true)
   *  @param szabsence Database column szAbsence DBType(nvarchar), Length(255,true), Default(Some())
   *  @param isignindays Database column iSignInDays DBType(int), Default(Some(0))
   *  @param szremark Database column szRemark DBType(nvarchar), Length(255,true), Default(Some())
   *  @param cdrelation Database column cdRelation DBType(char), Length(1,false), Default(Some()) */
  case class TblattendanceTmp2Row(cduser: String, cdclass: String, idsignupno: Option[Int], cdmember: String, szname: String, szabsence: Option[String] = Some(""), isignindays: Option[Int] = Some(0), szremark: Option[String] = Some(""), cdrelation: Option[String] = Some(""))
  /** GetResult implicit for fetching TblattendanceTmp2Row objects using plain SQL queries */
  implicit def GetResultTblattendanceTmp2Row(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]]): GR[TblattendanceTmp2Row] = GR{
    prs => import prs._
    TblattendanceTmp2Row.tupled((<<[String], <<[String], <<?[Int], <<[String], <<[String], <<?[String], <<?[Int], <<?[String], <<?[String]))
  }
  /** Table description of table tblAttendance_Tmp2. Objects of this class serve as prototypes for rows in queries. */
  class TblattendanceTmp2(_tableTag: Tag) extends Table[TblattendanceTmp2Row](_tableTag, Some("dbo"), "tblAttendance_Tmp2") {
    def * = (cduser, cdclass, idsignupno, cdmember, szname, szabsence, isignindays, szremark, cdrelation) <> (TblattendanceTmp2Row.tupled, TblattendanceTmp2Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cduser.?, cdclass.?, idsignupno, cdmember.?, szname.?, szabsence, isignindays, szremark, cdrelation).shaped.<>({r=>import r._; _1.map(_=> TblattendanceTmp2Row.tupled((_1.get, _2.get, _3, _4.get, _5.get, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdUser DBType(char), Length(40,false) */
    val cduser: Column[String] = column[String]("cdUser", O.Length(40,varying=false))
    /** Database column cdClass DBType(char), Length(11,false) */
    val cdclass: Column[String] = column[String]("cdClass", O.Length(11,varying=false))
    /** Database column idSignUpNo DBType(int) */
    val idsignupno: Column[Option[Int]] = column[Option[Int]]("idSignUpNo")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column szName DBType(nvarchar), Length(128,true) */
    val szname: Column[String] = column[String]("szName", O.Length(128,varying=true))
    /** Database column szAbsence DBType(nvarchar), Length(255,true), Default(Some()) */
    val szabsence: Column[Option[String]] = column[Option[String]]("szAbsence", O.Length(255,varying=true), O.Default(Some("")))
    /** Database column iSignInDays DBType(int), Default(Some(0)) */
    val isignindays: Column[Option[Int]] = column[Option[Int]]("iSignInDays", O.Default(Some(0)))
    /** Database column szRemark DBType(nvarchar), Length(255,true), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=true), O.Default(Some("")))
    /** Database column cdRelation DBType(char), Length(1,false), Default(Some()) */
    val cdrelation: Column[Option[String]] = column[Option[String]]("cdRelation", O.Length(1,varying=false), O.Default(Some("")))
    
    /** Primary key of TblattendanceTmp2 (database name PK_tblAttendance_Tmp2) */
    val pk = primaryKey("PK_tblAttendance_Tmp2", (cduser, cdclass, cdmember, szname))
  }
  /** Collection-like TableQuery object for table TblattendanceTmp2 */
  lazy val TblattendanceTmp2 = new TableQuery(tag => new TblattendanceTmp2(tag))
  
  /** Entity class storing rows of table Tblauthorization
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param sztype Database column szType DBType(char), Length(2,false)
   *  @param uidgroup Database column uidGroup DBType(uniqueidentifier), Length(36,false)
   *  @param uidfunclist Database column uidFuncList DBType(uniqueidentifier), Length(36,false)
   *  @param ischecked Database column isChecked DBType(bit), Default(Some(false))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblauthorizationRow(uid: String, sztype: Option[String], uidgroup: String, uidfunclist: String, ischecked: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblauthorizationRow objects using plain SQL queries */
  implicit def GetResultTblauthorizationRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Boolean]], e3: GR[Option[java.sql.Timestamp]]): GR[TblauthorizationRow] = GR{
    prs => import prs._
    TblauthorizationRow.tupled((<<[String], <<?[String], <<[String], <<[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblAuthorization. Objects of this class serve as prototypes for rows in queries. */
  class Tblauthorization(_tableTag: Tag) extends Table[TblauthorizationRow](_tableTag, Some("dbo"), "tblAuthorization") {
    def * = (uid, sztype, uidgroup, uidfunclist, ischecked, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblauthorizationRow.tupled, TblauthorizationRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, sztype, uidgroup.?, uidfunclist.?, ischecked, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblauthorizationRow.tupled((_1.get, _2, _3.get, _4.get, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szType DBType(char), Length(2,false) */
    val sztype: Column[Option[String]] = column[Option[String]]("szType", O.Length(2,varying=false))
    /** Database column uidGroup DBType(uniqueidentifier), Length(36,false) */
    val uidgroup: Column[String] = column[String]("uidGroup", O.Length(36,varying=false))
    /** Database column uidFuncList DBType(uniqueidentifier), Length(36,false) */
    val uidfunclist: Column[String] = column[String]("uidFuncList", O.Length(36,varying=false))
    /** Database column isChecked DBType(bit), Default(Some(false)) */
    val ischecked: Column[Option[Boolean]] = column[Option[Boolean]]("isChecked", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblauthorization (database name PK_tblAuthorization) */
    val pk = primaryKey("PK_tblAuthorization", (uidgroup, uidfunclist))
  }
  /** Collection-like TableQuery object for table Tblauthorization */
  lazy val Tblauthorization = new TableQuery(tag => new Tblauthorization(tag))
  
  /** Entity class storing rows of table Tblautono
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdtype Database column cdType DBType(char), PrimaryKey, Length(2,false)
   *  @param cdprefix Database column cdPrefix DBType(char), Length(2,false), Default()
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param szyear Database column szYear DBType(char), Length(2,false)
   *  @param szmonth Database column szMonth DBType(char), Length(2,false)
   *  @param istartno Database column iStartNo DBType(int), Default(1)
   *  @param iendno Database column iEndNo DBType(int), Default(-1)
   *  @param icurrentno Database column iCurrentNo DBType(int), Default(0)
   *  @param ilength Database column iLength DBType(int), Default(4)
   *  @param iincrement Database column iIncrement DBType(int), Default(Some(1))
   *  @param iresettype Database column iResetType DBType(int), Default(Some(0))
   *  @param irule Database column iRule DBType(int), Default(Some(0))
   *  @param szsample Database column szSample DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblautonoRow(uid: String, cdtype: String, cdprefix: String = "", cdcenter: String, szyear: String, szmonth: String, istartno: Int = 1, iendno: Int = -1, icurrentno: Int = 0, ilength: Int = 4, iincrement: Option[Int] = Some(1), iresettype: Option[Int] = Some(0), irule: Option[Int] = Some(0), szsample: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblautonoRow objects using plain SQL queries */
  implicit def GetResultTblautonoRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[Int]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblautonoRow] = GR{
    prs => import prs._
    TblautonoRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[String], <<[String], <<[Int], <<[Int], <<[Int], <<[Int], <<?[Int], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblAutoNo. Objects of this class serve as prototypes for rows in queries. */
  class Tblautono(_tableTag: Tag) extends Table[TblautonoRow](_tableTag, Some("dbo"), "tblAutoNo") {
    def * = (uid, cdtype, cdprefix, cdcenter, szyear, szmonth, istartno, iendno, icurrentno, ilength, iincrement, iresettype, irule, szsample, uidcreator, dtcreate, byts) <> (TblautonoRow.tupled, TblautonoRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdtype.?, cdprefix.?, cdcenter.?, szyear.?, szmonth.?, istartno.?, iendno.?, icurrentno.?, ilength.?, iincrement, iresettype, irule, szsample, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblautonoRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10.get, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdType DBType(char), PrimaryKey, Length(2,false) */
    val cdtype: Column[String] = column[String]("cdType", O.PrimaryKey, O.Length(2,varying=false))
    /** Database column cdPrefix DBType(char), Length(2,false), Default() */
    val cdprefix: Column[String] = column[String]("cdPrefix", O.Length(2,varying=false), O.Default(""))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column szYear DBType(char), Length(2,false) */
    val szyear: Column[String] = column[String]("szYear", O.Length(2,varying=false))
    /** Database column szMonth DBType(char), Length(2,false) */
    val szmonth: Column[String] = column[String]("szMonth", O.Length(2,varying=false))
    /** Database column iStartNo DBType(int), Default(1) */
    val istartno: Column[Int] = column[Int]("iStartNo", O.Default(1))
    /** Database column iEndNo DBType(int), Default(-1) */
    val iendno: Column[Int] = column[Int]("iEndNo", O.Default(-1))
    /** Database column iCurrentNo DBType(int), Default(0) */
    val icurrentno: Column[Int] = column[Int]("iCurrentNo", O.Default(0))
    /** Database column iLength DBType(int), Default(4) */
    val ilength: Column[Int] = column[Int]("iLength", O.Default(4))
    /** Database column iIncrement DBType(int), Default(Some(1)) */
    val iincrement: Column[Option[Int]] = column[Option[Int]]("iIncrement", O.Default(Some(1)))
    /** Database column iResetType DBType(int), Default(Some(0)) */
    val iresettype: Column[Option[Int]] = column[Option[Int]]("iResetType", O.Default(Some(0)))
    /** Database column iRule DBType(int), Default(Some(0)) */
    val irule: Column[Option[Int]] = column[Option[Int]]("iRule", O.Default(Some(0)))
    /** Database column szSample DBType(char), Length(10,false) */
    val szsample: Column[Option[String]] = column[Option[String]]("szSample", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblautono */
  lazy val Tblautono = new TableQuery(tag => new Tblautono(tag))
  
  /** Entity class storing rows of table Tblautonod
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidautono Database column uidAutoNo DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szdesc Database column szDesc DBType(nchar), Length(255,false)
   *  @param szdescnick Database column szDescNick DBType(nchar), Length(255,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblautonodRow(uid: String, uidautono: String, cdlanguage: String, szdesc: Option[String], szdescnick: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblautonodRow objects using plain SQL queries */
  implicit def GetResultTblautonodRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblautonodRow] = GR{
    prs => import prs._
    TblautonodRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblAutoNoD. Objects of this class serve as prototypes for rows in queries. */
  class Tblautonod(_tableTag: Tag) extends Table[TblautonodRow](_tableTag, Some("dbo"), "tblAutoNoD") {
    def * = (uid, uidautono, cdlanguage, szdesc, szdescnick, uidmodifier, dtmodify) <> (TblautonodRow.tupled, TblautonodRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidautono.?, cdlanguage.?, szdesc, szdescnick, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblautonodRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidAutoNo DBType(uniqueidentifier), Length(36,false) */
    val uidautono: Column[String] = column[String]("uidAutoNo", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szDesc DBType(nchar), Length(255,false) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(255,varying=false))
    /** Database column szDescNick DBType(nchar), Length(255,false) */
    val szdescnick: Column[Option[String]] = column[Option[String]]("szDescNick", O.Length(255,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblautonod (database name PK_tblAutoNoD) */
    val pk = primaryKey("PK_tblAutoNoD", (uidautono, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblautonod */
  lazy val Tblautonod = new TableQuery(tag => new Tblautonod(tag))
  
  /** Entity class storing rows of table Tblbackd
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdbackno Database column cdBackNo DBType(char), Length(14,false)
   *  @param cdtype Database column cdType DBType(char), Length(1,false)
   *  @param cdprodid Database column cdProdID DBType(char), Length(15,false)
   *  @param iprodqty Database column iProdQty DBType(int) */
  case class TblbackdRow(uid: String, cdbackno: Option[String], cdtype: Option[String], cdprodid: Option[String], iprodqty: Option[Int])
  /** GetResult implicit for fetching TblbackdRow objects using plain SQL queries */
  implicit def GetResultTblbackdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]]): GR[TblbackdRow] = GR{
    prs => import prs._
    TblbackdRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[Int]))
  }
  /** Table description of table tblBackD. Objects of this class serve as prototypes for rows in queries. */
  class Tblbackd(_tableTag: Tag) extends Table[TblbackdRow](_tableTag, Some("dbo"), "tblBackD") {
    def * = (uid, cdbackno, cdtype, cdprodid, iprodqty) <> (TblbackdRow.tupled, TblbackdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdbackno, cdtype, cdprodid, iprodqty).shaped.<>({r=>import r._; _1.map(_=> TblbackdRow.tupled((_1.get, _2, _3, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdBackNo DBType(char), Length(14,false) */
    val cdbackno: Column[Option[String]] = column[Option[String]]("cdBackNo", O.Length(14,varying=false))
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(1,varying=false))
    /** Database column cdProdID DBType(char), Length(15,false) */
    val cdprodid: Column[Option[String]] = column[Option[String]]("cdProdID", O.Length(15,varying=false))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Option[Int]] = column[Option[Int]]("iProdQty")
  }
  /** Collection-like TableQuery object for table Tblbackd */
  lazy val Tblbackd = new TableQuery(tag => new Tblbackd(tag))
  
  /** Entity class storing rows of table Tblbackgroundjob
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdjob Database column cdJob DBType(char), PrimaryKey, Length(8,false)
   *  @param cdtype Database column cdType DBType(varchar), Length(10,true)
   *  @param cdprogram Database column cdProgram DBType(char), Length(50,false)
   *  @param szprogramname Database column szProgramName DBType(nvarchar), Length(50,true)
   *  @param szparameter Database column szParameter DBType(nvarchar), Length(1000,true)
   *  @param dtsetup Database column dtSetup DBType(datetime)
   *  @param dtjob Database column dtJob DBType(datetime)
   *  @param dtexecute Database column dtExecute DBType(datetime)
   *  @param dtfinish Database column dtFinish DBType(datetime)
   *  @param uidemployee Database column uidEmployee DBType(uniqueidentifier), Length(36,false)
   *  @param idstatus Database column idStatus DBType(int)
   *  @param isreport Database column isReport DBType(bit)
   *  @param szreportname Database column szReportName DBType(nvarchar), Length(128,true)
   *  @param dtbegin Database column dtBegin DBType(datetime)
   *  @param dtend Database column dtEnd DBType(datetime)
   *  @param idmode Database column idMode DBType(int)
   *  @param idschedule Database column idSchedule DBType(int)
   *  @param idrule Database column idRule DBType(int) */
  case class TblbackgroundjobRow(uid: String, cdjob: String, cdtype: Option[String], cdprogram: Option[String], szprogramname: Option[String], szparameter: Option[String], dtsetup: Option[java.sql.Timestamp], dtjob: Option[java.sql.Timestamp], dtexecute: Option[java.sql.Timestamp], dtfinish: Option[java.sql.Timestamp], uidemployee: Option[String], idstatus: Option[Int], isreport: Option[Boolean], szreportname: Option[String], dtbegin: Option[java.sql.Timestamp], dtend: Option[java.sql.Timestamp], idmode: Option[Int], idschedule: Option[Int], idrule: Option[Int])
  /** GetResult implicit for fetching TblbackgroundjobRow objects using plain SQL queries */
  implicit def GetResultTblbackgroundjobRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Int]], e4: GR[Option[Boolean]]): GR[TblbackgroundjobRow] = GR{
    prs => import prs._
    TblbackgroundjobRow.tupled((<<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[Int], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[Int], <<?[Int], <<?[Int]))
  }
  /** Table description of table tblBackgroundJob. Objects of this class serve as prototypes for rows in queries. */
  class Tblbackgroundjob(_tableTag: Tag) extends Table[TblbackgroundjobRow](_tableTag, Some("dbo"), "tblBackgroundJob") {
    def * = (uid, cdjob, cdtype, cdprogram, szprogramname, szparameter, dtsetup, dtjob, dtexecute, dtfinish, uidemployee, idstatus, isreport, szreportname, dtbegin, dtend, idmode, idschedule, idrule) <> (TblbackgroundjobRow.tupled, TblbackgroundjobRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdjob.?, cdtype, cdprogram, szprogramname, szparameter, dtsetup, dtjob, dtexecute, dtfinish, uidemployee, idstatus, isreport, szreportname, dtbegin, dtend, idmode, idschedule, idrule).shaped.<>({r=>import r._; _1.map(_=> TblbackgroundjobRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdJob DBType(char), PrimaryKey, Length(8,false) */
    val cdjob: Column[String] = column[String]("cdJob", O.PrimaryKey, O.Length(8,varying=false))
    /** Database column cdType DBType(varchar), Length(10,true) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(10,varying=true))
    /** Database column cdProgram DBType(char), Length(50,false) */
    val cdprogram: Column[Option[String]] = column[Option[String]]("cdProgram", O.Length(50,varying=false))
    /** Database column szProgramName DBType(nvarchar), Length(50,true) */
    val szprogramname: Column[Option[String]] = column[Option[String]]("szProgramName", O.Length(50,varying=true))
    /** Database column szParameter DBType(nvarchar), Length(1000,true) */
    val szparameter: Column[Option[String]] = column[Option[String]]("szParameter", O.Length(1000,varying=true))
    /** Database column dtSetup DBType(datetime) */
    val dtsetup: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtSetup")
    /** Database column dtJob DBType(datetime) */
    val dtjob: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtJob")
    /** Database column dtExecute DBType(datetime) */
    val dtexecute: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtExecute")
    /** Database column dtFinish DBType(datetime) */
    val dtfinish: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFinish")
    /** Database column uidEmployee DBType(uniqueidentifier), Length(36,false) */
    val uidemployee: Column[Option[String]] = column[Option[String]]("uidEmployee", O.Length(36,varying=false))
    /** Database column idStatus DBType(int) */
    val idstatus: Column[Option[Int]] = column[Option[Int]]("idStatus")
    /** Database column isReport DBType(bit) */
    val isreport: Column[Option[Boolean]] = column[Option[Boolean]]("isReport")
    /** Database column szReportName DBType(nvarchar), Length(128,true) */
    val szreportname: Column[Option[String]] = column[Option[String]]("szReportName", O.Length(128,varying=true))
    /** Database column dtBegin DBType(datetime) */
    val dtbegin: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBegin")
    /** Database column dtEnd DBType(datetime) */
    val dtend: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEnd")
    /** Database column idMode DBType(int) */
    val idmode: Column[Option[Int]] = column[Option[Int]]("idMode")
    /** Database column idSchedule DBType(int) */
    val idschedule: Column[Option[Int]] = column[Option[Int]]("idSchedule")
    /** Database column idRule DBType(int) */
    val idrule: Column[Option[Int]] = column[Option[Int]]("idRule")
  }
  /** Collection-like TableQuery object for table Tblbackgroundjob */
  lazy val Tblbackgroundjob = new TableQuery(tag => new Tblbackgroundjob(tag))
  
  /** Entity class storing rows of table Tblbackgroundreport
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdjob Database column cdJob DBType(char), PrimaryKey, Length(8,false)
   *  @param cdtype Database column cdType DBType(varchar), Length(10,true)
   *  @param cdprogram Database column cdProgram DBType(char), Length(20,false)
   *  @param szprogramname Database column szProgramName DBType(nvarchar), Length(50,true)
   *  @param szparameter Database column szParameter DBType(nvarchar), Length(1000,true)
   *  @param dtsetup Database column dtSetup DBType(datetime)
   *  @param dtreport Database column dtReport DBType(datetime)
   *  @param dtprint Database column dtPrint DBType(datetime)
   *  @param dtfinish Database column dtFinish DBType(datetime)
   *  @param uidemployee Database column uidEmployee DBType(uniqueidentifier), Length(36,false)
   *  @param szprintername Database column szPrinterName DBType(nvarchar), Length(128,true)
   *  @param idstatus Database column idStatus DBType(int)
   *  @param szreportname Database column szReportName DBType(nvarchar), Length(128,true)
   *  @param szreportfile Database column szReportFile DBType(nvarchar), Length(128,true)
   *  @param dtbegin Database column dtBegin DBType(datetime)
   *  @param dtend Database column dtEnd DBType(datetime)
   *  @param idmode Database column idMode DBType(int)
   *  @param idschedule Database column idSchedule DBType(int)
   *  @param idrule Database column idRule DBType(int) */
  case class TblbackgroundreportRow(uid: Option[String], cdjob: String, cdtype: Option[String], cdprogram: Option[String], szprogramname: Option[String], szparameter: Option[String], dtsetup: Option[java.sql.Timestamp], dtreport: Option[java.sql.Timestamp], dtprint: Option[java.sql.Timestamp], dtfinish: Option[java.sql.Timestamp], uidemployee: Option[String], szprintername: Option[String], idstatus: Option[Int], szreportname: Option[String], szreportfile: Option[String], dtbegin: Option[java.sql.Timestamp], dtend: Option[java.sql.Timestamp], idmode: Option[Int], idschedule: Option[Int], idrule: Option[Int])
  /** GetResult implicit for fetching TblbackgroundreportRow objects using plain SQL queries */
  implicit def GetResultTblbackgroundreportRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Int]]): GR[TblbackgroundreportRow] = GR{
    prs => import prs._
    TblbackgroundreportRow.tupled((<<?[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[Int], <<?[Int], <<?[Int]))
  }
  /** Table description of table tblBackgroundReport. Objects of this class serve as prototypes for rows in queries. */
  class Tblbackgroundreport(_tableTag: Tag) extends Table[TblbackgroundreportRow](_tableTag, Some("dbo"), "tblBackgroundReport") {
    def * = (uid, cdjob, cdtype, cdprogram, szprogramname, szparameter, dtsetup, dtreport, dtprint, dtfinish, uidemployee, szprintername, idstatus, szreportname, szreportfile, dtbegin, dtend, idmode, idschedule, idrule) <> (TblbackgroundreportRow.tupled, TblbackgroundreportRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdjob.?, cdtype, cdprogram, szprogramname, szparameter, dtsetup, dtreport, dtprint, dtfinish, uidemployee, szprintername, idstatus, szreportname, szreportfile, dtbegin, dtend, idmode, idschedule, idrule).shaped.<>({r=>import r._; _2.map(_=> TblbackgroundreportRow.tupled((_1, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdJob DBType(char), PrimaryKey, Length(8,false) */
    val cdjob: Column[String] = column[String]("cdJob", O.PrimaryKey, O.Length(8,varying=false))
    /** Database column cdType DBType(varchar), Length(10,true) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(10,varying=true))
    /** Database column cdProgram DBType(char), Length(20,false) */
    val cdprogram: Column[Option[String]] = column[Option[String]]("cdProgram", O.Length(20,varying=false))
    /** Database column szProgramName DBType(nvarchar), Length(50,true) */
    val szprogramname: Column[Option[String]] = column[Option[String]]("szProgramName", O.Length(50,varying=true))
    /** Database column szParameter DBType(nvarchar), Length(1000,true) */
    val szparameter: Column[Option[String]] = column[Option[String]]("szParameter", O.Length(1000,varying=true))
    /** Database column dtSetup DBType(datetime) */
    val dtsetup: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtSetup")
    /** Database column dtReport DBType(datetime) */
    val dtreport: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtReport")
    /** Database column dtPrint DBType(datetime) */
    val dtprint: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPrint")
    /** Database column dtFinish DBType(datetime) */
    val dtfinish: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFinish")
    /** Database column uidEmployee DBType(uniqueidentifier), Length(36,false) */
    val uidemployee: Column[Option[String]] = column[Option[String]]("uidEmployee", O.Length(36,varying=false))
    /** Database column szPrinterName DBType(nvarchar), Length(128,true) */
    val szprintername: Column[Option[String]] = column[Option[String]]("szPrinterName", O.Length(128,varying=true))
    /** Database column idStatus DBType(int) */
    val idstatus: Column[Option[Int]] = column[Option[Int]]("idStatus")
    /** Database column szReportName DBType(nvarchar), Length(128,true) */
    val szreportname: Column[Option[String]] = column[Option[String]]("szReportName", O.Length(128,varying=true))
    /** Database column szReportFile DBType(nvarchar), Length(128,true) */
    val szreportfile: Column[Option[String]] = column[Option[String]]("szReportFile", O.Length(128,varying=true))
    /** Database column dtBegin DBType(datetime) */
    val dtbegin: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBegin")
    /** Database column dtEnd DBType(datetime) */
    val dtend: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEnd")
    /** Database column idMode DBType(int) */
    val idmode: Column[Option[Int]] = column[Option[Int]]("idMode")
    /** Database column idSchedule DBType(int) */
    val idschedule: Column[Option[Int]] = column[Option[Int]]("idSchedule")
    /** Database column idRule DBType(int) */
    val idrule: Column[Option[Int]] = column[Option[Int]]("idRule")
  }
  /** Collection-like TableQuery object for table Tblbackgroundreport */
  lazy val Tblbackgroundreport = new TableQuery(tag => new Tblbackgroundreport(tag))
  
  /** Entity class storing rows of table Tblbackm
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdbackno Database column cdBackNo DBType(char), Length(14,false)
   *  @param dtbusinessdate Database column dtBusinessDate DBType(datetime)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param sznote Database column szNote DBType(nchar), Length(255,false)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp)
   *  @param cdtype Database column cdType DBType(char), Length(1,false)
   *  @param cdgetprod Database column cdGetProd DBType(char), Length(1,false) */
  case class TblbackmRow(uid: Option[String], cdcenter: Option[String], cdbackno: Option[String], dtbusinessdate: Option[java.sql.Timestamp], cdmember: Option[String], sznote: Option[String], cdstatus: Option[String], cdorderno: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdtype: Option[String], cdgetprod: Option[String])
  /** GetResult implicit for fetching TblbackmRow objects using plain SQL queries */
  implicit def GetResultTblbackmRow(implicit e0: GR[Option[String]], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[java.sql.Blob]]): GR[TblbackmRow] = GR{
    prs => import prs._
    TblbackmRow.tupled((<<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String], <<?[String]))
  }
  /** Table description of table tblBackM. Objects of this class serve as prototypes for rows in queries. */
  class Tblbackm(_tableTag: Tag) extends Table[TblbackmRow](_tableTag, Some("dbo"), "tblBackM") {
    def * = (uid, cdcenter, cdbackno, dtbusinessdate, cdmember, sznote, cdstatus, cdorderno, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdtype, cdgetprod) <> (TblbackmRow.tupled, TblbackmRow.unapply)
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[Option[String]] = column[Option[String]]("cdCenter", O.Length(4,varying=false))
    /** Database column cdBackNo DBType(char), Length(14,false) */
    val cdbackno: Column[Option[String]] = column[Option[String]]("cdBackNo", O.Length(14,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(1,varying=false))
    /** Database column cdGetProd DBType(char), Length(1,false) */
    val cdgetprod: Column[Option[String]] = column[Option[String]]("cdGetProd", O.Length(1,varying=false))
  }
  /** Collection-like TableQuery object for table Tblbackm */
  lazy val Tblbackm = new TableQuery(tag => new Tblbackm(tag))
  
  /** Entity class storing rows of table Tblbank
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdbank Database column cdBank DBType(char), PrimaryKey, Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblbankRow(uid: String, cdbank: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblbankRow objects using plain SQL queries */
  implicit def GetResultTblbankRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblbankRow] = GR{
    prs => import prs._
    TblbankRow.tupled((<<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblBank. Objects of this class serve as prototypes for rows in queries. */
  class Tblbank(_tableTag: Tag) extends Table[TblbankRow](_tableTag, Some("dbo"), "tblBank") {
    def * = (uid, cdbank, uidcreator, dtcreate, byts) <> (TblbankRow.tupled, TblbankRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdbank.?, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblbankRow.tupled((_1.get, _2.get, _3, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdBank DBType(char), PrimaryKey, Length(10,false) */
    val cdbank: Column[String] = column[String]("cdBank", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblbank */
  lazy val Tblbank = new TableQuery(tag => new Tblbank(tag))
  
  /** Entity class storing rows of table Tblbankd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidbank Database column uidBank DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szbank Database column szBank DBType(nchar), Length(128,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblbankdRow(uid: String, uidbank: String, cdlanguage: String, szbank: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblbankdRow objects using plain SQL queries */
  implicit def GetResultTblbankdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblbankdRow] = GR{
    prs => import prs._
    TblbankdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblBankD. Objects of this class serve as prototypes for rows in queries. */
  class Tblbankd(_tableTag: Tag) extends Table[TblbankdRow](_tableTag, Some("dbo"), "tblBankD") {
    def * = (uid, uidbank, cdlanguage, szbank, uidmodifier, dtmodify) <> (TblbankdRow.tupled, TblbankdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidbank.?, cdlanguage.?, szbank, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblbankdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidBank DBType(uniqueidentifier), Length(36,false) */
    val uidbank: Column[String] = column[String]("uidBank", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szBank DBType(nchar), Length(128,false) */
    val szbank: Column[Option[String]] = column[Option[String]]("szBank", O.Length(128,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblbankd (database name PK_tblBankD) */
    val pk = primaryKey("PK_tblBankD", (uidbank, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblbankd */
  lazy val Tblbankd = new TableQuery(tag => new Tblbankd(tag))
  
  /** Entity class storing rows of table Tblbarocde
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param idyear Database column idYear DBType(int)
   *  @param idmonth Database column idMonth DBType(int)
   *  @param cdcountry Database column cdCountry DBType(char), Length(2,false)
   *  @param cdkind Database column cdKind DBType(char), Length(10,false)
   *  @param idstartno Database column idStartNo DBType(int)
   *  @param idendno Database column idEndNo DBType(int)
   *  @param idcount Database column idCOunt DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblbarocdeRow(uid: String, idyear: Int, idmonth: Int, cdcountry: String, cdkind: String, idstartno: Int, idendno: Int, idcount: Int, uidcreator: String, dtcreate: java.sql.Timestamp, uidmodifier: String, dtmodify: java.sql.Timestamp)
  /** GetResult implicit for fetching TblbarocdeRow objects using plain SQL queries */
  implicit def GetResultTblbarocdeRow(implicit e0: GR[String], e1: GR[Int], e2: GR[java.sql.Timestamp]): GR[TblbarocdeRow] = GR{
    prs => import prs._
    TblbarocdeRow.tupled((<<[String], <<[Int], <<[Int], <<[String], <<[String], <<[Int], <<[Int], <<[Int], <<[String], <<[java.sql.Timestamp], <<[String], <<[java.sql.Timestamp]))
  }
  /** Table description of table tblBarocde. Objects of this class serve as prototypes for rows in queries. */
  class Tblbarocde(_tableTag: Tag) extends Table[TblbarocdeRow](_tableTag, Some("dbo"), "tblBarocde") {
    def * = (uid, idyear, idmonth, cdcountry, cdkind, idstartno, idendno, idcount, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblbarocdeRow.tupled, TblbarocdeRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, idyear.?, idmonth.?, cdcountry.?, cdkind.?, idstartno.?, idendno.?, idcount.?, uidcreator.?, dtcreate.?, uidmodifier.?, dtmodify.?).shaped.<>({r=>import r._; _1.map(_=> TblbarocdeRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10.get, _11.get, _12.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column idYear DBType(int) */
    val idyear: Column[Int] = column[Int]("idYear")
    /** Database column idMonth DBType(int) */
    val idmonth: Column[Int] = column[Int]("idMonth")
    /** Database column cdCountry DBType(char), Length(2,false) */
    val cdcountry: Column[String] = column[String]("cdCountry", O.Length(2,varying=false))
    /** Database column cdKind DBType(char), Length(10,false) */
    val cdkind: Column[String] = column[String]("cdKind", O.Length(10,varying=false))
    /** Database column idStartNo DBType(int) */
    val idstartno: Column[Int] = column[Int]("idStartNo")
    /** Database column idEndNo DBType(int) */
    val idendno: Column[Int] = column[Int]("idEndNo")
    /** Database column idCOunt DBType(int) */
    val idcount: Column[Int] = column[Int]("idCOunt")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[String] = column[String]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[String] = column[String]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtModify")
    
    /** Index over (idyear,idmonth,cdcountry,cdkind) (database name tblBarcode_Index1) */
    val index1 = index("tblBarcode_Index1", (idyear, idmonth, cdcountry, cdkind))
  }
  /** Collection-like TableQuery object for table Tblbarocde */
  lazy val Tblbarocde = new TableQuery(tag => new Tblbarocde(tag))
  
  /** Entity class storing rows of table Tblblacklist
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdid Database column cdId DBType(char), Length(20,false)
   *  @param cdidentity Database column cdIdentity DBType(char), Length(1,false)
   *  @param szname Database column szName DBType(nchar), Length(120,false)
   *  @param dtbirthday Database column dtBirthday DBType(datetime)
   *  @param szreason Database column szReason DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblblacklistRow(uid: String, cdid: String, cdidentity: String, szname: Option[String], dtbirthday: Option[java.sql.Timestamp], szreason: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblblacklistRow objects using plain SQL queries */
  implicit def GetResultTblblacklistRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblblacklistRow] = GR{
    prs => import prs._
    TblblacklistRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblBlackList. Objects of this class serve as prototypes for rows in queries. */
  class Tblblacklist(_tableTag: Tag) extends Table[TblblacklistRow](_tableTag, Some("dbo"), "tblBlackList") {
    def * = (uid, cdid, cdidentity, szname, dtbirthday, szreason, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblblacklistRow.tupled, TblblacklistRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdid.?, cdidentity.?, szname, dtbirthday, szreason, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblblacklistRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[String] = column[String]("cdId", O.Length(20,varying=false))
    /** Database column cdIdentity DBType(char), Length(1,false) */
    val cdidentity: Column[String] = column[String]("cdIdentity", O.Length(1,varying=false))
    /** Database column szName DBType(nchar), Length(120,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(120,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column szReason DBType(nchar), Length(255,false) */
    val szreason: Column[Option[String]] = column[Option[String]]("szReason", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblblacklist (database name PK_tblBlackList) */
    val pk = primaryKey("PK_tblBlackList", (cdid, cdidentity))
  }
  /** Collection-like TableQuery object for table Tblblacklist */
  lazy val Tblblacklist = new TableQuery(tag => new Tblblacklist(tag))
  
  /** Entity class storing rows of table Tblbonuschartw1
   *  @param cdchild Database column cdChild DBType(char), PrimaryKey, Length(10,false)
   *  @param igenerationl40 Database column iGenerationL40 DBType(int) */
  case class Tblbonuschartw1Row(cdchild: String, igenerationl40: Option[Int])
  /** GetResult implicit for fetching Tblbonuschartw1Row objects using plain SQL queries */
  implicit def GetResultTblbonuschartw1Row(implicit e0: GR[String], e1: GR[Option[Int]]): GR[Tblbonuschartw1Row] = GR{
    prs => import prs._
    Tblbonuschartw1Row.tupled((<<[String], <<?[Int]))
  }
  /** Table description of table tblBonusChartW1. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonuschartw1(_tableTag: Tag) extends Table[Tblbonuschartw1Row](_tableTag, Some("dbo"), "tblBonusChartW1") {
    def * = (cdchild, igenerationl40) <> (Tblbonuschartw1Row.tupled, Tblbonuschartw1Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdchild.?, igenerationl40).shaped.<>({r=>import r._; _1.map(_=> Tblbonuschartw1Row.tupled((_1.get, _2)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdChild DBType(char), PrimaryKey, Length(10,false) */
    val cdchild: Column[String] = column[String]("cdChild", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column iGenerationL40 DBType(int) */
    val igenerationl40: Column[Option[Int]] = column[Option[Int]]("iGenerationL40")
  }
  /** Collection-like TableQuery object for table Tblbonuschartw1 */
  lazy val Tblbonuschartw1 = new TableQuery(tag => new Tblbonuschartw1(tag))
  
  /** Entity class storing rows of table Tblbonuschartw2
   *  @param igeneration Database column iGeneration DBType(int)
   *  @param cdparent Database column cdParent DBType(char), Length(10,false)
   *  @param cdchild Database column cdChild DBType(char), PrimaryKey, Length(10,false)
   *  @param szfullname Database column szFullName DBType(nchar), Length(10,false)
   *  @param idcontract Database column idContract DBType(char), Length(1,false), Default(Some(0))
   *  @param isquotaok Database column isQuotaOk DBType(bit)
   *  @param idcontractilife Database column idContractiLife DBType(char), Length(1,false), Default(Some(0))
   *  @param isilifequotaok Database column isiLifeQuotaOk DBType(bit)
   *  @param cdpersg Database column cdPerSg DBType(char), Length(2,false)
   *  @param ipv Database column iPv DBType(int)
   *  @param iuppv Database column iUpPv DBType(int)
   *  @param ipvilife Database column iPviLife DBType(int)
   *  @param icumpvgroup Database column iCumPvGroup DBType(bigint)
   *  @param igenerationl40 Database column iGenerationL40 DBType(int)
   *  @param szfulladdr Database column szFullAddr DBType(nchar), Length(128,false)
   *  @param szdetail Database column szDetail DBType(nchar), Length(128,false)
   *  @param szmobile Database column szMobile DBType(nchar), Length(128,false) */
  case class Tblbonuschartw2Row(igeneration: Option[Int], cdparent: Option[String], cdchild: String, szfullname: Option[String], idcontract: Option[String] = Some("0"), isquotaok: Option[Boolean], idcontractilife: Option[String] = Some("0"), isilifequotaok: Option[Boolean], cdpersg: Option[String], ipv: Option[Int], iuppv: Option[Int], ipvilife: Option[Int], icumpvgroup: Option[Long], igenerationl40: Option[Int], szfulladdr: Option[String], szdetail: Option[String], szmobile: Option[String])
  /** GetResult implicit for fetching Tblbonuschartw2Row objects using plain SQL queries */
  implicit def GetResultTblbonuschartw2Row(implicit e0: GR[Option[Int]], e1: GR[Option[String]], e2: GR[String], e3: GR[Option[Boolean]], e4: GR[Option[Long]]): GR[Tblbonuschartw2Row] = GR{
    prs => import prs._
    Tblbonuschartw2Row.tupled((<<?[Int], <<?[String], <<[String], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[Boolean], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[Long], <<?[Int], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblBonusChartW2. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonuschartw2(_tableTag: Tag) extends Table[Tblbonuschartw2Row](_tableTag, Some("dbo"), "tblBonusChartW2") {
    def * = (igeneration, cdparent, cdchild, szfullname, idcontract, isquotaok, idcontractilife, isilifequotaok, cdpersg, ipv, iuppv, ipvilife, icumpvgroup, igenerationl40, szfulladdr, szdetail, szmobile) <> (Tblbonuschartw2Row.tupled, Tblbonuschartw2Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (igeneration, cdparent, cdchild.?, szfullname, idcontract, isquotaok, idcontractilife, isilifequotaok, cdpersg, ipv, iuppv, ipvilife, icumpvgroup, igenerationl40, szfulladdr, szdetail, szmobile).shaped.<>({r=>import r._; _3.map(_=> Tblbonuschartw2Row.tupled((_1, _2, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column iGeneration DBType(int) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration")
    /** Database column cdParent DBType(char), Length(10,false) */
    val cdparent: Column[Option[String]] = column[Option[String]]("cdParent", O.Length(10,varying=false))
    /** Database column cdChild DBType(char), PrimaryKey, Length(10,false) */
    val cdchild: Column[String] = column[String]("cdChild", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column szFullName DBType(nchar), Length(10,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(10,varying=false))
    /** Database column idContract DBType(char), Length(1,false), Default(Some(0)) */
    val idcontract: Column[Option[String]] = column[Option[String]]("idContract", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column isQuotaOk DBType(bit) */
    val isquotaok: Column[Option[Boolean]] = column[Option[Boolean]]("isQuotaOk")
    /** Database column idContractiLife DBType(char), Length(1,false), Default(Some(0)) */
    val idcontractilife: Column[Option[String]] = column[Option[String]]("idContractiLife", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column isiLifeQuotaOk DBType(bit) */
    val isilifequotaok: Column[Option[Boolean]] = column[Option[Boolean]]("isiLifeQuotaOk")
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[Option[String]] = column[Option[String]]("cdPerSg", O.Length(2,varying=false))
    /** Database column iPv DBType(int) */
    val ipv: Column[Option[Int]] = column[Option[Int]]("iPv")
    /** Database column iUpPv DBType(int) */
    val iuppv: Column[Option[Int]] = column[Option[Int]]("iUpPv")
    /** Database column iPviLife DBType(int) */
    val ipvilife: Column[Option[Int]] = column[Option[Int]]("iPviLife")
    /** Database column iCumPvGroup DBType(bigint) */
    val icumpvgroup: Column[Option[Long]] = column[Option[Long]]("iCumPvGroup")
    /** Database column iGenerationL40 DBType(int) */
    val igenerationl40: Column[Option[Int]] = column[Option[Int]]("iGenerationL40")
    /** Database column szFullAddr DBType(nchar), Length(128,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=false))
    /** Database column szDetail DBType(nchar), Length(128,false) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false))
    /** Database column szMobile DBType(nchar), Length(128,false) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false))
  }
  /** Collection-like TableQuery object for table Tblbonuschartw2 */
  lazy val Tblbonuschartw2 = new TableQuery(tag => new Tblbonuschartw2(tag))
  
  /** Row type of table Tblbonusdata */
  type TblbonusdataRow = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[Option[String],HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblbonusdataRow providing default values if available in the database schema. */
  def TblbonusdataRow(uid: String, cdcenter: String, cdorderno: String, iserialno: Int, iseq: Int, szprodid: String, cdbonuscode: String, szbonusyear: String, szbonusmonth: String, cdmember: String, cdmemberto: String, dtbusinessdate: java.sql.Timestamp, cdcurrency: Option[String] = Some("THB"), ipvpoint: Int, ipvpointup: Int, ipvpointbonus: Int = 0, iprodqty: Int, iusedqty: Int, inousedqty: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdprodkindmain: Option[String], cdproject: Option[String], cdbonuscodereturn: Option[String]): TblbonusdataRow = {
    uid :: cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdprodkindmain :: cdproject :: cdbonuscodereturn :: HNil
  }
  /** GetResult implicit for fetching TblbonusdataRow objects using plain SQL queries */
  implicit def GetResultTblbonusdataRow(implicit e0: GR[String], e1: GR[Int], e2: GR[java.sql.Timestamp], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblbonusdataRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblBonusData. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusdata(_tableTag: Tag) extends Table[TblbonusdataRow](_tableTag, Some("dbo"), "tblBonusData") {
    def * = uid :: cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdprodkindmain :: cdproject :: cdbonuscodereturn :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[String] = column[String]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[String] = column[String]("szBonusMonth", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[String] = column[String]("cdMemberTo", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusinessDate")
    /** Database column cdCurrency DBType(char), Length(4,false), Default(Some(THB)) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false), O.Default(Some("THB")))
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointBonus DBType(int), Default(0) */
    val ipvpointbonus: Column[Int] = column[Int]("iPvPointBonus", O.Default(0))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column iUsedQty DBType(int) */
    val iusedqty: Column[Int] = column[Int]("iUsedQty")
    /** Database column iNoUsedQty DBType(int) */
    val inousedqty: Column[Int] = column[Int]("iNoUsedQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdProdKindMain DBType(char), Length(3,false) */
    val cdprodkindmain: Column[Option[String]] = column[Option[String]]("cdProdKindMain", O.Length(3,varying=false))
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
    /** Database column cdBonusCodeReturn DBType(char), Length(10,false) */
    val cdbonuscodereturn: Column[Option[String]] = column[Option[String]]("cdBonusCodeReturn", O.Length(10,varying=false))
    
    /** Primary key of Tblbonusdata (database name PK_tblBonusData) */
    val pk = primaryKey("PK_tblBonusData", cdorderno :: iserialno :: iseq :: HNil)
  }
  /** Collection-like TableQuery object for table Tblbonusdata */
  lazy val Tblbonusdata = new TableQuery(tag => new Tblbonusdata(tag))
  
  /** Row type of table Tblbonusdata20111104 */
  type Tblbonusdata20111104Row = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[Option[String],HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblbonusdata20111104Row providing default values if available in the database schema. */
  def Tblbonusdata20111104Row(uid: String, cdcenter: String, cdorderno: String, iserialno: Int, iseq: Int, szprodid: String, cdbonuscode: String, szbonusyear: String, szbonusmonth: String, cdmember: String, cdmemberto: String, dtbusinessdate: java.sql.Timestamp, cdcurrency: Option[String], ipvpoint: Int, ipvpointup: Int, ipvpointbonus: Int, iprodqty: Int, iusedqty: Int, inousedqty: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdprodkindmain: Option[String], cdproject: Option[String], cdbonuscodereturn: Option[String]): Tblbonusdata20111104Row = {
    uid :: cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdprodkindmain :: cdproject :: cdbonuscodereturn :: HNil
  }
  /** GetResult implicit for fetching Tblbonusdata20111104Row objects using plain SQL queries */
  implicit def GetResultTblbonusdata20111104Row(implicit e0: GR[String], e1: GR[Int], e2: GR[java.sql.Timestamp], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[Tblbonusdata20111104Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblBonusData_20111104. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusdata20111104(_tableTag: Tag) extends Table[Tblbonusdata20111104Row](_tableTag, Some("dbo"), "tblBonusData_20111104") {
    def * = uid :: cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdprodkindmain :: cdproject :: cdbonuscodereturn :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[String] = column[String]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[String] = column[String]("szBonusMonth", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[String] = column[String]("cdMemberTo", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusinessDate")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointBonus DBType(int) */
    val ipvpointbonus: Column[Int] = column[Int]("iPvPointBonus")
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column iUsedQty DBType(int) */
    val iusedqty: Column[Int] = column[Int]("iUsedQty")
    /** Database column iNoUsedQty DBType(int) */
    val inousedqty: Column[Int] = column[Int]("iNoUsedQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdProdKindMain DBType(char), Length(3,false) */
    val cdprodkindmain: Column[Option[String]] = column[Option[String]]("cdProdKindMain", O.Length(3,varying=false))
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
    /** Database column cdBonusCodeReturn DBType(char), Length(10,false) */
    val cdbonuscodereturn: Column[Option[String]] = column[Option[String]]("cdBonusCodeReturn", O.Length(10,varying=false))
  }
  /** Collection-like TableQuery object for table Tblbonusdata20111104 */
  lazy val Tblbonusdata20111104 = new TableQuery(tag => new Tblbonusdata20111104(tag))
  
  /** Entity class storing rows of table Tblbonusdatacheck
   *  @param cdprogram Database column cdProgram DBType(char), Length(50,false), Default(Some())
   *  @param szmessage01 Database column szMessage01 DBType(nvarchar), Length(256,true), Default(Some())
   *  @param szmessage02 Database column szMessage02 DBType(nvarchar), Length(256,true), Default(Some())
   *  @param szmessage03 Database column szMessage03 DBType(nvarchar), Length(256,true), Default(Some())
   *  @param dtcheck Database column dtCheck DBType(datetime) */
  case class TblbonusdatacheckRow(cdprogram: Option[String] = Some(""), szmessage01: Option[String] = Some(""), szmessage02: Option[String] = Some(""), szmessage03: Option[String] = Some(""), dtcheck: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblbonusdatacheckRow objects using plain SQL queries */
  implicit def GetResultTblbonusdatacheckRow(implicit e0: GR[Option[String]], e1: GR[Option[java.sql.Timestamp]]): GR[TblbonusdatacheckRow] = GR{
    prs => import prs._
    TblbonusdatacheckRow.tupled((<<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblBonusDataCheck. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusdatacheck(_tableTag: Tag) extends Table[TblbonusdatacheckRow](_tableTag, Some("dbo"), "tblBonusDataCheck") {
    def * = (cdprogram, szmessage01, szmessage02, szmessage03, dtcheck) <> (TblbonusdatacheckRow.tupled, TblbonusdatacheckRow.unapply)
    
    /** Database column cdProgram DBType(char), Length(50,false), Default(Some()) */
    val cdprogram: Column[Option[String]] = column[Option[String]]("cdProgram", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szMessage01 DBType(nvarchar), Length(256,true), Default(Some()) */
    val szmessage01: Column[Option[String]] = column[Option[String]]("szMessage01", O.Length(256,varying=true), O.Default(Some("")))
    /** Database column szMessage02 DBType(nvarchar), Length(256,true), Default(Some()) */
    val szmessage02: Column[Option[String]] = column[Option[String]]("szMessage02", O.Length(256,varying=true), O.Default(Some("")))
    /** Database column szMessage03 DBType(nvarchar), Length(256,true), Default(Some()) */
    val szmessage03: Column[Option[String]] = column[Option[String]]("szMessage03", O.Length(256,varying=true), O.Default(Some("")))
    /** Database column dtCheck DBType(datetime) */
    val dtcheck: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCheck")
  }
  /** Collection-like TableQuery object for table Tblbonusdatacheck */
  lazy val Tblbonusdatacheck = new TableQuery(tag => new Tblbonusdatacheck(tag))
  
  /** Entity class storing rows of table Tblbonusdatam
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param iseq Database column iSeq DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param cdprodkindmain Database column cdProdKindMain DBType(char), Length(3,false)
   *  @param cdproject Database column cdProject DBType(char), Length(15,false)
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param szbonusyear Database column szBonusYear DBType(char), Length(4,false)
   *  @param szbonusmonth Database column szBonusMonth DBType(char), Length(2,false)
   *  @param dtbusinessdate Database column dtBusinessDate DBType(datetime)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdmemberto Database column cdMemberTo DBType(char), Length(10,false)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param ipvpoint Database column iPvPoint DBType(int), Default(Some(0))
   *  @param ipvpointup Database column iPvPointUp DBType(int), Default(Some(0))
   *  @param ipvpointbonus Database column iPvPointBonus DBType(int), Default(Some(0))
   *  @param iprodqty Database column iProdQty DBType(int), Default(Some(0))
   *  @param iusedqty Database column iUsedQty DBType(int), Default(Some(0))
   *  @param inousedqty Database column iNoUsedQty DBType(int), Default(Some(0))
   *  @param cdbonuscodereturn Database column cdBonusCodeReturn DBType(char), Length(10,false) */
  case class TblbonusdatamRow(uid: String, cdcenter: Option[String], cdorderno: Option[String], iserialno: Option[Int], iseq: Option[Int], szprodid: Option[String], cdprodkindmain: Option[String], cdproject: Option[String], cdbonuscode: Option[String], szbonusyear: Option[String], szbonusmonth: Option[String], dtbusinessdate: Option[java.sql.Timestamp], cdmember: Option[String], cdmemberto: Option[String], cdcurrency: Option[String], ipvpoint: Option[Int] = Some(0), ipvpointup: Option[Int] = Some(0), ipvpointbonus: Option[Int] = Some(0), iprodqty: Option[Int] = Some(0), iusedqty: Option[Int] = Some(0), inousedqty: Option[Int] = Some(0), cdbonuscodereturn: Option[String])
  /** GetResult implicit for fetching TblbonusdatamRow objects using plain SQL queries */
  implicit def GetResultTblbonusdatamRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]]): GR[TblbonusdatamRow] = GR{
    prs => import prs._
    TblbonusdatamRow.tupled((<<[String], <<?[String], <<?[String], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[String]))
  }
  /** Table description of table tblBonusDataM. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusdatam(_tableTag: Tag) extends Table[TblbonusdatamRow](_tableTag, Some("dbo"), "tblBonusDataM") {
    def * = (uid, cdcenter, cdorderno, iserialno, iseq, szprodid, cdprodkindmain, cdproject, cdbonuscode, szbonusyear, szbonusmonth, dtbusinessdate, cdmember, cdmemberto, cdcurrency, ipvpoint, ipvpointup, ipvpointbonus, iprodqty, iusedqty, inousedqty, cdbonuscodereturn) <> (TblbonusdatamRow.tupled, TblbonusdatamRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter, cdorderno, iserialno, iseq, szprodid, cdprodkindmain, cdproject, cdbonuscode, szbonusyear, szbonusmonth, dtbusinessdate, cdmember, cdmemberto, cdcurrency, ipvpoint, ipvpointup, ipvpointbonus, iprodqty, iusedqty, inousedqty, cdbonuscodereturn).shaped.<>({r=>import r._; _1.map(_=> TblbonusdatamRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[Option[String]] = column[Option[String]]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Option[Int]] = column[Option[Int]]("iSerialNo")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Option[Int]] = column[Option[Int]]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[Option[String]] = column[Option[String]]("szProdID", O.Length(15,varying=false))
    /** Database column cdProdKindMain DBType(char), Length(3,false) */
    val cdprodkindmain: Column[Option[String]] = column[Option[String]]("cdProdKindMain", O.Length(3,varying=false))
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[Option[String]] = column[Option[String]]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[Option[String]] = column[Option[String]]("szBonusMonth", O.Length(2,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[Option[String]] = column[Option[String]]("cdMemberTo", O.Length(10,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column iPvPoint DBType(int), Default(Some(0)) */
    val ipvpoint: Column[Option[Int]] = column[Option[Int]]("iPvPoint", O.Default(Some(0)))
    /** Database column iPvPointUp DBType(int), Default(Some(0)) */
    val ipvpointup: Column[Option[Int]] = column[Option[Int]]("iPvPointUp", O.Default(Some(0)))
    /** Database column iPvPointBonus DBType(int), Default(Some(0)) */
    val ipvpointbonus: Column[Option[Int]] = column[Option[Int]]("iPvPointBonus", O.Default(Some(0)))
    /** Database column iProdQty DBType(int), Default(Some(0)) */
    val iprodqty: Column[Option[Int]] = column[Option[Int]]("iProdQty", O.Default(Some(0)))
    /** Database column iUsedQty DBType(int), Default(Some(0)) */
    val iusedqty: Column[Option[Int]] = column[Option[Int]]("iUsedQty", O.Default(Some(0)))
    /** Database column iNoUsedQty DBType(int), Default(Some(0)) */
    val inousedqty: Column[Option[Int]] = column[Option[Int]]("iNoUsedQty", O.Default(Some(0)))
    /** Database column cdBonusCodeReturn DBType(char), Length(10,false) */
    val cdbonuscodereturn: Column[Option[String]] = column[Option[String]]("cdBonusCodeReturn", O.Length(10,varying=false))
  }
  /** Collection-like TableQuery object for table Tblbonusdatam */
  lazy val Tblbonusdatam = new TableQuery(tag => new Tblbonusdatam(tag))
  
  /** Entity class storing rows of table Tblbonusinfo
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param cdorgchart Database column cdOrgChart DBType(char), Length(1,false), Default(Some())
   *  @param dtorgchart Database column dtOrgChart DBType(datetime)
   *  @param cdtblorgchart Database column cdtblOrgChart DBType(char), Length(1,false), Default(Some())
   *  @param dttblorgchart Database column dtTblOrgChart DBType(datetime) */
  case class TblbonusinfoRow(cdbonuscode: Option[String], dtcreate: Option[java.sql.Timestamp], cdorgchart: Option[String] = Some(""), dtorgchart: Option[java.sql.Timestamp], cdtblorgchart: Option[String] = Some(""), dttblorgchart: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblbonusinfoRow objects using plain SQL queries */
  implicit def GetResultTblbonusinfoRow(implicit e0: GR[Option[String]], e1: GR[Option[java.sql.Timestamp]]): GR[TblbonusinfoRow] = GR{
    prs => import prs._
    TblbonusinfoRow.tupled((<<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblBonusInfo. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusinfo(_tableTag: Tag) extends Table[TblbonusinfoRow](_tableTag, Some("dbo"), "tblBonusInfo") {
    def * = (cdbonuscode, dtcreate, cdorgchart, dtorgchart, cdtblorgchart, dttblorgchart) <> (TblbonusinfoRow.tupled, TblbonusinfoRow.unapply)
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column cdOrgChart DBType(char), Length(1,false), Default(Some()) */
    val cdorgchart: Column[Option[String]] = column[Option[String]]("cdOrgChart", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column dtOrgChart DBType(datetime) */
    val dtorgchart: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOrgChart")
    /** Database column cdtblOrgChart DBType(char), Length(1,false), Default(Some()) */
    val cdtblorgchart: Column[Option[String]] = column[Option[String]]("cdtblOrgChart", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column dtTblOrgChart DBType(datetime) */
    val dttblorgchart: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtTblOrgChart")
  }
  /** Collection-like TableQuery object for table Tblbonusinfo */
  lazy val Tblbonusinfo = new TableQuery(tag => new Tblbonusinfo(tag))
  
  /** Entity class storing rows of table Tblbonusinvoice
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdinvoiceno Database column cdInvoiceNo DBType(char), Length(10,false)
   *  @param cdtype Database column cdType DBType(char), Length(1,false)
   *  @param fzbonus Database column fzBonus DBType(float)
   *  @param fzbonustax Database column fzBonusTax DBType(float)
   *  @param fztotal Database column fzTotal DBType(char), Length(10,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param dtinvoiceno Database column dtInvoiceNo DBType(datetime)
   *  @param dtkeyin Database column dtKeyin DBType(datetime) */
  case class TblbonusinvoiceRow(cdbonuscode: String, cdmember: String, cdinvoiceno: String, cdtype: String, fzbonus: Option[Double], fzbonustax: Option[Double], fztotal: Option[String], szremark: Option[String], dtinvoiceno: Option[java.sql.Timestamp], dtkeyin: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblbonusinvoiceRow objects using plain SQL queries */
  implicit def GetResultTblbonusinvoiceRow(implicit e0: GR[String], e1: GR[Option[Double]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblbonusinvoiceRow] = GR{
    prs => import prs._
    TblbonusinvoiceRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[Double], <<?[Double], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblBonusInvoice. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusinvoice(_tableTag: Tag) extends Table[TblbonusinvoiceRow](_tableTag, Some("dbo"), "tblBonusInvoice") {
    def * = (cdbonuscode, cdmember, cdinvoiceno, cdtype, fzbonus, fzbonustax, fztotal, szremark, dtinvoiceno, dtkeyin) <> (TblbonusinvoiceRow.tupled, TblbonusinvoiceRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdbonuscode.?, cdmember.?, cdinvoiceno.?, cdtype.?, fzbonus, fzbonustax, fztotal, szremark, dtinvoiceno, dtkeyin).shaped.<>({r=>import r._; _1.map(_=> TblbonusinvoiceRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdInvoiceNo DBType(char), Length(10,false) */
    val cdinvoiceno: Column[String] = column[String]("cdInvoiceNo", O.Length(10,varying=false))
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(1,varying=false))
    /** Database column fzBonus DBType(float) */
    val fzbonus: Column[Option[Double]] = column[Option[Double]]("fzBonus")
    /** Database column fzBonusTax DBType(float) */
    val fzbonustax: Column[Option[Double]] = column[Option[Double]]("fzBonusTax")
    /** Database column fzTotal DBType(char), Length(10,false) */
    val fztotal: Column[Option[String]] = column[Option[String]]("fzTotal", O.Length(10,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column dtInvoiceNo DBType(datetime) */
    val dtinvoiceno: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtInvoiceNo")
    /** Database column dtKeyin DBType(datetime) */
    val dtkeyin: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtKeyin")
    
    /** Primary key of Tblbonusinvoice (database name PK_tblBonusInvoice) */
    val pk = primaryKey("PK_tblBonusInvoice", (cdbonuscode, cdmember, cdinvoiceno, cdtype))
    
    /** Index over (cdinvoiceno,cdtype) (database name IX_tblBonusInvoice) */
    val index1 = index("IX_tblBonusInvoice", (cdinvoiceno, cdtype))
  }
  /** Collection-like TableQuery object for table Tblbonusinvoice */
  lazy val Tblbonusinvoice = new TableQuery(tag => new Tblbonusinvoice(tag))
  
  /** Row type of table Tblbonusm */
  type TblbonusmRow = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Long],HCons[Option[Long],HCons[Option[Long],HCons[Option[Long],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Short],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Short],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[Double],HCons[Option[Int],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblbonusmRow providing default values if available in the database schema. */
  def TblbonusmRow(cdbonuscode: String, szbonusyear: String, szbonusmonth: String, igeneration: Int = 0, cdpersa: Option[String], cdmember: String, uidrelation: Option[String], cdsponser: Option[String], szfullname: Option[String], cdzip: Option[String], szfulladdr: Option[String] = Some(""), szdetail: Option[String] = Some(""), szmobile: Option[String] = Some(""), dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], cdmemkind: Option[String] = Some(""), cdcid: Option[String], cdid: Option[String], idstatus: Option[String] = Some("1"), issuspend: Option[Boolean] = Some(false), cdpaymethod: Option[String], idcontract: Option[String] = Some("0"), isquotaok: Option[Boolean], cdcurrency: Option[String], cdpersglastmonth: Option[String], cdpersgcurrmonth: Option[String], cdpersgnextmonth: Option[String], cdpersggroup: Option[String], idquotastop: Option[String] = Some("0"), idleaderstop: Option[String] = Some("0"), idsharestop: Option[String] = Some("0"), cdspecial: Option[String] = Some("9999999999"), cdagency: Option[String] = Some("9999999999"), cdsuper: Option[String] = Some("9999999999"), cdsupervise: Option[String] = Some("9999999999"), ipv: Option[Int] = Some(0), iuppv: Option[Int] = Some(0), isbuy25000: Option[Boolean] = Some(false), icumpv: Option[Int] = Some(0), icumuppv: Option[Int] = Some(0), icurrpv: Option[Int] = Some(0), icurruppv: Option[Int] = Some(0), ipvafter25: Option[Int] = Some(0), iuppvafter25: Option[Int] = Some(0), ipvline: Option[Int] = Some(0), iuppvline: Option[Int] = Some(0), icumpvgroup: Option[Long] = Some(0L), icumuppvgroup: Option[Long] = Some(0L), icurrpvgroup: Option[Long] = Some(0L), icurruppvgroup: Option[Long] = Some(0L), ipvlevel: Option[Int] = Some(0), ipvbonus: Option[Int] = Some(0), ipvbonusafter25: Option[Int] = Some(0), ipvis25: Option[Int] = Some(0), ilinesshare: Option[Short] = Some(0), idealers: Option[Short] = Some(0), isellers: Option[Short] = Some(0), ispecials: Option[Short] = Some(0), iagencies: Option[Short] = Some(0), isupers: Option[Short] = Some(0), isflag3lastmonth: Option[Boolean] = Some(false), isflag3currmonth: Option[Boolean] = Some(false), idilifestop: Option[String] = Some("0"), idcontractilife: Option[String] = Some("0"), isilifequotaok: Option[Boolean], ipvilife: Option[Int] = Some(0), iuppvilife: Option[Int] = Some(0), ipvilifebonus: Option[Int] = Some(0), isbuy6300: Option[Short] = Some(0), ipvilifeafter6300: Option[Int] = Some(0), iuppvilifeafter6300: Option[Int] = Some(0), ipvilifebonusafter6300: Option[Int] = Some(0), ilinesilife: Option[Short] = Some(0), fzbonusquota: Option[Double] = Some(0.0), fzbonusorg: Option[Double] = Some(0.0), fzbonusleader: Option[Double] = Some(0.0), fzbonusilife: Option[Double] = Some(0.0), fzbonusorgilife: Option[Double] = Some(0.0), fzbonusshare: Option[Double] = Some(0.0), fzbonusleaderpay: Option[Double] = Some(0.0), fzbonus: Option[Double] = Some(0.0), fzbonustax1: Option[Double] = Some(0.0), fzbonustax2: Option[Double] = Some(0.0), fzservicecharge: Option[Double] = Some(0.0), fzbonusnet: Option[Double] = Some(0.0), cdbank: Option[String], szbank: Option[String], cdbranch: Option[String], szaccountno: Option[String], szholder: Option[String], fzremittancefee: Option[Double] = Some(0.0), fzbonusorgf: Option[Double] = Some(0.0), fzbonusleaderf: Option[Double] = Some(0.0), fzbonusorgilifef: Option[Double] = Some(0.0), fzbonusleaderpayf: Option[Double] = Some(0.0), fzbonusf: Option[Double] = Some(0.0), iswarning: Option[Boolean] = Some(false), cdinvoiceno: Option[String], dtinvoiceno: Option[java.sql.Timestamp], fzinvoiceno: Option[Double] = Some(0.0), ipvilifemove: Option[Int] = Some(0), cdpergp: Option[String]): TblbonusmRow = {
    cdbonuscode :: szbonusyear :: szbonusmonth :: igeneration :: cdpersa :: cdmember :: uidrelation :: cdsponser :: szfullname :: cdzip :: szfulladdr :: szdetail :: szmobile :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: idstatus :: issuspend :: cdpaymethod :: idcontract :: isquotaok :: cdcurrency :: cdpersglastmonth :: cdpersgcurrmonth :: cdpersgnextmonth :: cdpersggroup :: idquotastop :: idleaderstop :: idsharestop :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: ipv :: iuppv :: isbuy25000 :: icumpv :: icumuppv :: icurrpv :: icurruppv :: ipvafter25 :: iuppvafter25 :: ipvline :: iuppvline :: icumpvgroup :: icumuppvgroup :: icurrpvgroup :: icurruppvgroup :: ipvlevel :: ipvbonus :: ipvbonusafter25 :: ipvis25 :: ilinesshare :: idealers :: isellers :: ispecials :: iagencies :: isupers :: isflag3lastmonth :: isflag3currmonth :: idilifestop :: idcontractilife :: isilifequotaok :: ipvilife :: iuppvilife :: ipvilifebonus :: isbuy6300 :: ipvilifeafter6300 :: iuppvilifeafter6300 :: ipvilifebonusafter6300 :: ilinesilife :: fzbonusquota :: fzbonusorg :: fzbonusleader :: fzbonusilife :: fzbonusorgilife :: fzbonusshare :: fzbonusleaderpay :: fzbonus :: fzbonustax1 :: fzbonustax2 :: fzservicecharge :: fzbonusnet :: cdbank :: szbank :: cdbranch :: szaccountno :: szholder :: fzremittancefee :: fzbonusorgf :: fzbonusleaderf :: fzbonusorgilifef :: fzbonusleaderpayf :: fzbonusf :: iswarning :: cdinvoiceno :: dtinvoiceno :: fzinvoiceno :: ipvilifemove :: cdpergp :: HNil
  }
  /** GetResult implicit for fetching TblbonusmRow objects using plain SQL queries */
  implicit def GetResultTblbonusmRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Boolean]], e5: GR[Option[Int]], e6: GR[Option[Long]], e7: GR[Option[Short]], e8: GR[Option[Double]]): GR[TblbonusmRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Long] :: <<?[Long] :: <<?[Long] :: <<?[Long] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Boolean] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Short] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Short] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[Double] :: <<?[Int] :: <<?[String] :: HNil
  }
  /** Table description of table tblBonusM. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusm(_tableTag: Tag) extends Table[TblbonusmRow](_tableTag, Some("dbo"), "tblBonusM") {
    def * = cdbonuscode :: szbonusyear :: szbonusmonth :: igeneration :: cdpersa :: cdmember :: uidrelation :: cdsponser :: szfullname :: cdzip :: szfulladdr :: szdetail :: szmobile :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: idstatus :: issuspend :: cdpaymethod :: idcontract :: isquotaok :: cdcurrency :: cdpersglastmonth :: cdpersgcurrmonth :: cdpersgnextmonth :: cdpersggroup :: idquotastop :: idleaderstop :: idsharestop :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: ipv :: iuppv :: isbuy25000 :: icumpv :: icumuppv :: icurrpv :: icurruppv :: ipvafter25 :: iuppvafter25 :: ipvline :: iuppvline :: icumpvgroup :: icumuppvgroup :: icurrpvgroup :: icurruppvgroup :: ipvlevel :: ipvbonus :: ipvbonusafter25 :: ipvis25 :: ilinesshare :: idealers :: isellers :: ispecials :: iagencies :: isupers :: isflag3lastmonth :: isflag3currmonth :: idilifestop :: idcontractilife :: isilifequotaok :: ipvilife :: iuppvilife :: ipvilifebonus :: isbuy6300 :: ipvilifeafter6300 :: iuppvilifeafter6300 :: ipvilifebonusafter6300 :: ilinesilife :: fzbonusquota :: fzbonusorg :: fzbonusleader :: fzbonusilife :: fzbonusorgilife :: fzbonusshare :: fzbonusleaderpay :: fzbonus :: fzbonustax1 :: fzbonustax2 :: fzservicecharge :: fzbonusnet :: cdbank :: szbank :: cdbranch :: szaccountno :: szholder :: fzremittancefee :: fzbonusorgf :: fzbonusleaderf :: fzbonusorgilifef :: fzbonusleaderpayf :: fzbonusf :: iswarning :: cdinvoiceno :: dtinvoiceno :: fzinvoiceno :: ipvilifemove :: cdpergp :: HNil
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[String] = column[String]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[String] = column[String]("szBonusMonth", O.Length(2,varying=false))
    /** Database column iGeneration DBType(int), Default(0) */
    val igeneration: Column[Int] = column[Int]("iGeneration", O.Default(0))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[Option[String]] = column[Option[String]]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column szFullName DBType(nvarchar), Length(120,true) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false), Default(Some()) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szDetail DBType(nchar), Length(128,false), Default(Some()) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szMobile DBType(nchar), Length(128,false), Default(Some()) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column cdMemKind DBType(char), Length(1,false), Default(Some()) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column idStatus DBType(char), Length(1,false), Default(Some(1)) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column isSuspend DBType(bit), Default(Some(false)) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend", O.Default(Some(false)))
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column idContract DBType(char), Length(1,false), Default(Some(0)) */
    val idcontract: Column[Option[String]] = column[Option[String]]("idContract", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column isQuotaOk DBType(bit) */
    val isquotaok: Column[Option[Boolean]] = column[Option[Boolean]]("isQuotaOk")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column cdPerSgLastMonth DBType(char), Length(2,false) */
    val cdpersglastmonth: Column[Option[String]] = column[Option[String]]("cdPerSgLastMonth", O.Length(2,varying=false))
    /** Database column cdPerSgCurrMonth DBType(char), Length(2,false) */
    val cdpersgcurrmonth: Column[Option[String]] = column[Option[String]]("cdPerSgCurrMonth", O.Length(2,varying=false))
    /** Database column cdPerSgNextMonth DBType(char), Length(2,false) */
    val cdpersgnextmonth: Column[Option[String]] = column[Option[String]]("cdPerSgNextMonth", O.Length(2,varying=false))
    /** Database column cdPerSgGroup DBType(char), Length(2,false) */
    val cdpersggroup: Column[Option[String]] = column[Option[String]]("cdPerSgGroup", O.Length(2,varying=false))
    /** Database column idQuotaStop DBType(char), Length(1,false), Default(Some(0)) */
    val idquotastop: Column[Option[String]] = column[Option[String]]("idQuotaStop", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column idLeaderStop DBType(char), Length(1,false), Default(Some(0)) */
    val idleaderstop: Column[Option[String]] = column[Option[String]]("idLeaderStop", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column idShareStop DBType(char), Length(1,false), Default(Some(0)) */
    val idsharestop: Column[Option[String]] = column[Option[String]]("idShareStop", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column cdSpecial DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdAgency DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSuper DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSupervise DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column iPv DBType(int), Default(Some(0)) */
    val ipv: Column[Option[Int]] = column[Option[Int]]("iPv", O.Default(Some(0)))
    /** Database column iUpPv DBType(int), Default(Some(0)) */
    val iuppv: Column[Option[Int]] = column[Option[Int]]("iUpPv", O.Default(Some(0)))
    /** Database column isBuy25000 DBType(bit), Default(Some(false)) */
    val isbuy25000: Column[Option[Boolean]] = column[Option[Boolean]]("isBuy25000", O.Default(Some(false)))
    /** Database column iCumPv DBType(int), Default(Some(0)) */
    val icumpv: Column[Option[Int]] = column[Option[Int]]("iCumPv", O.Default(Some(0)))
    /** Database column iCumUpPv DBType(int), Default(Some(0)) */
    val icumuppv: Column[Option[Int]] = column[Option[Int]]("iCumUpPv", O.Default(Some(0)))
    /** Database column iCurrPv DBType(int), Default(Some(0)) */
    val icurrpv: Column[Option[Int]] = column[Option[Int]]("iCurrPv", O.Default(Some(0)))
    /** Database column iCurrUpPv DBType(int), Default(Some(0)) */
    val icurruppv: Column[Option[Int]] = column[Option[Int]]("iCurrUpPv", O.Default(Some(0)))
    /** Database column iPvAfter25 DBType(int), Default(Some(0)) */
    val ipvafter25: Column[Option[Int]] = column[Option[Int]]("iPvAfter25", O.Default(Some(0)))
    /** Database column iUpPvAfter25 DBType(int), Default(Some(0)) */
    val iuppvafter25: Column[Option[Int]] = column[Option[Int]]("iUpPvAfter25", O.Default(Some(0)))
    /** Database column iPvLine DBType(int), Default(Some(0)) */
    val ipvline: Column[Option[Int]] = column[Option[Int]]("iPvLine", O.Default(Some(0)))
    /** Database column iUpPvLine DBType(int), Default(Some(0)) */
    val iuppvline: Column[Option[Int]] = column[Option[Int]]("iUpPvLine", O.Default(Some(0)))
    /** Database column iCumPvGroup DBType(bigint), Default(Some(0)) */
    val icumpvgroup: Column[Option[Long]] = column[Option[Long]]("iCumPvGroup", O.Default(Some(0L)))
    /** Database column iCumUpPvGroup DBType(bigint), Default(Some(0)) */
    val icumuppvgroup: Column[Option[Long]] = column[Option[Long]]("iCumUpPvGroup", O.Default(Some(0L)))
    /** Database column iCurrPvGroup DBType(bigint), Default(Some(0)) */
    val icurrpvgroup: Column[Option[Long]] = column[Option[Long]]("iCurrPvGroup", O.Default(Some(0L)))
    /** Database column iCurrUpPvGroup DBType(bigint), Default(Some(0)) */
    val icurruppvgroup: Column[Option[Long]] = column[Option[Long]]("iCurrUpPvGroup", O.Default(Some(0L)))
    /** Database column iPvLevel DBType(int), Default(Some(0)) */
    val ipvlevel: Column[Option[Int]] = column[Option[Int]]("iPvLevel", O.Default(Some(0)))
    /** Database column iPvBonus DBType(int), Default(Some(0)) */
    val ipvbonus: Column[Option[Int]] = column[Option[Int]]("iPvBonus", O.Default(Some(0)))
    /** Database column iPvBonusAfter25 DBType(int), Default(Some(0)) */
    val ipvbonusafter25: Column[Option[Int]] = column[Option[Int]]("iPvBonusAfter25", O.Default(Some(0)))
    /** Database column iPvIs25 DBType(int), Default(Some(0)) */
    val ipvis25: Column[Option[Int]] = column[Option[Int]]("iPvIs25", O.Default(Some(0)))
    /** Database column iLinesShare DBType(smallint), Default(Some(0)) */
    val ilinesshare: Column[Option[Short]] = column[Option[Short]]("iLinesShare", O.Default(Some(0)))
    /** Database column iDealers DBType(smallint), Default(Some(0)) */
    val idealers: Column[Option[Short]] = column[Option[Short]]("iDealers", O.Default(Some(0)))
    /** Database column iSellers DBType(smallint), Default(Some(0)) */
    val isellers: Column[Option[Short]] = column[Option[Short]]("iSellers", O.Default(Some(0)))
    /** Database column iSpecials DBType(smallint), Default(Some(0)) */
    val ispecials: Column[Option[Short]] = column[Option[Short]]("iSpecials", O.Default(Some(0)))
    /** Database column iAgencies DBType(smallint), Default(Some(0)) */
    val iagencies: Column[Option[Short]] = column[Option[Short]]("iAgencies", O.Default(Some(0)))
    /** Database column iSupers DBType(smallint), Default(Some(0)) */
    val isupers: Column[Option[Short]] = column[Option[Short]]("iSupers", O.Default(Some(0)))
    /** Database column isFlag3LastMonth DBType(bit), Default(Some(false)) */
    val isflag3lastmonth: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3LastMonth", O.Default(Some(false)))
    /** Database column isFlag3CurrMonth DBType(bit), Default(Some(false)) */
    val isflag3currmonth: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3CurrMonth", O.Default(Some(false)))
    /** Database column idiLifeStop DBType(char), Length(1,false), Default(Some(0)) */
    val idilifestop: Column[Option[String]] = column[Option[String]]("idiLifeStop", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column idContractiLife DBType(char), Length(1,false), Default(Some(0)) */
    val idcontractilife: Column[Option[String]] = column[Option[String]]("idContractiLife", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column isiLifeQuotaOk DBType(bit) */
    val isilifequotaok: Column[Option[Boolean]] = column[Option[Boolean]]("isiLifeQuotaOk")
    /** Database column iPviLife DBType(int), Default(Some(0)) */
    val ipvilife: Column[Option[Int]] = column[Option[Int]]("iPviLife", O.Default(Some(0)))
    /** Database column iUpPviLife DBType(int), Default(Some(0)) */
    val iuppvilife: Column[Option[Int]] = column[Option[Int]]("iUpPviLife", O.Default(Some(0)))
    /** Database column iPviLifeBonus DBType(int), Default(Some(0)) */
    val ipvilifebonus: Column[Option[Int]] = column[Option[Int]]("iPviLifeBonus", O.Default(Some(0)))
    /** Database column isBuy6300 DBType(smallint), Default(Some(0)) */
    val isbuy6300: Column[Option[Short]] = column[Option[Short]]("isBuy6300", O.Default(Some(0)))
    /** Database column iPviLifeAfter6300 DBType(int), Default(Some(0)) */
    val ipvilifeafter6300: Column[Option[Int]] = column[Option[Int]]("iPviLifeAfter6300", O.Default(Some(0)))
    /** Database column iUpPviLifeAfter6300 DBType(int), Default(Some(0)) */
    val iuppvilifeafter6300: Column[Option[Int]] = column[Option[Int]]("iUpPviLifeAfter6300", O.Default(Some(0)))
    /** Database column iPviLifeBonusAfter6300 DBType(int), Default(Some(0)) */
    val ipvilifebonusafter6300: Column[Option[Int]] = column[Option[Int]]("iPviLifeBonusAfter6300", O.Default(Some(0)))
    /** Database column iLinesiLife DBType(smallint), Default(Some(0)) */
    val ilinesilife: Column[Option[Short]] = column[Option[Short]]("iLinesiLife", O.Default(Some(0)))
    /** Database column fzBonusQuota DBType(float), Default(Some(0.0)) */
    val fzbonusquota: Column[Option[Double]] = column[Option[Double]]("fzBonusQuota", O.Default(Some(0.0)))
    /** Database column fzBonusOrg DBType(float), Default(Some(0.0)) */
    val fzbonusorg: Column[Option[Double]] = column[Option[Double]]("fzBonusOrg", O.Default(Some(0.0)))
    /** Database column fzBonusLeader DBType(float), Default(Some(0.0)) */
    val fzbonusleader: Column[Option[Double]] = column[Option[Double]]("fzBonusLeader", O.Default(Some(0.0)))
    /** Database column fzBonusiLife DBType(float), Default(Some(0.0)) */
    val fzbonusilife: Column[Option[Double]] = column[Option[Double]]("fzBonusiLife", O.Default(Some(0.0)))
    /** Database column fzBonusOrgiLife DBType(float), Default(Some(0.0)) */
    val fzbonusorgilife: Column[Option[Double]] = column[Option[Double]]("fzBonusOrgiLife", O.Default(Some(0.0)))
    /** Database column fzBonusShare DBType(float), Default(Some(0.0)) */
    val fzbonusshare: Column[Option[Double]] = column[Option[Double]]("fzBonusShare", O.Default(Some(0.0)))
    /** Database column fzBonusLeaderPay DBType(float), Default(Some(0.0)) */
    val fzbonusleaderpay: Column[Option[Double]] = column[Option[Double]]("fzBonusLeaderPay", O.Default(Some(0.0)))
    /** Database column fzBonus DBType(float), Default(Some(0.0)) */
    val fzbonus: Column[Option[Double]] = column[Option[Double]]("fzBonus", O.Default(Some(0.0)))
    /** Database column fzBonusTax1 DBType(float), Default(Some(0.0)) */
    val fzbonustax1: Column[Option[Double]] = column[Option[Double]]("fzBonusTax1", O.Default(Some(0.0)))
    /** Database column fzBonusTax2 DBType(float), Default(Some(0.0)) */
    val fzbonustax2: Column[Option[Double]] = column[Option[Double]]("fzBonusTax2", O.Default(Some(0.0)))
    /** Database column fzServiceCharge DBType(float), Default(Some(0.0)) */
    val fzservicecharge: Column[Option[Double]] = column[Option[Double]]("fzServiceCharge", O.Default(Some(0.0)))
    /** Database column fzBonusNet DBType(float), Default(Some(0.0)) */
    val fzbonusnet: Column[Option[Double]] = column[Option[Double]]("fzBonusNet", O.Default(Some(0.0)))
    /** Database column cdBank DBType(char), Length(60,false) */
    val cdbank: Column[Option[String]] = column[Option[String]]("cdBank", O.Length(60,varying=false))
    /** Database column szBank DBType(char), Length(60,false) */
    val szbank: Column[Option[String]] = column[Option[String]]("szBank", O.Length(60,varying=false))
    /** Database column cdBranch DBType(char), Length(60,false) */
    val cdbranch: Column[Option[String]] = column[Option[String]]("cdBranch", O.Length(60,varying=false))
    /** Database column szAccountNo DBType(char), Length(30,false) */
    val szaccountno: Column[Option[String]] = column[Option[String]]("szAccountNo", O.Length(30,varying=false))
    /** Database column szHolder DBType(nchar), Length(120,false) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=false))
    /** Database column fzRemittanceFee DBType(float), Default(Some(0.0)) */
    val fzremittancefee: Column[Option[Double]] = column[Option[Double]]("fzRemittanceFee", O.Default(Some(0.0)))
    /** Database column fzBonusOrgF DBType(float), Default(Some(0.0)) */
    val fzbonusorgf: Column[Option[Double]] = column[Option[Double]]("fzBonusOrgF", O.Default(Some(0.0)))
    /** Database column fzBonusLeaderF DBType(float), Default(Some(0.0)) */
    val fzbonusleaderf: Column[Option[Double]] = column[Option[Double]]("fzBonusLeaderF", O.Default(Some(0.0)))
    /** Database column fzBonusOrgiLifeF DBType(float), Default(Some(0.0)) */
    val fzbonusorgilifef: Column[Option[Double]] = column[Option[Double]]("fzBonusOrgiLifeF", O.Default(Some(0.0)))
    /** Database column fzBonusLeaderPayF DBType(float), Default(Some(0.0)) */
    val fzbonusleaderpayf: Column[Option[Double]] = column[Option[Double]]("fzBonusLeaderPayF", O.Default(Some(0.0)))
    /** Database column fzBonusF DBType(float), Default(Some(0.0)) */
    val fzbonusf: Column[Option[Double]] = column[Option[Double]]("fzBonusF", O.Default(Some(0.0)))
    /** Database column isWarning DBType(bit), Default(Some(false)) */
    val iswarning: Column[Option[Boolean]] = column[Option[Boolean]]("isWarning", O.Default(Some(false)))
    /** Database column cdInvoiceNo DBType(char), Length(10,false) */
    val cdinvoiceno: Column[Option[String]] = column[Option[String]]("cdInvoiceNo", O.Length(10,varying=false))
    /** Database column dtInvoiceNo DBType(datetime) */
    val dtinvoiceno: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtInvoiceNo")
    /** Database column fzInvoiceNo DBType(float), Default(Some(0.0)) */
    val fzinvoiceno: Column[Option[Double]] = column[Option[Double]]("fzInvoiceNo", O.Default(Some(0.0)))
    /** Database column iPviLifeMove DBType(int), Default(Some(0)) */
    val ipvilifemove: Column[Option[Int]] = column[Option[Int]]("iPviLifeMove", O.Default(Some(0)))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[Option[String]] = column[Option[String]]("cdPerGp", O.Length(2,varying=false))
    
    /** Primary key of Tblbonusm (database name PK_tblBonusM) */
    val pk = primaryKey("PK_tblBonusM", cdbonuscode :: cdmember :: HNil)
  }
  /** Collection-like TableQuery object for table Tblbonusm */
  lazy val Tblbonusm = new TableQuery(tag => new Tblbonusm(tag))
  
  /** Entity class storing rows of table Tblbonusmh
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param igeneration Database column iGeneration DBType(smallint), Default(Some(0))
   *  @param cdsponser Database column cdSponser DBType(char), Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param szfullname Database column szFullName DBType(nvarchar), Length(120,true)
   *  @param szdetail Database column szDetail DBType(nchar), Length(128,false), Default(Some())
   *  @param szmobile Database column szMobile DBType(nchar), Length(128,false), Default(Some())
   *  @param cdmemkind Database column cdMemKind DBType(char), Length(1,false), Default(Some())
   *  @param cdcid Database column cdCid DBType(char), Length(2,false)
   *  @param idstatus Database column idStatus DBType(char), Length(1,false), Default(Some(1))
   *  @param cdpersgcurrmonth Database column cdPerSgCurrMonth DBType(char), Length(2,false)
   *  @param ipv Database column iPv DBType(int), Default(Some(0))
   *  @param ilinesshare Database column iLinesShare DBType(smallint), Default(Some(0))
   *  @param fzbonusshare Database column fzBonusShare DBType(float), Default(Some(0.0))
   *  @param isquotaok Database column isQuotaOk DBType(bit) */
  case class TblbonusmhRow(cdbonuscode: String, igeneration: Option[Short] = Some(0), cdsponser: Option[String], cdmember: String, szfullname: Option[String], szdetail: Option[String] = Some(""), szmobile: Option[String] = Some(""), cdmemkind: Option[String] = Some(""), cdcid: Option[String], idstatus: Option[String] = Some("1"), cdpersgcurrmonth: Option[String], ipv: Option[Int] = Some(0), ilinesshare: Option[Short] = Some(0), fzbonusshare: Option[Double] = Some(0.0), isquotaok: Option[Boolean])
  /** GetResult implicit for fetching TblbonusmhRow objects using plain SQL queries */
  implicit def GetResultTblbonusmhRow(implicit e0: GR[String], e1: GR[Option[Short]], e2: GR[Option[String]], e3: GR[Option[Int]], e4: GR[Option[Double]], e5: GR[Option[Boolean]]): GR[TblbonusmhRow] = GR{
    prs => import prs._
    TblbonusmhRow.tupled((<<[String], <<?[Short], <<?[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Int], <<?[Short], <<?[Double], <<?[Boolean]))
  }
  /** Table description of table tblBonusMH. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusmh(_tableTag: Tag) extends Table[TblbonusmhRow](_tableTag, Some("dbo"), "tblBonusMH") {
    def * = (cdbonuscode, igeneration, cdsponser, cdmember, szfullname, szdetail, szmobile, cdmemkind, cdcid, idstatus, cdpersgcurrmonth, ipv, ilinesshare, fzbonusshare, isquotaok) <> (TblbonusmhRow.tupled, TblbonusmhRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdbonuscode.?, igeneration, cdsponser, cdmember.?, szfullname, szdetail, szmobile, cdmemkind, cdcid, idstatus, cdpersgcurrmonth, ipv, ilinesshare, fzbonusshare, isquotaok).shaped.<>({r=>import r._; _1.map(_=> TblbonusmhRow.tupled((_1.get, _2, _3, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column iGeneration DBType(smallint), Default(Some(0)) */
    val igeneration: Column[Option[Short]] = column[Option[Short]]("iGeneration", O.Default(Some(0)))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column szFullName DBType(nvarchar), Length(120,true) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true))
    /** Database column szDetail DBType(nchar), Length(128,false), Default(Some()) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szMobile DBType(nchar), Length(128,false), Default(Some()) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column cdMemKind DBType(char), Length(1,false), Default(Some()) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column idStatus DBType(char), Length(1,false), Default(Some(1)) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column cdPerSgCurrMonth DBType(char), Length(2,false) */
    val cdpersgcurrmonth: Column[Option[String]] = column[Option[String]]("cdPerSgCurrMonth", O.Length(2,varying=false))
    /** Database column iPv DBType(int), Default(Some(0)) */
    val ipv: Column[Option[Int]] = column[Option[Int]]("iPv", O.Default(Some(0)))
    /** Database column iLinesShare DBType(smallint), Default(Some(0)) */
    val ilinesshare: Column[Option[Short]] = column[Option[Short]]("iLinesShare", O.Default(Some(0)))
    /** Database column fzBonusShare DBType(float), Default(Some(0.0)) */
    val fzbonusshare: Column[Option[Double]] = column[Option[Double]]("fzBonusShare", O.Default(Some(0.0)))
    /** Database column isQuotaOk DBType(bit) */
    val isquotaok: Column[Option[Boolean]] = column[Option[Boolean]]("isQuotaOk")
    
    /** Primary key of Tblbonusmh (database name PK_tblBonusMHW) */
    val pk = primaryKey("PK_tblBonusMHW", (cdbonuscode, cdmember))
  }
  /** Collection-like TableQuery object for table Tblbonusmh */
  lazy val Tblbonusmh = new TableQuery(tag => new Tblbonusmh(tag))
  
  /** Row type of table Tblbonusnetdata */
  type TblbonusnetdataRow = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[Boolean,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[Option[String],HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[String,HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblbonusnetdataRow providing default values if available in the database schema. */
  def TblbonusnetdataRow(uid: String, cdcenter: String, cdorderno: String, iserialno: Int, iseq: Int, isvalid: Boolean = false, szprodid: String, cdbonuscode: String, szbonusyear: String, szbonusmonth: String, cdmember: String, cdmemberto: String, dtbusinessdate: java.sql.Timestamp, cdcurrency: Option[String] = Some("THB"), ipvpoint: Int, ipvpointup: Int, ipvpointbonus: Int = 0, iprodqty: Int, iusedqty: Int, inousedqty: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdstatus: String = "0", uidwebbonus: Option[String]): TblbonusnetdataRow = {
    uid :: cdcenter :: cdorderno :: iserialno :: iseq :: isvalid :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdstatus :: uidwebbonus :: HNil
  }
  /** GetResult implicit for fetching TblbonusnetdataRow objects using plain SQL queries */
  implicit def GetResultTblbonusnetdataRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Boolean], e3: GR[java.sql.Timestamp], e4: GR[Option[String]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblbonusnetdataRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[Boolean] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblBonusNetData. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusnetdata(_tableTag: Tag) extends Table[TblbonusnetdataRow](_tableTag, Some("dbo"), "tblBonusNetData") {
    def * = uid :: cdcenter :: cdorderno :: iserialno :: iseq :: isvalid :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdstatus :: uidwebbonus :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column isValid DBType(bit), Default(false) */
    val isvalid: Column[Boolean] = column[Boolean]("isValid", O.Default(false))
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[String] = column[String]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[String] = column[String]("szBonusMonth", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[String] = column[String]("cdMemberTo", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusinessDate")
    /** Database column cdCurrency DBType(char), Length(4,false), Default(Some(THB)) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false), O.Default(Some("THB")))
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointBonus DBType(int), Default(0) */
    val ipvpointbonus: Column[Int] = column[Int]("iPvPointBonus", O.Default(0))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column iUsedQty DBType(int) */
    val iusedqty: Column[Int] = column[Int]("iUsedQty")
    /** Database column iNoUsedQty DBType(int) */
    val inousedqty: Column[Int] = column[Int]("iNoUsedQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(binary) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdStatus DBType(char), Length(1,false), Default(0) */
    val cdstatus: Column[String] = column[String]("cdStatus", O.Length(1,varying=false), O.Default("0"))
    /** Database column uidWebBonus DBType(uniqueidentifier), Length(36,false) */
    val uidwebbonus: Column[Option[String]] = column[Option[String]]("uidWebBonus", O.Length(36,varying=false))
    
    /** Primary key of Tblbonusnetdata (database name PK_tblBonusNetData) */
    val pk = primaryKey("PK_tblBonusNetData", cdorderno :: iserialno :: iseq :: HNil)
    
    /** Index over (cdbonuscode,cdmember) (database name IX_tblBonusNetData) */
    val index1 = index("IX_tblBonusNetData", cdbonuscode :: cdmember :: HNil)
    /** Index over (cdbonuscode,cdmemberto) (database name IX_tblBonusNetData_1) */
    val index2 = index("IX_tblBonusNetData_1", cdbonuscode :: cdmemberto :: HNil)
  }
  /** Collection-like TableQuery object for table Tblbonusnetdata */
  lazy val Tblbonusnetdata = new TableQuery(tag => new Tblbonusnetdata(tag))
  
  /** Entity class storing rows of table TblbonusnetdataLog
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param szmember Database column szMember DBType(char), Length(128,false)
   *  @param cdmemberto Database column cdMemberTo DBType(char), Length(10,false)
   *  @param szmemberto Database column szMemberTo DBType(char), Length(128,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param ipvpoint Database column iPvPoint DBType(int)
   *  @param iprodqty Database column iProdQty DBType(int)
   *  @param szmail Database column szMail DBType(nchar), Length(128,false)
   *  @param issend Database column isSend DBType(char), Length(1,false)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblbonusnetdataLogRow(uid: String, cdmember: String, szmember: String, cdmemberto: String, szmemberto: String, cdorderno: String, iserialno: Int, szprodid: String, cdbonuscode: String, ipvpoint: Int, iprodqty: Int, szmail: String, issend: String, cdstatus: String, uidcreator: String, dtcreate: java.sql.Timestamp, uidmodifier: String, dtmodify: java.sql.Timestamp)
  /** GetResult implicit for fetching TblbonusnetdataLogRow objects using plain SQL queries */
  implicit def GetResultTblbonusnetdataLogRow(implicit e0: GR[String], e1: GR[Int], e2: GR[java.sql.Timestamp]): GR[TblbonusnetdataLogRow] = GR{
    prs => import prs._
    TblbonusnetdataLogRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[String], <<[String], <<[Int], <<[String], <<[String], <<[Int], <<[Int], <<[String], <<[String], <<[String], <<[String], <<[java.sql.Timestamp], <<[String], <<[java.sql.Timestamp]))
  }
  /** Table description of table tblBonusNetData_Log. Objects of this class serve as prototypes for rows in queries. */
  class TblbonusnetdataLog(_tableTag: Tag) extends Table[TblbonusnetdataLogRow](_tableTag, Some("dbo"), "tblBonusNetData_Log") {
    def * = (uid, cdmember, szmember, cdmemberto, szmemberto, cdorderno, iserialno, szprodid, cdbonuscode, ipvpoint, iprodqty, szmail, issend, cdstatus, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblbonusnetdataLogRow.tupled, TblbonusnetdataLogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember.?, szmember.?, cdmemberto.?, szmemberto.?, cdorderno.?, iserialno.?, szprodid.?, cdbonuscode.?, ipvpoint.?, iprodqty.?, szmail.?, issend.?, cdstatus.?, uidcreator.?, dtcreate.?, uidmodifier.?, dtmodify.?).shaped.<>({r=>import r._; _1.map(_=> TblbonusnetdataLogRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10.get, _11.get, _12.get, _13.get, _14.get, _15.get, _16.get, _17.get, _18.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column szMember DBType(char), Length(128,false) */
    val szmember: Column[String] = column[String]("szMember", O.Length(128,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[String] = column[String]("cdMemberTo", O.Length(10,varying=false))
    /** Database column szMemberTo DBType(char), Length(128,false) */
    val szmemberto: Column[String] = column[String]("szMemberTo", O.Length(128,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column szMail DBType(nchar), Length(128,false) */
    val szmail: Column[String] = column[String]("szMail", O.Length(128,varying=false))
    /** Database column isSend DBType(char), Length(1,false) */
    val issend: Column[String] = column[String]("isSend", O.Length(1,varying=false))
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[String] = column[String]("cdStatus", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[String] = column[String]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[String] = column[String]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtModify")
  }
  /** Collection-like TableQuery object for table TblbonusnetdataLog */
  lazy val TblbonusnetdataLog = new TableQuery(tag => new TblbonusnetdataLog(tag))
  
  /** Entity class storing rows of table Tblbonusreport00
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param szitem000 Database column szItem000 DBType(int)
   *  @param szitem001 Database column szItem001 DBType(nvarchar), Length(50,true)
   *  @param szitem002 Database column szItem002 DBType(int)
   *  @param szitem003 Database column szItem003 DBType(int)
   *  @param szitem004 Database column szItem004 DBType(int)
   *  @param szitem005 Database column szItem005 DBType(int)
   *  @param szitem006 Database column szItem006 DBType(int)
   *  @param szitem007 Database column szItem007 DBType(int)
   *  @param szitem008 Database column szItem008 DBType(int)
   *  @param szitem009 Database column szItem009 DBType(int)
   *  @param szitem010 Database column szItem010 DBType(int)
   *  @param szitem011 Database column szItem011 DBType(int)
   *  @param szitem012 Database column szItem012 DBType(int)
   *  @param szitem003net Database column szItem003Net DBType(int), Default(Some(0))
   *  @param szitem004net Database column szItem004Net DBType(int), Default(Some(0))
   *  @param szitem005net Database column szItem005Net DBType(int), Default(Some(0))
   *  @param szitem006net Database column szItem006Net DBType(int), Default(Some(0)) */
  case class Tblbonusreport00Row(cdbonuscode: String, cdmember: String, cdpersa: String, szitem000: Int, szitem001: String, szitem002: Int, szitem003: Int, szitem004: Int, szitem005: Int, szitem006: Int, szitem007: Int, szitem008: Int, szitem009: Int, szitem010: Int, szitem011: Int, szitem012: Int, szitem003net: Option[Int] = Some(0), szitem004net: Option[Int] = Some(0), szitem005net: Option[Int] = Some(0), szitem006net: Option[Int] = Some(0))
  /** GetResult implicit for fetching Tblbonusreport00Row objects using plain SQL queries */
  implicit def GetResultTblbonusreport00Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[Int]]): GR[Tblbonusreport00Row] = GR{
    prs => import prs._
    Tblbonusreport00Row.tupled((<<[String], <<[String], <<[String], <<[Int], <<[String], <<[Int], <<[Int], <<[Int], <<[Int], <<[Int], <<[Int], <<[Int], <<[Int], <<[Int], <<[Int], <<[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int]))
  }
  /** Table description of table tblBonusReport00. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusreport00(_tableTag: Tag) extends Table[Tblbonusreport00Row](_tableTag, Some("dbo"), "tblBonusReport00") {
    def * = (cdbonuscode, cdmember, cdpersa, szitem000, szitem001, szitem002, szitem003, szitem004, szitem005, szitem006, szitem007, szitem008, szitem009, szitem010, szitem011, szitem012, szitem003net, szitem004net, szitem005net, szitem006net) <> (Tblbonusreport00Row.tupled, Tblbonusreport00Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdbonuscode.?, cdmember.?, cdpersa.?, szitem000.?, szitem001.?, szitem002.?, szitem003.?, szitem004.?, szitem005.?, szitem006.?, szitem007.?, szitem008.?, szitem009.?, szitem010.?, szitem011.?, szitem012.?, szitem003net, szitem004net, szitem005net, szitem006net).shaped.<>({r=>import r._; _1.map(_=> Tblbonusreport00Row.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10.get, _11.get, _12.get, _13.get, _14.get, _15.get, _16.get, _17, _18, _19, _20)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column szItem000 DBType(int) */
    val szitem000: Column[Int] = column[Int]("szItem000")
    /** Database column szItem001 DBType(nvarchar), Length(50,true) */
    val szitem001: Column[String] = column[String]("szItem001", O.Length(50,varying=true))
    /** Database column szItem002 DBType(int) */
    val szitem002: Column[Int] = column[Int]("szItem002")
    /** Database column szItem003 DBType(int) */
    val szitem003: Column[Int] = column[Int]("szItem003")
    /** Database column szItem004 DBType(int) */
    val szitem004: Column[Int] = column[Int]("szItem004")
    /** Database column szItem005 DBType(int) */
    val szitem005: Column[Int] = column[Int]("szItem005")
    /** Database column szItem006 DBType(int) */
    val szitem006: Column[Int] = column[Int]("szItem006")
    /** Database column szItem007 DBType(int) */
    val szitem007: Column[Int] = column[Int]("szItem007")
    /** Database column szItem008 DBType(int) */
    val szitem008: Column[Int] = column[Int]("szItem008")
    /** Database column szItem009 DBType(int) */
    val szitem009: Column[Int] = column[Int]("szItem009")
    /** Database column szItem010 DBType(int) */
    val szitem010: Column[Int] = column[Int]("szItem010")
    /** Database column szItem011 DBType(int) */
    val szitem011: Column[Int] = column[Int]("szItem011")
    /** Database column szItem012 DBType(int) */
    val szitem012: Column[Int] = column[Int]("szItem012")
    /** Database column szItem003Net DBType(int), Default(Some(0)) */
    val szitem003net: Column[Option[Int]] = column[Option[Int]]("szItem003Net", O.Default(Some(0)))
    /** Database column szItem004Net DBType(int), Default(Some(0)) */
    val szitem004net: Column[Option[Int]] = column[Option[Int]]("szItem004Net", O.Default(Some(0)))
    /** Database column szItem005Net DBType(int), Default(Some(0)) */
    val szitem005net: Column[Option[Int]] = column[Option[Int]]("szItem005Net", O.Default(Some(0)))
    /** Database column szItem006Net DBType(int), Default(Some(0)) */
    val szitem006net: Column[Option[Int]] = column[Option[Int]]("szItem006Net", O.Default(Some(0)))
  }
  /** Collection-like TableQuery object for table Tblbonusreport00 */
  lazy val Tblbonusreport00 = new TableQuery(tag => new Tblbonusreport00(tag))
  
  /** Row type of table Tblbonusreport01 */
  type Tblbonusreport01Row = HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblbonusreport01Row providing default values if available in the database schema. */
  def Tblbonusreport01Row(cdbonuscode: String, cdmember: String, cdpersa: String, szitem101: Option[String], szitem103: Option[String], szitem104: Option[String], szitem105: Option[String], szitem106: Option[String], szitem107: Option[String], szitem108: Option[String], szitem109: Option[String], szitem110: Option[String], szitem111: Option[String], szitem112: Option[String], szitem114: Option[String], szitem115: Option[String], szitem116: Option[String], szitem117: Option[String], szitem118: Option[String], szitem119: Option[String], szitem120: Option[String], szitem121: Option[String], szitem122: Option[String], szitem123: Option[String], szitem124: Option[String], szitem125: Option[String], szitem126: Option[String], szitem127: Option[String], szitem128: Option[String], szitem129: Option[String], szitem130: Option[String], szitem131: Option[String], szitem132: Option[String], szitem133: Option[String], szitem134: Option[String], szitem135: Option[String], idreport02: Option[String], idreport03: Option[String], idreport04: Option[String], idreport05: Option[String]): Tblbonusreport01Row = {
    cdbonuscode :: cdmember :: cdpersa :: szitem101 :: szitem103 :: szitem104 :: szitem105 :: szitem106 :: szitem107 :: szitem108 :: szitem109 :: szitem110 :: szitem111 :: szitem112 :: szitem114 :: szitem115 :: szitem116 :: szitem117 :: szitem118 :: szitem119 :: szitem120 :: szitem121 :: szitem122 :: szitem123 :: szitem124 :: szitem125 :: szitem126 :: szitem127 :: szitem128 :: szitem129 :: szitem130 :: szitem131 :: szitem132 :: szitem133 :: szitem134 :: szitem135 :: idreport02 :: idreport03 :: idreport04 :: idreport05 :: HNil
  }
  /** GetResult implicit for fetching Tblbonusreport01Row objects using plain SQL queries */
  implicit def GetResultTblbonusreport01Row(implicit e0: GR[String], e1: GR[Option[String]]): GR[Tblbonusreport01Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblBonusReport01. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusreport01(_tableTag: Tag) extends Table[Tblbonusreport01Row](_tableTag, Some("dbo"), "tblBonusReport01") {
    def * = cdbonuscode :: cdmember :: cdpersa :: szitem101 :: szitem103 :: szitem104 :: szitem105 :: szitem106 :: szitem107 :: szitem108 :: szitem109 :: szitem110 :: szitem111 :: szitem112 :: szitem114 :: szitem115 :: szitem116 :: szitem117 :: szitem118 :: szitem119 :: szitem120 :: szitem121 :: szitem122 :: szitem123 :: szitem124 :: szitem125 :: szitem126 :: szitem127 :: szitem128 :: szitem129 :: szitem130 :: szitem131 :: szitem132 :: szitem133 :: szitem134 :: szitem135 :: idreport02 :: idreport03 :: idreport04 :: idreport05 :: HNil
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column szItem101 DBType(nvarchar), Length(10,true) */
    val szitem101: Column[Option[String]] = column[Option[String]]("szItem101", O.Length(10,varying=true))
    /** Database column szItem103 DBType(nvarchar), Length(6,true) */
    val szitem103: Column[Option[String]] = column[Option[String]]("szItem103", O.Length(6,varying=true))
    /** Database column szItem104 DBType(nvarchar), Length(255,true) */
    val szitem104: Column[Option[String]] = column[Option[String]]("szItem104", O.Length(255,varying=true))
    /** Database column szItem105 DBType(nvarchar), Length(128,true) */
    val szitem105: Column[Option[String]] = column[Option[String]]("szItem105", O.Length(128,varying=true))
    /** Database column szItem106 DBType(nvarchar), Length(50,true) */
    val szitem106: Column[Option[String]] = column[Option[String]]("szItem106", O.Length(50,varying=true))
    /** Database column szItem107 DBType(nvarchar), Length(50,true) */
    val szitem107: Column[Option[String]] = column[Option[String]]("szItem107", O.Length(50,varying=true))
    /** Database column szItem108 DBType(nvarchar), Length(15,true) */
    val szitem108: Column[Option[String]] = column[Option[String]]("szItem108", O.Length(15,varying=true))
    /** Database column szItem109 DBType(nvarchar), Length(15,true) */
    val szitem109: Column[Option[String]] = column[Option[String]]("szItem109", O.Length(15,varying=true))
    /** Database column szItem110 DBType(nvarchar), Length(15,true) */
    val szitem110: Column[Option[String]] = column[Option[String]]("szItem110", O.Length(15,varying=true))
    /** Database column szItem111 DBType(nvarchar), Length(15,true) */
    val szitem111: Column[Option[String]] = column[Option[String]]("szItem111", O.Length(15,varying=true))
    /** Database column szItem112 DBType(nvarchar), Length(15,true) */
    val szitem112: Column[Option[String]] = column[Option[String]]("szItem112", O.Length(15,varying=true))
    /** Database column szItem114 DBType(nvarchar), Length(10,true) */
    val szitem114: Column[Option[String]] = column[Option[String]]("szItem114", O.Length(10,varying=true))
    /** Database column szItem115 DBType(nvarchar), Length(128,true) */
    val szitem115: Column[Option[String]] = column[Option[String]]("szItem115", O.Length(128,varying=true))
    /** Database column szItem116 DBType(nvarchar), Length(10,true) */
    val szitem116: Column[Option[String]] = column[Option[String]]("szItem116", O.Length(10,varying=true))
    /** Database column szItem117 DBType(nvarchar), Length(128,true) */
    val szitem117: Column[Option[String]] = column[Option[String]]("szItem117", O.Length(128,varying=true))
    /** Database column szItem118 DBType(nvarchar), Length(128,true) */
    val szitem118: Column[Option[String]] = column[Option[String]]("szItem118", O.Length(128,varying=true))
    /** Database column szItem119 DBType(nvarchar), Length(128,true) */
    val szitem119: Column[Option[String]] = column[Option[String]]("szItem119", O.Length(128,varying=true))
    /** Database column szItem120 DBType(nvarchar), Length(128,true) */
    val szitem120: Column[Option[String]] = column[Option[String]]("szItem120", O.Length(128,varying=true))
    /** Database column szItem121 DBType(nvarchar), Length(15,true) */
    val szitem121: Column[Option[String]] = column[Option[String]]("szItem121", O.Length(15,varying=true))
    /** Database column szItem122 DBType(nvarchar), Length(15,true) */
    val szitem122: Column[Option[String]] = column[Option[String]]("szItem122", O.Length(15,varying=true))
    /** Database column szItem123 DBType(nvarchar), Length(15,true) */
    val szitem123: Column[Option[String]] = column[Option[String]]("szItem123", O.Length(15,varying=true))
    /** Database column szItem124 DBType(nvarchar), Length(15,true) */
    val szitem124: Column[Option[String]] = column[Option[String]]("szItem124", O.Length(15,varying=true))
    /** Database column szItem125 DBType(nvarchar), Length(15,true) */
    val szitem125: Column[Option[String]] = column[Option[String]]("szItem125", O.Length(15,varying=true))
    /** Database column szItem126 DBType(nvarchar), Length(128,true) */
    val szitem126: Column[Option[String]] = column[Option[String]]("szItem126", O.Length(128,varying=true))
    /** Database column szItem127 DBType(nvarchar), Length(128,true) */
    val szitem127: Column[Option[String]] = column[Option[String]]("szItem127", O.Length(128,varying=true))
    /** Database column szItem128 DBType(nvarchar), Length(128,true) */
    val szitem128: Column[Option[String]] = column[Option[String]]("szItem128", O.Length(128,varying=true))
    /** Database column szItem129 DBType(nvarchar), Length(128,true) */
    val szitem129: Column[Option[String]] = column[Option[String]]("szItem129", O.Length(128,varying=true))
    /** Database column szItem130 DBType(nvarchar), Length(256,true) */
    val szitem130: Column[Option[String]] = column[Option[String]]("szItem130", O.Length(256,varying=true))
    /** Database column szItem131 DBType(nvarchar), Length(128,true) */
    val szitem131: Column[Option[String]] = column[Option[String]]("szItem131", O.Length(128,varying=true))
    /** Database column szItem132 DBType(nvarchar), Length(128,true) */
    val szitem132: Column[Option[String]] = column[Option[String]]("szItem132", O.Length(128,varying=true))
    /** Database column szItem133 DBType(nvarchar), Length(128,true) */
    val szitem133: Column[Option[String]] = column[Option[String]]("szItem133", O.Length(128,varying=true))
    /** Database column szItem134 DBType(nvarchar), Length(128,true) */
    val szitem134: Column[Option[String]] = column[Option[String]]("szItem134", O.Length(128,varying=true))
    /** Database column szItem135 DBType(nvarchar), Length(128,true) */
    val szitem135: Column[Option[String]] = column[Option[String]]("szItem135", O.Length(128,varying=true))
    /** Database column idReport02 DBType(char), Length(1,false) */
    val idreport02: Column[Option[String]] = column[Option[String]]("idReport02", O.Length(1,varying=false))
    /** Database column idReport03 DBType(char), Length(1,false) */
    val idreport03: Column[Option[String]] = column[Option[String]]("idReport03", O.Length(1,varying=false))
    /** Database column idReport04 DBType(char), Length(1,false) */
    val idreport04: Column[Option[String]] = column[Option[String]]("idReport04", O.Length(1,varying=false))
    /** Database column idReport05 DBType(char), Length(1,false) */
    val idreport05: Column[Option[String]] = column[Option[String]]("idReport05", O.Length(1,varying=false))
  }
  /** Collection-like TableQuery object for table Tblbonusreport01 */
  lazy val Tblbonusreport01 = new TableQuery(tag => new Tblbonusreport01(tag))
  
  /** Entity class storing rows of table Tblbonusreport02
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param szitem201 Database column szItem201 DBType(int)
   *  @param szitem202 Database column szItem202 DBType(nvarchar), Length(128,true)
   *  @param szitem203 Database column szItem203 DBType(nvarchar), Length(4,true)
   *  @param szitem204 Database column szItem204 DBType(nvarchar), Length(50,true)
   *  @param szitem205 Database column szItem205 DBType(nvarchar), Length(15,true)
   *  @param szitem206 Database column szItem206 DBType(nvarchar), Length(10,true)
   *  @param szitem207 Database column szItem207 DBType(nvarchar), Length(15,true)
   *  @param szitem208 Database column szItem208 DBType(nvarchar), Length(50,true) */
  case class Tblbonusreport02Row(cdbonuscode: String, cdmember: String, cdpersa: String, szitem201: Int, szitem202: Option[String], szitem203: Option[String], szitem204: Option[String], szitem205: Option[String], szitem206: Option[String], szitem207: Option[String], szitem208: Option[String])
  /** GetResult implicit for fetching Tblbonusreport02Row objects using plain SQL queries */
  implicit def GetResultTblbonusreport02Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]]): GR[Tblbonusreport02Row] = GR{
    prs => import prs._
    Tblbonusreport02Row.tupled((<<[String], <<[String], <<[String], <<[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblBonusReport02. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusreport02(_tableTag: Tag) extends Table[Tblbonusreport02Row](_tableTag, Some("dbo"), "tblBonusReport02") {
    def * = (cdbonuscode, cdmember, cdpersa, szitem201, szitem202, szitem203, szitem204, szitem205, szitem206, szitem207, szitem208) <> (Tblbonusreport02Row.tupled, Tblbonusreport02Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdbonuscode.?, cdmember.?, cdpersa.?, szitem201.?, szitem202, szitem203, szitem204, szitem205, szitem206, szitem207, szitem208).shaped.<>({r=>import r._; _1.map(_=> Tblbonusreport02Row.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column szItem201 DBType(int) */
    val szitem201: Column[Int] = column[Int]("szItem201")
    /** Database column szItem202 DBType(nvarchar), Length(128,true) */
    val szitem202: Column[Option[String]] = column[Option[String]]("szItem202", O.Length(128,varying=true))
    /** Database column szItem203 DBType(nvarchar), Length(4,true) */
    val szitem203: Column[Option[String]] = column[Option[String]]("szItem203", O.Length(4,varying=true))
    /** Database column szItem204 DBType(nvarchar), Length(50,true) */
    val szitem204: Column[Option[String]] = column[Option[String]]("szItem204", O.Length(50,varying=true))
    /** Database column szItem205 DBType(nvarchar), Length(15,true) */
    val szitem205: Column[Option[String]] = column[Option[String]]("szItem205", O.Length(15,varying=true))
    /** Database column szItem206 DBType(nvarchar), Length(10,true) */
    val szitem206: Column[Option[String]] = column[Option[String]]("szItem206", O.Length(10,varying=true))
    /** Database column szItem207 DBType(nvarchar), Length(15,true) */
    val szitem207: Column[Option[String]] = column[Option[String]]("szItem207", O.Length(15,varying=true))
    /** Database column szItem208 DBType(nvarchar), Length(50,true) */
    val szitem208: Column[Option[String]] = column[Option[String]]("szItem208", O.Length(50,varying=true))
  }
  /** Collection-like TableQuery object for table Tblbonusreport02 */
  lazy val Tblbonusreport02 = new TableQuery(tag => new Tblbonusreport02(tag))
  
  /** Entity class storing rows of table Tblbonusreport03
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param szitem301 Database column szItem301 DBType(int)
   *  @param szitem302 Database column szItem302 DBType(nvarchar), Length(128,true)
   *  @param szitem303 Database column szItem303 DBType(nvarchar), Length(4,true)
   *  @param szitem304 Database column szItem304 DBType(nvarchar), Length(50,true)
   *  @param szitem305 Database column szItem305 DBType(nvarchar), Length(15,true)
   *  @param szitem306 Database column szItem306 DBType(nvarchar), Length(10,true)
   *  @param szitem307 Database column szItem307 DBType(nvarchar), Length(15,true)
   *  @param szitem308 Database column szItem308 DBType(nvarchar), Length(50,true)
   *  @param szitem309 Database column szItem309 DBType(nvarchar), Length(50,true) */
  case class Tblbonusreport03Row(cdbonuscode: String, cdmember: String, cdpersa: String, szitem301: Int, szitem302: Option[String], szitem303: Option[String], szitem304: Option[String], szitem305: Option[String], szitem306: Option[String], szitem307: Option[String], szitem308: Option[String], szitem309: Option[String])
  /** GetResult implicit for fetching Tblbonusreport03Row objects using plain SQL queries */
  implicit def GetResultTblbonusreport03Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]]): GR[Tblbonusreport03Row] = GR{
    prs => import prs._
    Tblbonusreport03Row.tupled((<<[String], <<[String], <<[String], <<[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblBonusReport03. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusreport03(_tableTag: Tag) extends Table[Tblbonusreport03Row](_tableTag, Some("dbo"), "tblBonusReport03") {
    def * = (cdbonuscode, cdmember, cdpersa, szitem301, szitem302, szitem303, szitem304, szitem305, szitem306, szitem307, szitem308, szitem309) <> (Tblbonusreport03Row.tupled, Tblbonusreport03Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdbonuscode.?, cdmember.?, cdpersa.?, szitem301.?, szitem302, szitem303, szitem304, szitem305, szitem306, szitem307, szitem308, szitem309).shaped.<>({r=>import r._; _1.map(_=> Tblbonusreport03Row.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column szItem301 DBType(int) */
    val szitem301: Column[Int] = column[Int]("szItem301")
    /** Database column szItem302 DBType(nvarchar), Length(128,true) */
    val szitem302: Column[Option[String]] = column[Option[String]]("szItem302", O.Length(128,varying=true))
    /** Database column szItem303 DBType(nvarchar), Length(4,true) */
    val szitem303: Column[Option[String]] = column[Option[String]]("szItem303", O.Length(4,varying=true))
    /** Database column szItem304 DBType(nvarchar), Length(50,true) */
    val szitem304: Column[Option[String]] = column[Option[String]]("szItem304", O.Length(50,varying=true))
    /** Database column szItem305 DBType(nvarchar), Length(15,true) */
    val szitem305: Column[Option[String]] = column[Option[String]]("szItem305", O.Length(15,varying=true))
    /** Database column szItem306 DBType(nvarchar), Length(10,true) */
    val szitem306: Column[Option[String]] = column[Option[String]]("szItem306", O.Length(10,varying=true))
    /** Database column szItem307 DBType(nvarchar), Length(15,true) */
    val szitem307: Column[Option[String]] = column[Option[String]]("szItem307", O.Length(15,varying=true))
    /** Database column szItem308 DBType(nvarchar), Length(50,true) */
    val szitem308: Column[Option[String]] = column[Option[String]]("szItem308", O.Length(50,varying=true))
    /** Database column szItem309 DBType(nvarchar), Length(50,true) */
    val szitem309: Column[Option[String]] = column[Option[String]]("szItem309", O.Length(50,varying=true))
  }
  /** Collection-like TableQuery object for table Tblbonusreport03 */
  lazy val Tblbonusreport03 = new TableQuery(tag => new Tblbonusreport03(tag))
  
  /** Entity class storing rows of table Tblbonusreport04
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param szitem401 Database column szItem401 DBType(int)
   *  @param szitem402 Database column szItem402 DBType(nvarchar), Length(128,true)
   *  @param szitem403 Database column szItem403 DBType(nvarchar), Length(4,true)
   *  @param szitem404 Database column szItem404 DBType(nvarchar), Length(15,true)
   *  @param szitem405 Database column szItem405 DBType(nvarchar), Length(10,true)
   *  @param szitem406 Database column szItem406 DBType(nvarchar), Length(15,true)
   *  @param szitem407 Database column szItem407 DBType(nvarchar), Length(50,true) */
  case class Tblbonusreport04Row(cdbonuscode: String, cdmember: String, cdpersa: String, szitem401: Int, szitem402: Option[String], szitem403: Option[String], szitem404: Option[String], szitem405: Option[String], szitem406: Option[String], szitem407: Option[String])
  /** GetResult implicit for fetching Tblbonusreport04Row objects using plain SQL queries */
  implicit def GetResultTblbonusreport04Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]]): GR[Tblbonusreport04Row] = GR{
    prs => import prs._
    Tblbonusreport04Row.tupled((<<[String], <<[String], <<[String], <<[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblBonusReport04. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusreport04(_tableTag: Tag) extends Table[Tblbonusreport04Row](_tableTag, Some("dbo"), "tblBonusReport04") {
    def * = (cdbonuscode, cdmember, cdpersa, szitem401, szitem402, szitem403, szitem404, szitem405, szitem406, szitem407) <> (Tblbonusreport04Row.tupled, Tblbonusreport04Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdbonuscode.?, cdmember.?, cdpersa.?, szitem401.?, szitem402, szitem403, szitem404, szitem405, szitem406, szitem407).shaped.<>({r=>import r._; _1.map(_=> Tblbonusreport04Row.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column szItem401 DBType(int) */
    val szitem401: Column[Int] = column[Int]("szItem401")
    /** Database column szItem402 DBType(nvarchar), Length(128,true) */
    val szitem402: Column[Option[String]] = column[Option[String]]("szItem402", O.Length(128,varying=true))
    /** Database column szItem403 DBType(nvarchar), Length(4,true) */
    val szitem403: Column[Option[String]] = column[Option[String]]("szItem403", O.Length(4,varying=true))
    /** Database column szItem404 DBType(nvarchar), Length(15,true) */
    val szitem404: Column[Option[String]] = column[Option[String]]("szItem404", O.Length(15,varying=true))
    /** Database column szItem405 DBType(nvarchar), Length(10,true) */
    val szitem405: Column[Option[String]] = column[Option[String]]("szItem405", O.Length(10,varying=true))
    /** Database column szItem406 DBType(nvarchar), Length(15,true) */
    val szitem406: Column[Option[String]] = column[Option[String]]("szItem406", O.Length(15,varying=true))
    /** Database column szItem407 DBType(nvarchar), Length(50,true) */
    val szitem407: Column[Option[String]] = column[Option[String]]("szItem407", O.Length(50,varying=true))
  }
  /** Collection-like TableQuery object for table Tblbonusreport04 */
  lazy val Tblbonusreport04 = new TableQuery(tag => new Tblbonusreport04(tag))
  
  /** Entity class storing rows of table Tblbonusreport05
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param szitem501 Database column szItem501 DBType(int)
   *  @param szitem502 Database column szItem502 DBType(nvarchar), Length(10,true)
   *  @param szitem503 Database column szItem503 DBType(nvarchar), Length(15,true)
   *  @param szitem504 Database column szItem504 DBType(nvarchar), Length(15,true)
   *  @param szitem505 Database column szItem505 DBType(nvarchar), Length(15,true)
   *  @param szitem506 Database column szItem506 DBType(nvarchar), Length(15,true)
   *  @param szitem507 Database column szItem507 DBType(nvarchar), Length(50,true) */
  case class Tblbonusreport05Row(cdbonuscode: String, cdmember: String, cdpersa: String, szitem501: Int, szitem502: Option[String], szitem503: Option[String], szitem504: Option[String], szitem505: Option[String], szitem506: Option[String], szitem507: Option[String])
  /** GetResult implicit for fetching Tblbonusreport05Row objects using plain SQL queries */
  implicit def GetResultTblbonusreport05Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]]): GR[Tblbonusreport05Row] = GR{
    prs => import prs._
    Tblbonusreport05Row.tupled((<<[String], <<[String], <<[String], <<[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblBonusReport05. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonusreport05(_tableTag: Tag) extends Table[Tblbonusreport05Row](_tableTag, Some("dbo"), "tblBonusReport05") {
    def * = (cdbonuscode, cdmember, cdpersa, szitem501, szitem502, szitem503, szitem504, szitem505, szitem506, szitem507) <> (Tblbonusreport05Row.tupled, Tblbonusreport05Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdbonuscode.?, cdmember.?, cdpersa.?, szitem501.?, szitem502, szitem503, szitem504, szitem505, szitem506, szitem507).shaped.<>({r=>import r._; _1.map(_=> Tblbonusreport05Row.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column szItem501 DBType(int) */
    val szitem501: Column[Int] = column[Int]("szItem501")
    /** Database column szItem502 DBType(nvarchar), Length(10,true) */
    val szitem502: Column[Option[String]] = column[Option[String]]("szItem502", O.Length(10,varying=true))
    /** Database column szItem503 DBType(nvarchar), Length(15,true) */
    val szitem503: Column[Option[String]] = column[Option[String]]("szItem503", O.Length(15,varying=true))
    /** Database column szItem504 DBType(nvarchar), Length(15,true) */
    val szitem504: Column[Option[String]] = column[Option[String]]("szItem504", O.Length(15,varying=true))
    /** Database column szItem505 DBType(nvarchar), Length(15,true) */
    val szitem505: Column[Option[String]] = column[Option[String]]("szItem505", O.Length(15,varying=true))
    /** Database column szItem506 DBType(nvarchar), Length(15,true) */
    val szitem506: Column[Option[String]] = column[Option[String]]("szItem506", O.Length(15,varying=true))
    /** Database column szItem507 DBType(nvarchar), Length(50,true) */
    val szitem507: Column[Option[String]] = column[Option[String]]("szItem507", O.Length(50,varying=true))
  }
  /** Collection-like TableQuery object for table Tblbonusreport05 */
  lazy val Tblbonusreport05 = new TableQuery(tag => new Tblbonusreport05(tag))
  
  /** Entity class storing rows of table Tblbonussetup
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdbonuscode Database column cdBonusCode DBType(char), PrimaryKey, Length(10,false)
   *  @param szbonusyear Database column szBonusYear DBType(char), Length(4,false)
   *  @param szbonusmonth Database column szBonusMonth DBType(char), Length(2,false)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false), Default(1)
   *  @param issale Database column isSale DBType(bit), Default(false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp)
   *  @param cdlastbonus Database column cdLastBonus DBType(char), Length(10,false)
   *  @param cdnextbonus Database column cdNextBonus DBType(char), Length(10,false)
   *  @param dtpaydate Database column dtPayDate DBType(datetime)
   *  @param cdbonus Database column cdBonus DBType(char), Length(1,false)
   *  @param itoaccount Database column iToAccount DBType(int)
   *  @param cdcumpvbonuscode Database column cdCumPvBonusCode DBType(varchar), Length(10,true), Default(Some()) */
  case class TblbonussetupRow(uid: String, cdbonuscode: String, szbonusyear: String, szbonusmonth: String, cdstatus: String = "1", issale: Boolean = false, dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdlastbonus: Option[String], cdnextbonus: Option[String], dtpaydate: Option[java.sql.Timestamp], cdbonus: Option[String], itoaccount: Option[Int], cdcumpvbonuscode: Option[String] = Some(""))
  /** GetResult implicit for fetching TblbonussetupRow objects using plain SQL queries */
  implicit def GetResultTblbonussetupRow(implicit e0: GR[String], e1: GR[Boolean], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[String]], e4: GR[Option[java.sql.Blob]], e5: GR[Option[Int]]): GR[TblbonussetupRow] = GR{
    prs => import prs._
    TblbonussetupRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[String], <<[Boolean], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[Int], <<?[String]))
  }
  /** Table description of table tblBonusSetup. Objects of this class serve as prototypes for rows in queries. */
  class Tblbonussetup(_tableTag: Tag) extends Table[TblbonussetupRow](_tableTag, Some("dbo"), "tblBonusSetup") {
    def * = (uid, cdbonuscode, szbonusyear, szbonusmonth, cdstatus, issale, dtstrdate, dtenddate, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdlastbonus, cdnextbonus, dtpaydate, cdbonus, itoaccount, cdcumpvbonuscode) <> (TblbonussetupRow.tupled, TblbonussetupRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdbonuscode.?, szbonusyear.?, szbonusmonth.?, cdstatus.?, issale.?, dtstrdate, dtenddate, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdlastbonus, cdnextbonus, dtpaydate, cdbonus, itoaccount, cdcumpvbonuscode).shaped.<>({r=>import r._; _1.map(_=> TblbonussetupRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdBonusCode DBType(char), PrimaryKey, Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[String] = column[String]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[String] = column[String]("szBonusMonth", O.Length(2,varying=false))
    /** Database column cdStatus DBType(char), Length(1,false), Default(1) */
    val cdstatus: Column[String] = column[String]("cdStatus", O.Length(1,varying=false), O.Default("1"))
    /** Database column isSale DBType(bit), Default(false) */
    val issale: Column[Boolean] = column[Boolean]("isSale", O.Default(false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdLastBonus DBType(char), Length(10,false) */
    val cdlastbonus: Column[Option[String]] = column[Option[String]]("cdLastBonus", O.Length(10,varying=false))
    /** Database column cdNextBonus DBType(char), Length(10,false) */
    val cdnextbonus: Column[Option[String]] = column[Option[String]]("cdNextBonus", O.Length(10,varying=false))
    /** Database column dtPayDate DBType(datetime) */
    val dtpaydate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPayDate")
    /** Database column cdBonus DBType(char), Length(1,false) */
    val cdbonus: Column[Option[String]] = column[Option[String]]("cdBonus", O.Length(1,varying=false))
    /** Database column iToAccount DBType(int) */
    val itoaccount: Column[Option[Int]] = column[Option[Int]]("iToAccount")
    /** Database column cdCumPvBonusCode DBType(varchar), Length(10,true), Default(Some()) */
    val cdcumpvbonuscode: Column[Option[String]] = column[Option[String]]("cdCumPvBonusCode", O.Length(10,varying=true), O.Default(Some("")))
    
    /** Index over (cdstatus) (database name IX_tblBonusSetup) */
    val index1 = index("IX_tblBonusSetup", cdstatus)
  }
  /** Collection-like TableQuery object for table Tblbonussetup */
  lazy val Tblbonussetup = new TableQuery(tag => new Tblbonussetup(tag))
  
  /** Entity class storing rows of table Tblbranch
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdbank Database column cdBank DBType(char), Length(10,false)
   *  @param cdbranch Database column cdBranch DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblbranchRow(uid: String, cdbank: String, cdbranch: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblbranchRow objects using plain SQL queries */
  implicit def GetResultTblbranchRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblbranchRow] = GR{
    prs => import prs._
    TblbranchRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblBranch. Objects of this class serve as prototypes for rows in queries. */
  class Tblbranch(_tableTag: Tag) extends Table[TblbranchRow](_tableTag, Some("dbo"), "tblBranch") {
    def * = (uid, cdbank, cdbranch, uidcreator, dtcreate, byts) <> (TblbranchRow.tupled, TblbranchRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdbank.?, cdbranch.?, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblbranchRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdBank DBType(char), Length(10,false) */
    val cdbank: Column[String] = column[String]("cdBank", O.Length(10,varying=false))
    /** Database column cdBranch DBType(char), Length(10,false) */
    val cdbranch: Column[String] = column[String]("cdBranch", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblbranch (database name PK_tblBranch) */
    val pk = primaryKey("PK_tblBranch", (cdbank, cdbranch))
  }
  /** Collection-like TableQuery object for table Tblbranch */
  lazy val Tblbranch = new TableQuery(tag => new Tblbranch(tag))
  
  /** Entity class storing rows of table Tblbranchd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidbranch Database column uidBranch DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szbranch Database column szBranch DBType(nchar), Length(128,false)
   *  @param szaddr Database column szAddr DBType(nchar), Length(256,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblbranchdRow(uid: String, uidbranch: String, cdlanguage: String, szbranch: Option[String], szaddr: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblbranchdRow objects using plain SQL queries */
  implicit def GetResultTblbranchdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblbranchdRow] = GR{
    prs => import prs._
    TblbranchdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblBranchD. Objects of this class serve as prototypes for rows in queries. */
  class Tblbranchd(_tableTag: Tag) extends Table[TblbranchdRow](_tableTag, Some("dbo"), "tblBranchD") {
    def * = (uid, uidbranch, cdlanguage, szbranch, szaddr, uidmodifier, dtmodify) <> (TblbranchdRow.tupled, TblbranchdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidbranch.?, cdlanguage.?, szbranch, szaddr, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblbranchdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidBranch DBType(uniqueidentifier), Length(36,false) */
    val uidbranch: Column[String] = column[String]("uidBranch", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szBranch DBType(nchar), Length(128,false) */
    val szbranch: Column[Option[String]] = column[Option[String]]("szBranch", O.Length(128,varying=false))
    /** Database column szAddr DBType(nchar), Length(256,false) */
    val szaddr: Column[Option[String]] = column[Option[String]]("szAddr", O.Length(256,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblbranchd (database name PK_tblBranchD) */
    val pk = primaryKey("PK_tblBranchD", (uidbranch, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblbranchd */
  lazy val Tblbranchd = new TableQuery(tag => new Tblbranchd(tag))
  
  /** Row type of table Tblcallcenter */
  type TblcallcenterRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblcallcenterRow providing default values if available in the database schema. */
  def TblcallcenterRow(uid: String, cdcaseno: String, cdcasetype: String, cdcasestep: String = "1", cdcusttype: String, cdcustno: Option[String], szcustname: String, cdsex: String, sztel: Option[String], sztel2: Option[String], cdcountry: Option[String], cdarea: Option[String], cdcity: Option[String], szaddr: Option[String], cdprodtype: Option[String], cdprodsubtype: Option[String], cdproditem: Option[String], szproddesc: Option[String], szhandle: Option[String], cdsource: String, cdagencyno: Option[String], cdstation: Option[String], cdservicestation: Option[String], cdresult: Option[String] = Some("0"), dtassign: Option[java.sql.Timestamp], uidassignman: Option[String], cdsatisfactory: Option[String] = Some(""), isinvalid: Option[Boolean] = Some(false), dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): TblcallcenterRow = {
    uid :: cdcaseno :: cdcasetype :: cdcasestep :: cdcusttype :: cdcustno :: szcustname :: cdsex :: sztel :: sztel2 :: cdcountry :: cdarea :: cdcity :: szaddr :: cdprodtype :: cdprodsubtype :: cdproditem :: szproddesc :: szhandle :: cdsource :: cdagencyno :: cdstation :: cdservicestation :: cdresult :: dtassign :: uidassignman :: cdsatisfactory :: isinvalid :: dtstrdate :: dtenddate :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching TblcallcenterRow objects using plain SQL queries */
  implicit def GetResultTblcallcenterRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]]): GR[TblcallcenterRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblCallCenter. Objects of this class serve as prototypes for rows in queries. */
  class Tblcallcenter(_tableTag: Tag) extends Table[TblcallcenterRow](_tableTag, Some("dbo"), "tblCallCenter") {
    def * = uid :: cdcaseno :: cdcasetype :: cdcasestep :: cdcusttype :: cdcustno :: szcustname :: cdsex :: sztel :: sztel2 :: cdcountry :: cdarea :: cdcity :: szaddr :: cdprodtype :: cdprodsubtype :: cdproditem :: szproddesc :: szhandle :: cdsource :: cdagencyno :: cdstation :: cdservicestation :: cdresult :: dtassign :: uidassignman :: cdsatisfactory :: isinvalid :: dtstrdate :: dtenddate :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdCaseNo DBType(char), Length(10,false) */
    val cdcaseno: Column[String] = column[String]("cdCaseNo", O.Length(10,varying=false))
    /** Database column cdCaseType DBType(char), Length(1,false) */
    val cdcasetype: Column[String] = column[String]("cdCaseType", O.Length(1,varying=false))
    /** Database column cdCaseStep DBType(char), Length(1,false), Default(1) */
    val cdcasestep: Column[String] = column[String]("cdCaseStep", O.Length(1,varying=false), O.Default("1"))
    /** Database column cdCustType DBType(char), Length(1,false) */
    val cdcusttype: Column[String] = column[String]("cdCustType", O.Length(1,varying=false))
    /** Database column cdCustNo DBType(char), Length(10,false) */
    val cdcustno: Column[Option[String]] = column[Option[String]]("cdCustNo", O.Length(10,varying=false))
    /** Database column szCustName DBType(nchar), Length(120,false) */
    val szcustname: Column[String] = column[String]("szCustName", O.Length(120,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[String] = column[String]("cdSex", O.Length(1,varying=false))
    /** Database column szTel DBType(char), Length(20,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(20,varying=false))
    /** Database column szTel2 DBType(char), Length(20,false) */
    val sztel2: Column[Option[String]] = column[Option[String]]("szTel2", O.Length(20,varying=false))
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column cdArea DBType(char), Length(2,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(2,varying=false))
    /** Database column cdCity DBType(char), Length(4,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(4,varying=false))
    /** Database column szAddr DBType(nchar), Length(255,false) */
    val szaddr: Column[Option[String]] = column[Option[String]]("szAddr", O.Length(255,varying=false))
    /** Database column cdProdType DBType(char), Length(2,false) */
    val cdprodtype: Column[Option[String]] = column[Option[String]]("cdProdType", O.Length(2,varying=false))
    /** Database column cdProdSubType DBType(char), Length(3,false) */
    val cdprodsubtype: Column[Option[String]] = column[Option[String]]("cdProdSubType", O.Length(3,varying=false))
    /** Database column cdProdItem DBType(char), Length(3,false) */
    val cdproditem: Column[Option[String]] = column[Option[String]]("cdProdItem", O.Length(3,varying=false))
    /** Database column szProdDesc DBType(nchar), Length(255,false) */
    val szproddesc: Column[Option[String]] = column[Option[String]]("szProdDesc", O.Length(255,varying=false))
    /** Database column szHandle DBType(nchar), Length(255,false) */
    val szhandle: Column[Option[String]] = column[Option[String]]("szHandle", O.Length(255,varying=false))
    /** Database column cdSource DBType(char), Length(1,false) */
    val cdsource: Column[String] = column[String]("cdSource", O.Length(1,varying=false))
    /** Database column cdAgencyNo DBType(char), Length(10,false) */
    val cdagencyno: Column[Option[String]] = column[Option[String]]("cdAgencyNo", O.Length(10,varying=false))
    /** Database column cdStation DBType(char), Length(10,false) */
    val cdstation: Column[Option[String]] = column[Option[String]]("cdStation", O.Length(10,varying=false))
    /** Database column cdServiceStation DBType(char), Length(10,false) */
    val cdservicestation: Column[Option[String]] = column[Option[String]]("cdServiceStation", O.Length(10,varying=false))
    /** Database column cdResult DBType(char), Length(1,false), Default(Some(0)) */
    val cdresult: Column[Option[String]] = column[Option[String]]("cdResult", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column dtAssign DBType(datetime) */
    val dtassign: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtAssign")
    /** Database column uidAssignMan DBType(uniqueidentifier), Length(36,false) */
    val uidassignman: Column[Option[String]] = column[Option[String]]("uidAssignMan", O.Length(36,varying=false))
    /** Database column cdSatisfactory DBType(char), Length(1,false), Default(Some()) */
    val cdsatisfactory: Column[Option[String]] = column[Option[String]]("cdSatisfactory", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblcallcenter */
  lazy val Tblcallcenter = new TableQuery(tag => new Tblcallcenter(tag))
  
  /** Entity class storing rows of table Tblcasher
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param dtdate Database column dtDate DBType(datetime)
   *  @param cdmachine Database column cdMachine DBType(char), Length(2,false)
   *  @param f1 Database column F1 DBType(int)
   *  @param f2 Database column F2 DBType(int)
   *  @param f3 Database column F3 DBType(int)
   *  @param f4 Database column F4 DBType(int)
   *  @param f5 Database column F5 DBType(int)
   *  @param f6 Database column F6 DBType(int)
   *  @param f7 Database column F7 DBType(int)
   *  @param f8 Database column F8 DBType(int) */
  case class TblcasherRow(uid: Option[String], dtdate: java.sql.Timestamp, cdmachine: String, f1: Option[Int], f2: Option[Int], f3: Option[Int], f4: Option[Int], f5: Option[Int], f6: Option[Int], f7: Option[Int], f8: Option[Int])
  /** GetResult implicit for fetching TblcasherRow objects using plain SQL queries */
  implicit def GetResultTblcasherRow(implicit e0: GR[Option[String]], e1: GR[java.sql.Timestamp], e2: GR[String], e3: GR[Option[Int]]): GR[TblcasherRow] = GR{
    prs => import prs._
    TblcasherRow.tupled((<<?[String], <<[java.sql.Timestamp], <<[String], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int]))
  }
  /** Table description of table tblCasher. Objects of this class serve as prototypes for rows in queries. */
  class Tblcasher(_tableTag: Tag) extends Table[TblcasherRow](_tableTag, Some("dbo"), "tblCasher") {
    def * = (uid, dtdate, cdmachine, f1, f2, f3, f4, f5, f6, f7, f8) <> (TblcasherRow.tupled, TblcasherRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, dtdate.?, cdmachine.?, f1, f2, f3, f4, f5, f6, f7, f8).shaped.<>({r=>import r._; _2.map(_=> TblcasherRow.tupled((_1, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column dtDate DBType(datetime) */
    val dtdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtDate")
    /** Database column cdMachine DBType(char), Length(2,false) */
    val cdmachine: Column[String] = column[String]("cdMachine", O.Length(2,varying=false))
    /** Database column F1 DBType(int) */
    val f1: Column[Option[Int]] = column[Option[Int]]("F1")
    /** Database column F2 DBType(int) */
    val f2: Column[Option[Int]] = column[Option[Int]]("F2")
    /** Database column F3 DBType(int) */
    val f3: Column[Option[Int]] = column[Option[Int]]("F3")
    /** Database column F4 DBType(int) */
    val f4: Column[Option[Int]] = column[Option[Int]]("F4")
    /** Database column F5 DBType(int) */
    val f5: Column[Option[Int]] = column[Option[Int]]("F5")
    /** Database column F6 DBType(int) */
    val f6: Column[Option[Int]] = column[Option[Int]]("F6")
    /** Database column F7 DBType(int) */
    val f7: Column[Option[Int]] = column[Option[Int]]("F7")
    /** Database column F8 DBType(int) */
    val f8: Column[Option[Int]] = column[Option[Int]]("F8")
    
    /** Primary key of Tblcasher (database name PK_tblCasher) */
    val pk = primaryKey("PK_tblCasher", (dtdate, cdmachine))
  }
  /** Collection-like TableQuery object for table Tblcasher */
  lazy val Tblcasher = new TableQuery(tag => new Tblcasher(tag))
  
  /** Entity class storing rows of table Tblcenter
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param cdpersb Database column cdPerSb DBType(char), Length(4,false)
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param cdcid Database column cdCid DBType(char), Length(20,false)
   *  @param sznamec Database column szNameC DBType(nchar), Length(120,false)
   *  @param sznamee Database column szNameE DBType(nchar), Length(120,false)
   *  @param szholder Database column szHolder DBType(nchar), Length(120,false)
   *  @param szfulladdrc Database column szFullAddrC DBType(nchar), Length(128,false)
   *  @param szfulladdre Database column szFullAddrE DBType(nchar), Length(128,false)
   *  @param cdtel Database column cdTel DBType(char), Length(20,false)
   *  @param cdfax Database column cdFax DBType(char), Length(20,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byts DBType(timestamp)
   *  @param cdinvtype Database column cdInvType DBType(char), Length(1,false), Default(Some())
   *  @param cdtaxno Database column cdTaxNo DBType(char), Length(9,false)
   *  @param cdmachine Database column cdMachine DBType(varchar), Length(2,true), Default(Some()) */
  case class TblcenterRow(uid: String, cdpersa: String, cdpersb: String, cdwarehouse: String, cdcid: Option[String], sznamec: Option[String], sznamee: Option[String], szholder: Option[String], szfulladdrc: Option[String], szfulladdre: Option[String], cdtel: Option[String], cdfax: Option[String], szremark: Option[String], cdcurrency: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdinvtype: Option[String] = Some(""), cdtaxno: Option[String], cdmachine: Option[String] = Some(""))
  /** GetResult implicit for fetching TblcenterRow objects using plain SQL queries */
  implicit def GetResultTblcenterRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblcenterRow] = GR{
    prs => import prs._
    TblcenterRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblCenter. Objects of this class serve as prototypes for rows in queries. */
  class Tblcenter(_tableTag: Tag) extends Table[TblcenterRow](_tableTag, Some("dbo"), "tblCenter") {
    def * = (uid, cdpersa, cdpersb, cdwarehouse, cdcid, sznamec, sznamee, szholder, szfulladdrc, szfulladdre, cdtel, cdfax, szremark, cdcurrency, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdinvtype, cdtaxno, cdmachine) <> (TblcenterRow.tupled, TblcenterRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpersa.?, cdpersb.?, cdwarehouse.?, cdcid, sznamec, sznamee, szholder, szfulladdrc, szfulladdre, cdtel, cdfax, szremark, cdcurrency, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdinvtype, cdtaxno, cdmachine).shaped.<>({r=>import r._; _1.map(_=> TblcenterRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSb DBType(char), Length(4,false) */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column cdCid DBType(char), Length(20,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(20,varying=false))
    /** Database column szNameC DBType(nchar), Length(120,false) */
    val sznamec: Column[Option[String]] = column[Option[String]]("szNameC", O.Length(120,varying=false))
    /** Database column szNameE DBType(nchar), Length(120,false) */
    val sznamee: Column[Option[String]] = column[Option[String]]("szNameE", O.Length(120,varying=false))
    /** Database column szHolder DBType(nchar), Length(120,false) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=false))
    /** Database column szFullAddrC DBType(nchar), Length(128,false) */
    val szfulladdrc: Column[Option[String]] = column[Option[String]]("szFullAddrC", O.Length(128,varying=false))
    /** Database column szFullAddrE DBType(nchar), Length(128,false) */
    val szfulladdre: Column[Option[String]] = column[Option[String]]("szFullAddrE", O.Length(128,varying=false))
    /** Database column cdTel DBType(char), Length(20,false) */
    val cdtel: Column[Option[String]] = column[Option[String]]("cdTel", O.Length(20,varying=false))
    /** Database column cdFax DBType(char), Length(20,false) */
    val cdfax: Column[Option[String]] = column[Option[String]]("cdFax", O.Length(20,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column cdInvType DBType(char), Length(1,false), Default(Some()) */
    val cdinvtype: Column[Option[String]] = column[Option[String]]("cdInvType", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdTaxNo DBType(char), Length(9,false) */
    val cdtaxno: Column[Option[String]] = column[Option[String]]("cdTaxNo", O.Length(9,varying=false))
    /** Database column cdMachine DBType(varchar), Length(2,true), Default(Some()) */
    val cdmachine: Column[Option[String]] = column[Option[String]]("cdMachine", O.Length(2,varying=true), O.Default(Some("")))
    
    /** Primary key of Tblcenter (database name PK_tblCenter) */
    val pk = primaryKey("PK_tblCenter", (cdpersa, cdpersb, cdwarehouse))
  }
  /** Collection-like TableQuery object for table Tblcenter */
  lazy val Tblcenter = new TableQuery(tag => new Tblcenter(tag))
  
  /** Entity class storing rows of table Tblchksafeqty
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param dtchkdate Database column dtChkDate DBType(datetime)
   *  @param iseq Database column iSeq DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param cdwareid Database column cdWareID DBType(char), Length(15,false)
   *  @param iinhouseqty Database column iInHouseQty DBType(int)
   *  @param isafe Database column iSafe DBType(int)
   *  @param isafelimite Database column iSafeLimite DBType(int)
   *  @param isafeup Database column iSafeUp DBType(int)
   *  @param istatus Database column iStatus DBType(int), Default(Some(1))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblchksafeqtyRow(uid: String, cdcenter: String, dtchkdate: java.sql.Timestamp, iseq: Int, szprodid: String, cdwareid: Option[String], iinhouseqty: Option[Int], isafe: Option[Int], isafelimite: Option[Int], isafeup: Option[Int], istatus: Option[Int] = Some(1), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblchksafeqtyRow objects using plain SQL queries */
  implicit def GetResultTblchksafeqtyRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Int], e3: GR[Option[String]], e4: GR[Option[Int]], e5: GR[Option[java.sql.Timestamp]]): GR[TblchksafeqtyRow] = GR{
    prs => import prs._
    TblchksafeqtyRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[Int], <<[String], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblChkSafeQty. Objects of this class serve as prototypes for rows in queries. */
  class Tblchksafeqty(_tableTag: Tag) extends Table[TblchksafeqtyRow](_tableTag, Some("dbo"), "tblChkSafeQty") {
    def * = (uid, cdcenter, dtchkdate, iseq, szprodid, cdwareid, iinhouseqty, isafe, isafelimite, isafeup, istatus, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblchksafeqtyRow.tupled, TblchksafeqtyRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, dtchkdate.?, iseq.?, szprodid.?, cdwareid, iinhouseqty, isafe, isafelimite, isafeup, istatus, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblchksafeqtyRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column dtChkDate DBType(datetime) */
    val dtchkdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtChkDate")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdWareID DBType(char), Length(15,false) */
    val cdwareid: Column[Option[String]] = column[Option[String]]("cdWareID", O.Length(15,varying=false))
    /** Database column iInHouseQty DBType(int) */
    val iinhouseqty: Column[Option[Int]] = column[Option[Int]]("iInHouseQty")
    /** Database column iSafe DBType(int) */
    val isafe: Column[Option[Int]] = column[Option[Int]]("iSafe")
    /** Database column iSafeLimite DBType(int) */
    val isafelimite: Column[Option[Int]] = column[Option[Int]]("iSafeLimite")
    /** Database column iSafeUp DBType(int) */
    val isafeup: Column[Option[Int]] = column[Option[Int]]("iSafeUp")
    /** Database column iStatus DBType(int), Default(Some(1)) */
    val istatus: Column[Option[Int]] = column[Option[Int]]("iStatus", O.Default(Some(1)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblchksafeqty (database name PK_tblChkSafeQty) */
    val pk = primaryKey("PK_tblChkSafeQty", (cdcenter, dtchkdate, iseq, szprodid))
  }
  /** Collection-like TableQuery object for table Tblchksafeqty */
  lazy val Tblchksafeqty = new TableQuery(tag => new Tblchksafeqty(tag))
  
  /** Entity class storing rows of table Tblcid
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdattr Database column cdAttr DBType(char), Length(1,false)
   *  @param cdcid Database column cdCid DBType(char), Length(10,false)
   *  @param cdbusinessscope Database column cdBusinessScope DBType(char), Length(2,false)
   *  @param fcapitalstock Database column fCapitalStock DBType(float), Default(Some(0.0))
   *  @param cdcompattr Database column cdCompAttr DBType(char), Length(1,false)
   *  @param dtregistered Database column dtRegistered DBType(datetime)
   *  @param sztaxid Database column szTaxId DBType(char), Length(10,false)
   *  @param sznamec Database column szNameC DBType(nchar), Length(120,false)
   *  @param sznamee Database column szNameE DBType(nchar), Length(120,false)
   *  @param szholder Database column szHolder DBType(nchar), Length(120,false)
   *  @param szfulladdrc Database column szFullAddrC DBType(nchar), Length(120,false)
   *  @param szfulladdre Database column szFullAddrE DBType(nchar), Length(120,false)
   *  @param cdtel Database column cdTel DBType(char), Length(20,false)
   *  @param cdfax Database column cdFax DBType(char), Length(30,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byts DBType(timestamp) */
  case class TblcidRow(uid: String, cdattr: String, cdcid: String, cdbusinessscope: Option[String], fcapitalstock: Option[Double] = Some(0.0), cdcompattr: Option[String], dtregistered: Option[java.sql.Timestamp], sztaxid: Option[String], sznamec: Option[String], sznamee: Option[String], szholder: Option[String], szfulladdrc: Option[String], szfulladdre: Option[String], cdtel: Option[String], cdfax: Option[String], szremark: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblcidRow objects using plain SQL queries */
  implicit def GetResultTblcidRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Double]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblcidRow] = GR{
    prs => import prs._
    TblcidRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[Double], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblCid. Objects of this class serve as prototypes for rows in queries. */
  class Tblcid(_tableTag: Tag) extends Table[TblcidRow](_tableTag, Some("dbo"), "tblCid") {
    def * = (uid, cdattr, cdcid, cdbusinessscope, fcapitalstock, cdcompattr, dtregistered, sztaxid, sznamec, sznamee, szholder, szfulladdrc, szfulladdre, cdtel, cdfax, szremark, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblcidRow.tupled, TblcidRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdattr.?, cdcid.?, cdbusinessscope, fcapitalstock, cdcompattr, dtregistered, sztaxid, sznamec, sznamee, szholder, szfulladdrc, szfulladdre, cdtel, cdfax, szremark, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblcidRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdAttr DBType(char), Length(1,false) */
    val cdattr: Column[String] = column[String]("cdAttr", O.Length(1,varying=false))
    /** Database column cdCid DBType(char), Length(10,false) */
    val cdcid: Column[String] = column[String]("cdCid", O.Length(10,varying=false))
    /** Database column cdBusinessScope DBType(char), Length(2,false) */
    val cdbusinessscope: Column[Option[String]] = column[Option[String]]("cdBusinessScope", O.Length(2,varying=false))
    /** Database column fCapitalStock DBType(float), Default(Some(0.0)) */
    val fcapitalstock: Column[Option[Double]] = column[Option[Double]]("fCapitalStock", O.Default(Some(0.0)))
    /** Database column cdCompAttr DBType(char), Length(1,false) */
    val cdcompattr: Column[Option[String]] = column[Option[String]]("cdCompAttr", O.Length(1,varying=false))
    /** Database column dtRegistered DBType(datetime) */
    val dtregistered: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtRegistered")
    /** Database column szTaxId DBType(char), Length(10,false) */
    val sztaxid: Column[Option[String]] = column[Option[String]]("szTaxId", O.Length(10,varying=false))
    /** Database column szNameC DBType(nchar), Length(120,false) */
    val sznamec: Column[Option[String]] = column[Option[String]]("szNameC", O.Length(120,varying=false))
    /** Database column szNameE DBType(nchar), Length(120,false) */
    val sznamee: Column[Option[String]] = column[Option[String]]("szNameE", O.Length(120,varying=false))
    /** Database column szHolder DBType(nchar), Length(120,false) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=false))
    /** Database column szFullAddrC DBType(nchar), Length(120,false) */
    val szfulladdrc: Column[Option[String]] = column[Option[String]]("szFullAddrC", O.Length(120,varying=false))
    /** Database column szFullAddrE DBType(nchar), Length(120,false) */
    val szfulladdre: Column[Option[String]] = column[Option[String]]("szFullAddrE", O.Length(120,varying=false))
    /** Database column cdTel DBType(char), Length(20,false) */
    val cdtel: Column[Option[String]] = column[Option[String]]("cdTel", O.Length(20,varying=false))
    /** Database column cdFax DBType(char), Length(30,false) */
    val cdfax: Column[Option[String]] = column[Option[String]]("cdFax", O.Length(30,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    
    /** Primary key of Tblcid (database name PK_tblCid) */
    val pk = primaryKey("PK_tblCid", (cdattr, cdcid))
  }
  /** Collection-like TableQuery object for table Tblcid */
  lazy val Tblcid = new TableQuery(tag => new Tblcid(tag))
  
  /** Entity class storing rows of table Tblcity
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcountry Database column cdCountry DBType(char), Length(4,false)
   *  @param cdstate Database column cdState DBType(char), Length(10,false)
   *  @param cdcity Database column cdCity DBType(char), Length(5,false)
   *  @param cdcitytel Database column cdCityTel DBType(char), Length(4,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblcityRow(uid: String, cdcountry: String, cdstate: String, cdcity: String, cdcitytel: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblcityRow objects using plain SQL queries */
  implicit def GetResultTblcityRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblcityRow] = GR{
    prs => import prs._
    TblcityRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblCity. Objects of this class serve as prototypes for rows in queries. */
  class Tblcity(_tableTag: Tag) extends Table[TblcityRow](_tableTag, Some("dbo"), "tblCity") {
    def * = (uid, cdcountry, cdstate, cdcity, cdcitytel, uidcreator, dtcreate, byts) <> (TblcityRow.tupled, TblcityRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcountry.?, cdstate.?, cdcity.?, cdcitytel, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblcityRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[String] = column[String]("cdCountry", O.Length(4,varying=false))
    /** Database column cdState DBType(char), Length(10,false) */
    val cdstate: Column[String] = column[String]("cdState", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(5,false) */
    val cdcity: Column[String] = column[String]("cdCity", O.Length(5,varying=false))
    /** Database column cdCityTel DBType(char), Length(4,false) */
    val cdcitytel: Column[Option[String]] = column[Option[String]]("cdCityTel", O.Length(4,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblcity (database name PK_tblCity) */
    val pk = primaryKey("PK_tblCity", (cdcountry, cdstate, cdcity))
  }
  /** Collection-like TableQuery object for table Tblcity */
  lazy val Tblcity = new TableQuery(tag => new Tblcity(tag))
  
  /** Entity class storing rows of table Tblcityd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidcity Database column uidCity DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szshort Database column szShort DBType(nchar), Length(40,false)
   *  @param szname Database column szName DBType(nchar), Length(40,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblcitydRow(uid: String, uidcity: String, cdlanguage: String, szshort: Option[String], szname: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblcitydRow objects using plain SQL queries */
  implicit def GetResultTblcitydRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblcitydRow] = GR{
    prs => import prs._
    TblcitydRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblCityD. Objects of this class serve as prototypes for rows in queries. */
  class Tblcityd(_tableTag: Tag) extends Table[TblcitydRow](_tableTag, Some("dbo"), "tblCityD") {
    def * = (uid, uidcity, cdlanguage, szshort, szname, uidmodifier, dtmodify) <> (TblcitydRow.tupled, TblcitydRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidcity.?, cdlanguage.?, szshort, szname, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblcitydRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidCity DBType(uniqueidentifier), Length(36,false) */
    val uidcity: Column[String] = column[String]("uidCity", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szShort DBType(nchar), Length(40,false) */
    val szshort: Column[Option[String]] = column[Option[String]]("szShort", O.Length(40,varying=false))
    /** Database column szName DBType(nchar), Length(40,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(40,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblcityd (database name PK_tblCityD) */
    val pk = primaryKey("PK_tblCityD", (uidcity, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblcityd */
  lazy val Tblcityd = new TableQuery(tag => new Tblcityd(tag))
  
  /** Row type of table Tblclass */
  type TblclassRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Double],HCons[Option[Int],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Boolean,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[java.sql.Timestamp,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblclassRow providing default values if available in the database schema. */
  def TblclassRow(uid: String, cdpersa: String = "", uidcourse: String = "{00000000-0000-0000-0000-000000000000}", cdcourse: String = "", cdclassm: String = "", cdclassseq: String = "1", uidplace: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), isfroomnfee: Option[Boolean], icapacity: Option[Int] = Some(0), fsoredays: Option[Double] = Some(1.0), iclassdays: Option[Int] = Some(1), dtstrsignup: Option[java.sql.Timestamp], dtendsignup: Option[java.sql.Timestamp], dtopen1: Option[java.sql.Timestamp], dtclose1: Option[java.sql.Timestamp], dtopen2: Option[java.sql.Timestamp], dtclose2: Option[java.sql.Timestamp], dtopen3: Option[java.sql.Timestamp], dtclose3: Option[java.sql.Timestamp], dtopen4: Option[java.sql.Timestamp], dtclose4: Option[java.sql.Timestamp], dtopen5: Option[java.sql.Timestamp], dtclose5: Option[java.sql.Timestamp], dtopen6: Option[java.sql.Timestamp], dtclose6: Option[java.sql.Timestamp], dtnotice: Option[java.sql.Timestamp], szprodno: Option[String] = Some(""), szsignupfile: Option[String] = Some(""), szalarmfile: Option[String] = Some(""), szinvitationfile: Option[String] = Some(""), cddoctype: Option[String] = Some(""), szuserbookform: Option[String] = Some(""), iscontract: Option[Boolean] = Some(false), cdextension: Option[String] = Some(""), cdstatus: Option[String] = Some("1"), uidnewclass: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), isinvalid: Boolean = false, cdwebstatus: Option[String] = Some(""), dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob]): TblclassRow = {
    uid :: cdpersa :: uidcourse :: cdcourse :: cdclassm :: cdclassseq :: uidplace :: isfroomnfee :: icapacity :: fsoredays :: iclassdays :: dtstrsignup :: dtendsignup :: dtopen1 :: dtclose1 :: dtopen2 :: dtclose2 :: dtopen3 :: dtclose3 :: dtopen4 :: dtclose4 :: dtopen5 :: dtclose5 :: dtopen6 :: dtclose6 :: dtnotice :: szprodno :: szsignupfile :: szalarmfile :: szinvitationfile :: cddoctype :: szuserbookform :: iscontract :: cdextension :: cdstatus :: uidnewclass :: isinvalid :: cdwebstatus :: dtstrdate :: dtenddate :: uidcreator :: dtcreate :: byts :: HNil
  }
  /** GetResult implicit for fetching TblclassRow objects using plain SQL queries */
  implicit def GetResultTblclassRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Boolean]], e3: GR[Option[Int]], e4: GR[Option[Double]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Boolean], e7: GR[java.sql.Timestamp], e8: GR[Option[java.sql.Blob]]): GR[TblclassRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[Boolean] :: <<?[Int] :: <<?[Double] :: <<?[Int] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: HNil
  }
  /** Table description of table tblClass. Objects of this class serve as prototypes for rows in queries. */
  class Tblclass(_tableTag: Tag) extends Table[TblclassRow](_tableTag, Some("dbo"), "tblClass") {
    def * = uid :: cdpersa :: uidcourse :: cdcourse :: cdclassm :: cdclassseq :: uidplace :: isfroomnfee :: icapacity :: fsoredays :: iclassdays :: dtstrsignup :: dtendsignup :: dtopen1 :: dtclose1 :: dtopen2 :: dtclose2 :: dtopen3 :: dtclose3 :: dtopen4 :: dtclose4 :: dtopen5 :: dtclose5 :: dtopen6 :: dtclose6 :: dtnotice :: szprodno :: szsignupfile :: szalarmfile :: szinvitationfile :: cddoctype :: szuserbookform :: iscontract :: cdextension :: cdstatus :: uidnewclass :: isinvalid :: cdwebstatus :: dtstrdate :: dtenddate :: uidcreator :: dtcreate :: byts :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false), Default() */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false), O.Default(""))
    /** Database column uidCourse DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000}) */
    val uidcourse: Column[String] = column[String]("uidCourse", O.Length(36,varying=false), O.Default("{00000000-0000-0000-0000-000000000000}"))
    /** Database column cdCourse DBType(char), Length(5,false), Default() */
    val cdcourse: Column[String] = column[String]("cdCourse", O.Length(5,varying=false), O.Default(""))
    /** Database column cdClassM DBType(char), Length(6,false), Default() */
    val cdclassm: Column[String] = column[String]("cdClassM", O.Length(6,varying=false), O.Default(""))
    /** Database column cdClassSeq DBType(char), Length(1,false), Default(1) */
    val cdclassseq: Column[String] = column[String]("cdClassSeq", O.Length(1,varying=false), O.Default("1"))
    /** Database column uidPlace DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidplace: Column[Option[String]] = column[Option[String]]("uidPlace", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column isfRoomNFee DBType(bit) */
    val isfroomnfee: Column[Option[Boolean]] = column[Option[Boolean]]("isfRoomNFee")
    /** Database column iCapacity DBType(int), Default(Some(0)) */
    val icapacity: Column[Option[Int]] = column[Option[Int]]("iCapacity", O.Default(Some(0)))
    /** Database column fSoreDays DBType(float), Default(Some(1.0)) */
    val fsoredays: Column[Option[Double]] = column[Option[Double]]("fSoreDays", O.Default(Some(1.0)))
    /** Database column iClassDays DBType(int), Default(Some(1)) */
    val iclassdays: Column[Option[Int]] = column[Option[Int]]("iClassDays", O.Default(Some(1)))
    /** Database column dtStrSignUp DBType(datetime) */
    val dtstrsignup: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrSignUp")
    /** Database column dtEndSignUp DBType(datetime) */
    val dtendsignup: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndSignUp")
    /** Database column dtOpen1 DBType(datetime) */
    val dtopen1: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOpen1")
    /** Database column dtClose1 DBType(datetime) */
    val dtclose1: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtClose1")
    /** Database column dtOpen2 DBType(datetime) */
    val dtopen2: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOpen2")
    /** Database column dtClose2 DBType(datetime) */
    val dtclose2: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtClose2")
    /** Database column dtOpen3 DBType(datetime) */
    val dtopen3: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOpen3")
    /** Database column dtClose3 DBType(datetime) */
    val dtclose3: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtClose3")
    /** Database column dtOpen4 DBType(datetime) */
    val dtopen4: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOpen4")
    /** Database column dtClose4 DBType(datetime) */
    val dtclose4: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtClose4")
    /** Database column dtOpen5 DBType(datetime) */
    val dtopen5: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOpen5")
    /** Database column dtClose5 DBType(datetime) */
    val dtclose5: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtClose5")
    /** Database column dtOpen6 DBType(datetime) */
    val dtopen6: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOpen6")
    /** Database column dtClose6 DBType(datetime) */
    val dtclose6: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtClose6")
    /** Database column dtNotice DBType(datetime) */
    val dtnotice: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtNotice")
    /** Database column szProdNo DBType(char), Length(15,false), Default(Some()) */
    val szprodno: Column[Option[String]] = column[Option[String]]("szProdNo", O.Length(15,varying=false), O.Default(Some("")))
    /** Database column szSignUpFile DBType(nchar), Length(255,false), Default(Some()) */
    val szsignupfile: Column[Option[String]] = column[Option[String]]("szSignUpFile", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szAlarmFile DBType(nchar), Length(255,false), Default(Some()) */
    val szalarmfile: Column[Option[String]] = column[Option[String]]("szAlarmFile", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szInvitationFile DBType(nchar), Length(255,false), Default(Some()) */
    val szinvitationfile: Column[Option[String]] = column[Option[String]]("szInvitationFile", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column cdDocType DBType(char), Length(1,false), Default(Some()) */
    val cddoctype: Column[Option[String]] = column[Option[String]]("cdDocType", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column szUserBookForm DBType(nchar), Length(255,false), Default(Some()) */
    val szuserbookform: Column[Option[String]] = column[Option[String]]("szUserBookForm", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column isContract DBType(bit), Default(Some(false)) */
    val iscontract: Column[Option[Boolean]] = column[Option[Boolean]]("isContract", O.Default(Some(false)))
    /** Database column cdExtension DBType(char), Length(10,false), Default(Some()) */
    val cdextension: Column[Option[String]] = column[Option[String]]("cdExtension", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdStatus DBType(char), Length(1,false), Default(Some(1)) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column uidNewClass DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidnewclass: Column[Option[String]] = column[Option[String]]("uidNewClass", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column isInvalid DBType(bit), Default(false) */
    val isinvalid: Column[Boolean] = column[Boolean]("isInvalid", O.Default(false))
    /** Database column cdWebStatus DBType(char), Length(1,false), Default(Some()) */
    val cdwebstatus: Column[Option[String]] = column[Option[String]]("cdWebStatus", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblclass (database name PK_tblClass) */
    val pk = primaryKey("PK_tblClass", cdpersa :: uidcourse :: cdcourse :: cdclassm :: cdclassseq :: dtenddate :: HNil)
    
    /** Index over (cdpersa,uidcourse) (database name IX_tblClass) */
    val index1 = index("IX_tblClass", cdpersa :: uidcourse :: HNil)
    /** Index over (cdpersa,cdcourse,cdclassm,cdclassseq) (database name IX_tblClass_1) */
    val index2 = index("IX_tblClass_1", cdpersa :: cdcourse :: cdclassm :: cdclassseq :: HNil)
  }
  /** Collection-like TableQuery object for table Tblclass */
  lazy val Tblclass = new TableQuery(tag => new Tblclass(tag))
  
  /** Entity class storing rows of table Tblclassd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidclass Database column uidClass DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szclassdesc Database column szClassDesc DBType(nchar), Length(255,false)
   *  @param szmassage Database column szMassage DBType(nchar), Length(255,false)
   *  @param szpromoter Database column szPromoter DBType(nchar), Length(255,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param szwebremark Database column szWebRemark DBType(nchar), Length(255,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblclassdRow(uid: String, uidclass: String, cdlanguage: String, szclassdesc: Option[String], szmassage: Option[String], szpromoter: Option[String], szremark: Option[String], szwebremark: Option[String] = Some(""), uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblclassdRow objects using plain SQL queries */
  implicit def GetResultTblclassdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblclassdRow] = GR{
    prs => import prs._
    TblclassdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblClassD. Objects of this class serve as prototypes for rows in queries. */
  class Tblclassd(_tableTag: Tag) extends Table[TblclassdRow](_tableTag, Some("dbo"), "tblClassD") {
    def * = (uid, uidclass, cdlanguage, szclassdesc, szmassage, szpromoter, szremark, szwebremark, uidmodifier, dtmodify) <> (TblclassdRow.tupled, TblclassdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidclass.?, cdlanguage.?, szclassdesc, szmassage, szpromoter, szremark, szwebremark, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblclassdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szClassDesc DBType(nchar), Length(255,false) */
    val szclassdesc: Column[Option[String]] = column[Option[String]]("szClassDesc", O.Length(255,varying=false))
    /** Database column szMassage DBType(nchar), Length(255,false) */
    val szmassage: Column[Option[String]] = column[Option[String]]("szMassage", O.Length(255,varying=false))
    /** Database column szPromoter DBType(nchar), Length(255,false) */
    val szpromoter: Column[Option[String]] = column[Option[String]]("szPromoter", O.Length(255,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column szWebRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szwebremark: Column[Option[String]] = column[Option[String]]("szWebRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblclassd (database name PK_tblClassD) */
    val pk = primaryKey("PK_tblClassD", (uidclass, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblclassd */
  lazy val Tblclassd = new TableQuery(tag => new Tblclassd(tag))
  
  /** Entity class storing rows of table Tblclassexpense
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param uidclass Database column uidClass DBType(uniqueidentifier), Length(36,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param iseq Database column iSeq DBType(int)
   *  @param cdaccountstitle Database column cdAccountsTitle DBType(char), Length(4,false)
   *  @param fexpense Database column fExpense DBType(float), Default(Some(0.0))
   *  @param szremark Database column szRemark DBType(nchar), Length(10,false)
   *  @param isinvalid Database column isInvalid DBType(bit)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblclassexpenseRow(uid: String, cdpersa: String, uidclass: String, dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, iseq: Int, cdaccountstitle: Option[String], fexpense: Option[Double] = Some(0.0), szremark: Option[String], isinvalid: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblclassexpenseRow objects using plain SQL queries */
  implicit def GetResultTblclassexpenseRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[java.sql.Timestamp], e3: GR[Int], e4: GR[Option[String]], e5: GR[Option[Double]], e6: GR[Option[Boolean]], e7: GR[Option[java.sql.Blob]]): GR[TblclassexpenseRow] = GR{
    prs => import prs._
    TblclassexpenseRow.tupled((<<[String], <<[String], <<[String], <<?[java.sql.Timestamp], <<[java.sql.Timestamp], <<[Int], <<?[String], <<?[Double], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblClassExpense. Objects of this class serve as prototypes for rows in queries. */
  class Tblclassexpense(_tableTag: Tag) extends Table[TblclassexpenseRow](_tableTag, Some("dbo"), "tblClassExpense") {
    def * = (uid, cdpersa, uidclass, dtstrdate, dtenddate, iseq, cdaccountstitle, fexpense, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblclassexpenseRow.tupled, TblclassexpenseRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpersa.?, uidclass.?, dtstrdate, dtenddate.?, iseq.?, cdaccountstitle, fexpense, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblclassexpenseRow.tupled((_1.get, _2.get, _3.get, _4, _5.get, _6.get, _7, _8, _9, _10, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdAccountsTitle DBType(char), Length(4,false) */
    val cdaccountstitle: Column[Option[String]] = column[Option[String]]("cdAccountsTitle", O.Length(4,varying=false))
    /** Database column fExpense DBType(float), Default(Some(0.0)) */
    val fexpense: Column[Option[Double]] = column[Option[Double]]("fExpense", O.Default(Some(0.0)))
    /** Database column szRemark DBType(nchar), Length(10,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(10,varying=false))
    /** Database column isInvalid DBType(bit) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblclassexpense (database name PK_tblClassExpense) */
    val pk = primaryKey("PK_tblClassExpense", (cdpersa, uidclass, dtenddate, iseq))
  }
  /** Collection-like TableQuery object for table Tblclassexpense */
  lazy val Tblclassexpense = new TableQuery(tag => new Tblclassexpense(tag))
  
  /** Entity class storing rows of table Tblclassperson
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidclass Database column uidClass DBType(uniqueidentifier), Length(36,false)
   *  @param uidperson Database column uidPerson DBType(uniqueidentifier), Length(36,false)
   *  @param iseq Database column iSeq DBType(int), Default(Some(0))
   *  @param ischecked Database column isChecked DBType(bit), Default(Some(true))
   *  @param isattendance Database column isAttendance DBType(bit), Default(Some(true))
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblclasspersonRow(uid: String, uidclass: String, uidperson: String, iseq: Option[Int] = Some(0), ischecked: Option[Boolean] = Some(true), isattendance: Option[Boolean] = Some(true), uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblclasspersonRow objects using plain SQL queries */
  implicit def GetResultTblclasspersonRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[Boolean]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]]): GR[TblclasspersonRow] = GR{
    prs => import prs._
    TblclasspersonRow.tupled((<<[String], <<[String], <<[String], <<?[Int], <<?[Boolean], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblClassPerson. Objects of this class serve as prototypes for rows in queries. */
  class Tblclassperson(_tableTag: Tag) extends Table[TblclasspersonRow](_tableTag, Some("dbo"), "tblClassPerson") {
    def * = (uid, uidclass, uidperson, iseq, ischecked, isattendance, uidmodifier, dtmodify) <> (TblclasspersonRow.tupled, TblclasspersonRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidclass.?, uidperson.?, iseq, ischecked, isattendance, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblclasspersonRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false))
    /** Database column uidPerson DBType(uniqueidentifier), Length(36,false) */
    val uidperson: Column[String] = column[String]("uidPerson", O.Length(36,varying=false))
    /** Database column iSeq DBType(int), Default(Some(0)) */
    val iseq: Column[Option[Int]] = column[Option[Int]]("iSeq", O.Default(Some(0)))
    /** Database column isChecked DBType(bit), Default(Some(true)) */
    val ischecked: Column[Option[Boolean]] = column[Option[Boolean]]("isChecked", O.Default(Some(true)))
    /** Database column isAttendance DBType(bit), Default(Some(true)) */
    val isattendance: Column[Option[Boolean]] = column[Option[Boolean]]("isAttendance", O.Default(Some(true)))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblclassperson (database name PK_tblClassPerson) */
    val pk = primaryKey("PK_tblClassPerson", (uidclass, uidperson))
  }
  /** Collection-like TableQuery object for table Tblclassperson */
  lazy val Tblclassperson = new TableQuery(tag => new Tblclassperson(tag))
  
  /** Entity class storing rows of table Tblclassroom
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidclass Database column uidClass DBType(uniqueidentifier), Length(36,false)
   *  @param cdroomtype Database column cdRoomType DBType(char), Length(1,false)
   *  @param froomprice Database column fRoomPrice DBType(float), Default(Some(0.0))
   *  @param froomnfee Database column fRoomNFee DBType(float), Default(Some(0.0))
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblclassroomRow(uid: String, uidclass: String, cdroomtype: String, froomprice: Option[Double] = Some(0.0), froomnfee: Option[Double] = Some(0.0), szremark: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblclassroomRow objects using plain SQL queries */
  implicit def GetResultTblclassroomRow(implicit e0: GR[String], e1: GR[Option[Double]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblclassroomRow] = GR{
    prs => import prs._
    TblclassroomRow.tupled((<<[String], <<[String], <<[String], <<?[Double], <<?[Double], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblClassRoom. Objects of this class serve as prototypes for rows in queries. */
  class Tblclassroom(_tableTag: Tag) extends Table[TblclassroomRow](_tableTag, Some("dbo"), "tblClassRoom") {
    def * = (uid, uidclass, cdroomtype, froomprice, froomnfee, szremark, uidmodifier, dtmodify) <> (TblclassroomRow.tupled, TblclassroomRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidclass.?, cdroomtype.?, froomprice, froomnfee, szremark, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblclassroomRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false))
    /** Database column cdRoomType DBType(char), Length(1,false) */
    val cdroomtype: Column[String] = column[String]("cdRoomType", O.Length(1,varying=false))
    /** Database column fRoomPrice DBType(float), Default(Some(0.0)) */
    val froomprice: Column[Option[Double]] = column[Option[Double]]("fRoomPrice", O.Default(Some(0.0)))
    /** Database column fRoomNFee DBType(float), Default(Some(0.0)) */
    val froomnfee: Column[Option[Double]] = column[Option[Double]]("fRoomNFee", O.Default(Some(0.0)))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblclassroom (database name PK_tblClassRoom) */
    val pk = primaryKey("PK_tblClassRoom", (uidclass, cdroomtype))
  }
  /** Collection-like TableQuery object for table Tblclassroom */
  lazy val Tblclassroom = new TableQuery(tag => new Tblclassroom(tag))
  
  /** Entity class storing rows of table Tblconnect
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param connectstring Database column ConnectString DBType(nchar), Length(256,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false) */
  case class TblconnectRow(uid: String, cdcenter: String, connectstring: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], cdcurrency: Option[String])
  /** GetResult implicit for fetching TblconnectRow objects using plain SQL queries */
  implicit def GetResultTblconnectRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblconnectRow] = GR{
    prs => import prs._
    TblconnectRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblConnect. Objects of this class serve as prototypes for rows in queries. */
  class Tblconnect(_tableTag: Tag) extends Table[TblconnectRow](_tableTag, Some("dbo"), "tblConnect") {
    def * = (uid, cdcenter, connectstring, uidcreator, dtcreate, uidmodifier, dtmodify, cdcurrency) <> (TblconnectRow.tupled, TblconnectRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, connectstring.?, uidcreator, dtcreate, uidmodifier, dtmodify, cdcurrency).shaped.<>({r=>import r._; _1.map(_=> TblconnectRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column ConnectString DBType(nchar), Length(256,false) */
    val connectstring: Column[String] = column[String]("ConnectString", O.Length(256,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    
    /** Primary key of Tblconnect (database name PK_tblConnect) */
    val pk = primaryKey("PK_tblConnect", (cdcenter, connectstring))
  }
  /** Collection-like TableQuery object for table Tblconnect */
  lazy val Tblconnect = new TableQuery(tag => new Tblconnect(tag))
  
  /** Entity class storing rows of table Tblcontact
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidcallcenter Database column uidCallCenter DBType(uniqueidentifier), Length(36,false)
   *  @param cdsource Database column cdSource DBType(char), Length(1,false)
   *  @param szcontent Database column szContent DBType(nchar), Length(255,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblcontactRow(uid: String, uidcallcenter: String, cdsource: Option[String], szcontent: Option[String], szremark: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblcontactRow objects using plain SQL queries */
  implicit def GetResultTblcontactRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblcontactRow] = GR{
    prs => import prs._
    TblcontactRow.tupled((<<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblContact. Objects of this class serve as prototypes for rows in queries. */
  class Tblcontact(_tableTag: Tag) extends Table[TblcontactRow](_tableTag, Some("dbo"), "tblContact") {
    def * = (uid, uidcallcenter, cdsource, szcontent, szremark, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblcontactRow.tupled, TblcontactRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidcallcenter.?, cdsource, szcontent, szremark, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblcontactRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidCallCenter DBType(uniqueidentifier), Length(36,false) */
    val uidcallcenter: Column[String] = column[String]("uidCallCenter", O.Length(36,varying=false))
    /** Database column cdSource DBType(char), Length(1,false) */
    val cdsource: Column[Option[String]] = column[Option[String]]("cdSource", O.Length(1,varying=false))
    /** Database column szContent DBType(nchar), Length(255,false) */
    val szcontent: Column[Option[String]] = column[Option[String]]("szContent", O.Length(255,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblcontact */
  lazy val Tblcontact = new TableQuery(tag => new Tblcontact(tag))
  
  /** Entity class storing rows of table Tblcountry
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcountry Database column cdCountry DBType(char), PrimaryKey, Length(4,false)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false), Default(Some())
   *  @param cdnationalword Database column cdNationalWord DBType(char), Length(4,false), Default(Some())
   *  @param cduselanguage Database column cdUseLanguage DBType(char), Length(10,false), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp)
   *  @param cdbcmapping Database column cdBCMapping DBType(char), Length(2,false) */
  case class TblcountryRow(uid: String, cdcountry: String, cdcurrency: Option[String] = Some(""), cdnationalword: Option[String] = Some(""), cduselanguage: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdbcmapping: Option[String])
  /** GetResult implicit for fetching TblcountryRow objects using plain SQL queries */
  implicit def GetResultTblcountryRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblcountryRow] = GR{
    prs => import prs._
    TblcountryRow.tupled((<<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String]))
  }
  /** Table description of table tblCountry. Objects of this class serve as prototypes for rows in queries. */
  class Tblcountry(_tableTag: Tag) extends Table[TblcountryRow](_tableTag, Some("dbo"), "tblCountry") {
    def * = (uid, cdcountry, cdcurrency, cdnationalword, cduselanguage, uidcreator, dtcreate, byts, cdbcmapping) <> (TblcountryRow.tupled, TblcountryRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcountry.?, cdcurrency, cdnationalword, cduselanguage, uidcreator, dtcreate, byts, cdbcmapping).shaped.<>({r=>import r._; _1.map(_=> TblcountryRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCountry DBType(char), PrimaryKey, Length(4,false) */
    val cdcountry: Column[String] = column[String]("cdCountry", O.PrimaryKey, O.Length(4,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false), Default(Some()) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false), O.Default(Some("")))
    /** Database column cdNationalWord DBType(char), Length(4,false), Default(Some()) */
    val cdnationalword: Column[Option[String]] = column[Option[String]]("cdNationalWord", O.Length(4,varying=false), O.Default(Some("")))
    /** Database column cdUseLanguage DBType(char), Length(10,false), Default(Some()) */
    val cduselanguage: Column[Option[String]] = column[Option[String]]("cdUseLanguage", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdBCMapping DBType(char), Length(2,false) */
    val cdbcmapping: Column[Option[String]] = column[Option[String]]("cdBCMapping", O.Length(2,varying=false))
  }
  /** Collection-like TableQuery object for table Tblcountry */
  lazy val Tblcountry = new TableQuery(tag => new Tblcountry(tag))
  
  /** Entity class storing rows of table Tblcountryd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidcountry Database column uidCountry DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szcountryname Database column szCountryName DBType(nchar), Length(20,false)
   *  @param szcurrency Database column szCurrency DBType(nchar), Length(20,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblcountrydRow(uid: String, uidcountry: String, cdlanguage: String, szcountryname: Option[String], szcurrency: Option[String], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblcountrydRow objects using plain SQL queries */
  implicit def GetResultTblcountrydRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblcountrydRow] = GR{
    prs => import prs._
    TblcountrydRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblCountryD. Objects of this class serve as prototypes for rows in queries. */
  class Tblcountryd(_tableTag: Tag) extends Table[TblcountrydRow](_tableTag, Some("dbo"), "tblCountryD") {
    def * = (uid, uidcountry, cdlanguage, szcountryname, szcurrency, uidmodifier, dtmodify) <> (TblcountrydRow.tupled, TblcountrydRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidcountry.?, cdlanguage.?, szcountryname, szcurrency, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblcountrydRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidCountry DBType(uniqueidentifier), Length(36,false) */
    val uidcountry: Column[String] = column[String]("uidCountry", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szCountryName DBType(nchar), Length(20,false) */
    val szcountryname: Column[Option[String]] = column[Option[String]]("szCountryName", O.Length(20,varying=false))
    /** Database column szCurrency DBType(nchar), Length(20,false) */
    val szcurrency: Column[Option[String]] = column[Option[String]]("szCurrency", O.Length(20,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblcountryd (database name PK_tblCountryD) */
    val pk = primaryKey("PK_tblCountryD", (uidcountry, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblcountryd */
  lazy val Tblcountryd = new TableQuery(tag => new Tblcountryd(tag))
  
  /** Row type of table Tblcourse */
  type TblcourseRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[Int],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[java.sql.Timestamp],HCons[java.sql.Timestamp,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HNil]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblcourseRow providing default values if available in the database schema. */
  def TblcourseRow(uid: String, cdpersa: String, cdcourse: String, cdcoursetype: String, idays: Option[Int] = Some(0), isfisttimefree: Option[Boolean] = Some(false), cdcurrency: Option[String], fztrainfee: Option[Double] = Some(0.0), fzteacherfee: Option[Double] = Some(0.0), fzapplycost: Option[Double] = Some(0.0), cdprove: Option[String], cddoctype: Option[String], cdscore: Option[String], cdcertiftype: Option[String] = Some("1"), cdsubtype: Option[String], isinvalid: Option[Boolean] = Some(false), if1: Option[Int] = Some(0), if2: Option[Int] = Some(0), if3: Option[Int] = Some(0), dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob]): TblcourseRow = {
    uid :: cdpersa :: cdcourse :: cdcoursetype :: idays :: isfisttimefree :: cdcurrency :: fztrainfee :: fzteacherfee :: fzapplycost :: cdprove :: cddoctype :: cdscore :: cdcertiftype :: cdsubtype :: isinvalid :: if1 :: if2 :: if3 :: dtstrdate :: dtenddate :: uidcreator :: dtcreate :: byts :: HNil
  }
  /** GetResult implicit for fetching TblcourseRow objects using plain SQL queries */
  implicit def GetResultTblcourseRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[Boolean]], e3: GR[Option[String]], e4: GR[Option[Double]], e5: GR[Option[java.sql.Timestamp]], e6: GR[java.sql.Timestamp], e7: GR[Option[java.sql.Blob]]): GR[TblcourseRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[Int] :: <<?[Boolean] :: <<?[String] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: HNil
  }
  /** Table description of table tblCourse. Objects of this class serve as prototypes for rows in queries. */
  class Tblcourse(_tableTag: Tag) extends Table[TblcourseRow](_tableTag, Some("dbo"), "tblCourse") {
    def * = uid :: cdpersa :: cdcourse :: cdcoursetype :: idays :: isfisttimefree :: cdcurrency :: fztrainfee :: fzteacherfee :: fzapplycost :: cdprove :: cddoctype :: cdscore :: cdcertiftype :: cdsubtype :: isinvalid :: if1 :: if2 :: if3 :: dtstrdate :: dtenddate :: uidcreator :: dtcreate :: byts :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdCourse DBType(char), Length(5,false) */
    val cdcourse: Column[String] = column[String]("cdCourse", O.Length(5,varying=false))
    /** Database column cdCourseType DBType(char), Length(2,false) */
    val cdcoursetype: Column[String] = column[String]("cdCourseType", O.Length(2,varying=false))
    /** Database column iDays DBType(int), Default(Some(0)) */
    val idays: Column[Option[Int]] = column[Option[Int]]("iDays", O.Default(Some(0)))
    /** Database column isFistTimeFree DBType(bit), Default(Some(false)) */
    val isfisttimefree: Column[Option[Boolean]] = column[Option[Boolean]]("isFistTimeFree", O.Default(Some(false)))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column fzTrainFee DBType(float), Default(Some(0.0)) */
    val fztrainfee: Column[Option[Double]] = column[Option[Double]]("fzTrainFee", O.Default(Some(0.0)))
    /** Database column fzTeacherFee DBType(float), Default(Some(0.0)) */
    val fzteacherfee: Column[Option[Double]] = column[Option[Double]]("fzTeacherFee", O.Default(Some(0.0)))
    /** Database column fzApplyCost DBType(float), Default(Some(0.0)) */
    val fzapplycost: Column[Option[Double]] = column[Option[Double]]("fzApplyCost", O.Default(Some(0.0)))
    /** Database column cdProve DBType(char), Length(5,false) */
    val cdprove: Column[Option[String]] = column[Option[String]]("cdProve", O.Length(5,varying=false))
    /** Database column cdDocType DBType(char), Length(4,false) */
    val cddoctype: Column[Option[String]] = column[Option[String]]("cdDocType", O.Length(4,varying=false))
    /** Database column cdScore DBType(char), Length(2,false) */
    val cdscore: Column[Option[String]] = column[Option[String]]("cdScore", O.Length(2,varying=false))
    /** Database column cdCertifType DBType(char), Length(1,false), Default(Some(1)) */
    val cdcertiftype: Column[Option[String]] = column[Option[String]]("cdCertifType", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column cdSubType DBType(char), Length(1,false) */
    val cdsubtype: Column[Option[String]] = column[Option[String]]("cdSubType", O.Length(1,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column iF1 DBType(int), Default(Some(0)) */
    val if1: Column[Option[Int]] = column[Option[Int]]("iF1", O.Default(Some(0)))
    /** Database column iF2 DBType(int), Default(Some(0)) */
    val if2: Column[Option[Int]] = column[Option[Int]]("iF2", O.Default(Some(0)))
    /** Database column iF3 DBType(int), Default(Some(0)) */
    val if3: Column[Option[Int]] = column[Option[Int]]("iF3", O.Default(Some(0)))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblcourse (database name PK_tblCourse) */
    val pk = primaryKey("PK_tblCourse", cdpersa :: cdcourse :: dtenddate :: HNil)
    
    /** Index over (cdpersa,cdcoursetype) (database name IX_tblCourse) */
    val index1 = index("IX_tblCourse", cdpersa :: cdcoursetype :: HNil)
    /** Index over (cdpersa,cdcourse) (database name IX_tblCourse_1) */
    val index2 = index("IX_tblCourse_1", cdpersa :: cdcourse :: HNil)
  }
  /** Collection-like TableQuery object for table Tblcourse */
  lazy val Tblcourse = new TableQuery(tag => new Tblcourse(tag))
  
  /** Entity class storing rows of table Tblcoursed
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidcourse Database column uidCourse DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szcoursedesc Database column szCourseDesc DBType(nchar), Length(250,false), Default(Some())
   *  @param szmassage Database column szMassage DBType(nchar), Length(255,false), Default(Some())
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblcoursedRow(uid: String, uidcourse: String, cdlanguage: String, szcoursedesc: Option[String] = Some(""), szmassage: Option[String] = Some(""), szremark: Option[String] = Some(""), uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblcoursedRow objects using plain SQL queries */
  implicit def GetResultTblcoursedRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblcoursedRow] = GR{
    prs => import prs._
    TblcoursedRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblCourseD. Objects of this class serve as prototypes for rows in queries. */
  class Tblcoursed(_tableTag: Tag) extends Table[TblcoursedRow](_tableTag, Some("dbo"), "tblCourseD") {
    def * = (uid, uidcourse, cdlanguage, szcoursedesc, szmassage, szremark, uidmodifier, dtmodify) <> (TblcoursedRow.tupled, TblcoursedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidcourse.?, cdlanguage.?, szcoursedesc, szmassage, szremark, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblcoursedRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidCourse DBType(uniqueidentifier), Length(36,false) */
    val uidcourse: Column[String] = column[String]("uidCourse", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szCourseDesc DBType(nchar), Length(250,false), Default(Some()) */
    val szcoursedesc: Column[Option[String]] = column[Option[String]]("szCourseDesc", O.Length(250,varying=false), O.Default(Some("")))
    /** Database column szMassage DBType(nchar), Length(255,false), Default(Some()) */
    val szmassage: Column[Option[String]] = column[Option[String]]("szMassage", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblcoursed (database name PK_tblCourseD) */
    val pk = primaryKey("PK_tblCourseD", (uidcourse, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblcoursed */
  lazy val Tblcoursed = new TableQuery(tag => new Tblcoursed(tag))
  
  /** Entity class storing rows of table Tblcourselimit
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidcourse Database column uidCourse DBType(uniqueidentifier), Length(36,false)
   *  @param iseq Database column iSeq DBType(smallint)
   *  @param iday Database column iDay DBType(int) */
  case class TblcourselimitRow(uid: String, uidcourse: String, iseq: Short, iday: Option[Int])
  /** GetResult implicit for fetching TblcourselimitRow objects using plain SQL queries */
  implicit def GetResultTblcourselimitRow(implicit e0: GR[String], e1: GR[Short], e2: GR[Option[Int]]): GR[TblcourselimitRow] = GR{
    prs => import prs._
    TblcourselimitRow.tupled((<<[String], <<[String], <<[Short], <<?[Int]))
  }
  /** Table description of table tblCourseLimit. Objects of this class serve as prototypes for rows in queries. */
  class Tblcourselimit(_tableTag: Tag) extends Table[TblcourselimitRow](_tableTag, Some("dbo"), "tblCourseLimit") {
    def * = (uid, uidcourse, iseq, iday) <> (TblcourselimitRow.tupled, TblcourselimitRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidcourse.?, iseq.?, iday).shaped.<>({r=>import r._; _1.map(_=> TblcourselimitRow.tupled((_1.get, _2.get, _3.get, _4)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidCourse DBType(uniqueidentifier), Length(36,false) */
    val uidcourse: Column[String] = column[String]("uidCourse", O.Length(36,varying=false))
    /** Database column iSeq DBType(smallint) */
    val iseq: Column[Short] = column[Short]("iSeq")
    /** Database column iDay DBType(int) */
    val iday: Column[Option[Int]] = column[Option[Int]]("iDay")
    
    /** Primary key of Tblcourselimit (database name PK_tblCourseLimit) */
    val pk = primaryKey("PK_tblCourseLimit", (uidcourse, iseq))
  }
  /** Collection-like TableQuery object for table Tblcourselimit */
  lazy val Tblcourselimit = new TableQuery(tag => new Tblcourselimit(tag))
  
  /** Row type of table Tblcustomer */
  type TblcustomerRow = HCons[String,HCons[Option[String],HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblcustomerRow providing default values if available in the database schema. */
  def TblcustomerRow(uid: String, uidmachine: Option[String], cdmachine: Option[String], cdcustno: String, szfullname: Option[String], dtbirthday: Option[java.sql.Timestamp], cdmember: Option[String], cdid: Option[String], cdsex: Option[String], dtplancallout: Option[java.sql.Timestamp], dtplansendgift: Option[java.sql.Timestamp], dtcallout: Option[java.sql.Timestamp], dtsendgift: Option[java.sql.Timestamp], cdgift: Option[String], cdsetupmem: Option[String], cdagency: Option[String], cdorderno: Option[String], dtpurch: Option[java.sql.Timestamp], cdbuyermem: Option[String], dtouthouse: Option[java.sql.Timestamp], szremark: Option[String], isinvalid: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob]): TblcustomerRow = {
    uid :: uidmachine :: cdmachine :: cdcustno :: szfullname :: dtbirthday :: cdmember :: cdid :: cdsex :: dtplancallout :: dtplansendgift :: dtcallout :: dtsendgift :: cdgift :: cdsetupmem :: cdagency :: cdorderno :: dtpurch :: cdbuyermem :: dtouthouse :: szremark :: isinvalid :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
  }
  /** GetResult implicit for fetching TblcustomerRow objects using plain SQL queries */
  implicit def GetResultTblcustomerRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Blob]]): GR[TblcustomerRow] = GR{
    prs => import prs._
    <<[String] :: <<?[String] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: HNil
  }
  /** Table description of table tblCustomer. Objects of this class serve as prototypes for rows in queries. */
  class Tblcustomer(_tableTag: Tag) extends Table[TblcustomerRow](_tableTag, Some("dbo"), "tblCustomer") {
    def * = uid :: uidmachine :: cdmachine :: cdcustno :: szfullname :: dtbirthday :: cdmember :: cdid :: cdsex :: dtplancallout :: dtplansendgift :: dtcallout :: dtsendgift :: cdgift :: cdsetupmem :: cdagency :: cdorderno :: dtpurch :: cdbuyermem :: dtouthouse :: szremark :: isinvalid :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidMachine DBType(uniqueidentifier), Length(36,false) */
    val uidmachine: Column[Option[String]] = column[Option[String]]("uidMachine", O.Length(36,varying=false))
    /** Database column cdMachine DBType(char), Length(20,false) */
    val cdmachine: Column[Option[String]] = column[Option[String]]("cdMachine", O.Length(20,varying=false))
    /** Database column cdCustNo DBType(char), PrimaryKey, Length(10,false) */
    val cdcustno: Column[String] = column[String]("cdCustNo", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column cdID DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column dtPlanCallOut DBType(datetime) */
    val dtplancallout: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPlanCallOut")
    /** Database column dtPlanSendGift DBType(datetime) */
    val dtplansendgift: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPlanSendGift")
    /** Database column dtCallOut DBType(datetime) */
    val dtcallout: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCallOut")
    /** Database column dtSendGift DBType(datetime) */
    val dtsendgift: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtSendGift")
    /** Database column cdGift DBType(char), Length(10,false) */
    val cdgift: Column[Option[String]] = column[Option[String]]("cdGift", O.Length(10,varying=false))
    /** Database column cdSetupMem DBType(char), Length(10,false) */
    val cdsetupmem: Column[Option[String]] = column[Option[String]]("cdSetupMem", O.Length(10,varying=false))
    /** Database column cdAgency DBType(char), Length(10,false) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column dtPurch DBType(datetime) */
    val dtpurch: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPurch")
    /** Database column cdBuyerMem DBType(char), Length(10,false) */
    val cdbuyermem: Column[Option[String]] = column[Option[String]]("cdBuyerMem", O.Length(10,varying=false))
    /** Database column dtOutHouse DBType(datetime) */
    val dtouthouse: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOutHouse")
    /** Database column szRemark DBType(nchar), Length(512,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(512,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Index over (uidmachine) (database name IX_tblCustomer_1) */
    val index1 = index("IX_tblCustomer_1", uidmachine :: HNil)
    /** Index over (cdmachine) (database name IX_tblCustomer_2) */
    val index2 = index("IX_tblCustomer_2", cdmachine :: HNil)
  }
  /** Collection-like TableQuery object for table Tblcustomer */
  lazy val Tblcustomer = new TableQuery(tag => new Tblcustomer(tag))
  
  /** Entity class storing rows of table Tblcustreturn
   *  @param cdmember Database column cdMember DBType(char), PrimaryKey, Length(10,false)
   *  @param iall Database column iAll DBType(float), Default(Some(0.0))
   *  @param ibackall Database column iBackAll DBType(float), Default(Some(0.0))
   *  @param iunbackall Database column iUnbackAll DBType(float), Default(Some(0.0))
   *  @param igift Database column iGift DBType(float), Default(Some(0.0))
   *  @param ibackgift Database column iBackGift DBType(float), Default(Some(0.0))
   *  @param iunbackgift Database column iUnBackGift DBType(float), Default(Some(0.0))
   *  @param fbackgift Database column fBackGift DBType(float), Default(Some(0.0))
   *  @param ihigh Database column iHigh DBType(float), Default(Some(0.0))
   *  @param ibackhigh Database column iBackHigh DBType(float), Default(Some(0.0))
   *  @param iunbackhigh Database column iUnbackHigh DBType(float), Default(Some(0.0))
   *  @param fbackhigh Database column fBackHigh DBType(float), Default(Some(0.0))
   *  @param iother Database column iOther DBType(float), Default(Some(0.0))
   *  @param ibackother Database column iBackOther DBType(float), Default(Some(0.0))
   *  @param iunbackother Database column iUnBackOther DBType(float), Default(Some(0.0))
   *  @param fbackother Database column fBackOther DBType(float), Default(Some(0.0))
   *  @param igifttoday Database column iGiftToday DBType(float)
   *  @param ihightoday Database column iHighToday DBType(float)
   *  @param iothertoday Database column iOtherToday DBType(float) */
  case class TblcustreturnRow(cdmember: String, iall: Option[Double] = Some(0.0), ibackall: Option[Double] = Some(0.0), iunbackall: Option[Double] = Some(0.0), igift: Option[Double] = Some(0.0), ibackgift: Option[Double] = Some(0.0), iunbackgift: Option[Double] = Some(0.0), fbackgift: Option[Double] = Some(0.0), ihigh: Option[Double] = Some(0.0), ibackhigh: Option[Double] = Some(0.0), iunbackhigh: Option[Double] = Some(0.0), fbackhigh: Option[Double] = Some(0.0), iother: Option[Double] = Some(0.0), ibackother: Option[Double] = Some(0.0), iunbackother: Option[Double] = Some(0.0), fbackother: Option[Double] = Some(0.0), igifttoday: Option[Double], ihightoday: Option[Double], iothertoday: Option[Double])
  /** GetResult implicit for fetching TblcustreturnRow objects using plain SQL queries */
  implicit def GetResultTblcustreturnRow(implicit e0: GR[String], e1: GR[Option[Double]]): GR[TblcustreturnRow] = GR{
    prs => import prs._
    TblcustreturnRow.tupled((<<[String], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double], <<?[Double]))
  }
  /** Table description of table tblCustReturn. Objects of this class serve as prototypes for rows in queries. */
  class Tblcustreturn(_tableTag: Tag) extends Table[TblcustreturnRow](_tableTag, Some("dbo"), "tblCustReturn") {
    def * = (cdmember, iall, ibackall, iunbackall, igift, ibackgift, iunbackgift, fbackgift, ihigh, ibackhigh, iunbackhigh, fbackhigh, iother, ibackother, iunbackother, fbackother, igifttoday, ihightoday, iothertoday) <> (TblcustreturnRow.tupled, TblcustreturnRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdmember.?, iall, ibackall, iunbackall, igift, ibackgift, iunbackgift, fbackgift, ihigh, ibackhigh, iunbackhigh, fbackhigh, iother, ibackother, iunbackother, fbackother, igifttoday, ihightoday, iothertoday).shaped.<>({r=>import r._; _1.map(_=> TblcustreturnRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdMember DBType(char), PrimaryKey, Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column iAll DBType(float), Default(Some(0.0)) */
    val iall: Column[Option[Double]] = column[Option[Double]]("iAll", O.Default(Some(0.0)))
    /** Database column iBackAll DBType(float), Default(Some(0.0)) */
    val ibackall: Column[Option[Double]] = column[Option[Double]]("iBackAll", O.Default(Some(0.0)))
    /** Database column iUnbackAll DBType(float), Default(Some(0.0)) */
    val iunbackall: Column[Option[Double]] = column[Option[Double]]("iUnbackAll", O.Default(Some(0.0)))
    /** Database column iGift DBType(float), Default(Some(0.0)) */
    val igift: Column[Option[Double]] = column[Option[Double]]("iGift", O.Default(Some(0.0)))
    /** Database column iBackGift DBType(float), Default(Some(0.0)) */
    val ibackgift: Column[Option[Double]] = column[Option[Double]]("iBackGift", O.Default(Some(0.0)))
    /** Database column iUnBackGift DBType(float), Default(Some(0.0)) */
    val iunbackgift: Column[Option[Double]] = column[Option[Double]]("iUnBackGift", O.Default(Some(0.0)))
    /** Database column fBackGift DBType(float), Default(Some(0.0)) */
    val fbackgift: Column[Option[Double]] = column[Option[Double]]("fBackGift", O.Default(Some(0.0)))
    /** Database column iHigh DBType(float), Default(Some(0.0)) */
    val ihigh: Column[Option[Double]] = column[Option[Double]]("iHigh", O.Default(Some(0.0)))
    /** Database column iBackHigh DBType(float), Default(Some(0.0)) */
    val ibackhigh: Column[Option[Double]] = column[Option[Double]]("iBackHigh", O.Default(Some(0.0)))
    /** Database column iUnbackHigh DBType(float), Default(Some(0.0)) */
    val iunbackhigh: Column[Option[Double]] = column[Option[Double]]("iUnbackHigh", O.Default(Some(0.0)))
    /** Database column fBackHigh DBType(float), Default(Some(0.0)) */
    val fbackhigh: Column[Option[Double]] = column[Option[Double]]("fBackHigh", O.Default(Some(0.0)))
    /** Database column iOther DBType(float), Default(Some(0.0)) */
    val iother: Column[Option[Double]] = column[Option[Double]]("iOther", O.Default(Some(0.0)))
    /** Database column iBackOther DBType(float), Default(Some(0.0)) */
    val ibackother: Column[Option[Double]] = column[Option[Double]]("iBackOther", O.Default(Some(0.0)))
    /** Database column iUnBackOther DBType(float), Default(Some(0.0)) */
    val iunbackother: Column[Option[Double]] = column[Option[Double]]("iUnBackOther", O.Default(Some(0.0)))
    /** Database column fBackOther DBType(float), Default(Some(0.0)) */
    val fbackother: Column[Option[Double]] = column[Option[Double]]("fBackOther", O.Default(Some(0.0)))
    /** Database column iGiftToday DBType(float) */
    val igifttoday: Column[Option[Double]] = column[Option[Double]]("iGiftToday")
    /** Database column iHighToday DBType(float) */
    val ihightoday: Column[Option[Double]] = column[Option[Double]]("iHighToday")
    /** Database column iOtherToday DBType(float) */
    val iothertoday: Column[Option[Double]] = column[Option[Double]]("iOtherToday")
  }
  /** Collection-like TableQuery object for table Tblcustreturn */
  lazy val Tblcustreturn = new TableQuery(tag => new Tblcustreturn(tag))
  
  /** Entity class storing rows of table Tbldiscprod
   *  @param cdkind Database column cdKind DBType(varchar), Length(1,true)
   *  @param cdprodid Database column cdProdId DBType(varchar), Length(20,true)
   *  @param szprodname Database column szProdName DBType(varchar), Length(100,true)
   *  @param szinvname Database column szInvName DBType(varchar), Length(100,true)
   *  @param fsaleprice Database column fSalePrice DBType(float)
   *  @param fissueprice Database column fIssuePrice DBType(float)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbldiscprodRow(cdkind: String, cdprodid: String, szprodname: Option[String], szinvname: Option[String], fsaleprice: Option[Double], fissueprice: Option[Double], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbldiscprodRow objects using plain SQL queries */
  implicit def GetResultTbldiscprodRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Double]], e3: GR[Option[java.sql.Timestamp]]): GR[TbldiscprodRow] = GR{
    prs => import prs._
    TbldiscprodRow.tupled((<<[String], <<[String], <<?[String], <<?[String], <<?[Double], <<?[Double], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblDiscProd. Objects of this class serve as prototypes for rows in queries. */
  class Tbldiscprod(_tableTag: Tag) extends Table[TbldiscprodRow](_tableTag, Some("dbo"), "tblDiscProd") {
    def * = (cdkind, cdprodid, szprodname, szinvname, fsaleprice, fissueprice, dtmodify) <> (TbldiscprodRow.tupled, TbldiscprodRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdkind.?, cdprodid.?, szprodname, szinvname, fsaleprice, fissueprice, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TbldiscprodRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdKind DBType(varchar), Length(1,true) */
    val cdkind: Column[String] = column[String]("cdKind", O.Length(1,varying=true))
    /** Database column cdProdId DBType(varchar), Length(20,true) */
    val cdprodid: Column[String] = column[String]("cdProdId", O.Length(20,varying=true))
    /** Database column szProdName DBType(varchar), Length(100,true) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(100,varying=true))
    /** Database column szInvName DBType(varchar), Length(100,true) */
    val szinvname: Column[Option[String]] = column[Option[String]]("szInvName", O.Length(100,varying=true))
    /** Database column fSalePrice DBType(float) */
    val fsaleprice: Column[Option[Double]] = column[Option[Double]]("fSalePrice")
    /** Database column fIssuePrice DBType(float) */
    val fissueprice: Column[Option[Double]] = column[Option[Double]]("fIssuePrice")
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tbldiscprod (database name PK_tblDiscProd) */
    val pk = primaryKey("PK_tblDiscProd", (cdkind, cdprodid))
  }
  /** Collection-like TableQuery object for table Tbldiscprod */
  lazy val Tbldiscprod = new TableQuery(tag => new Tbldiscprod(tag))
  
  /** Row type of table Tblemployees */
  type TblemployeesRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HNil]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblemployeesRow providing default values if available in the database schema. */
  def TblemployeesRow(uid: String, cdcenter: String, cdpersa: String, cdemployee: String, cdlanguage: Option[String], cdsocialid: Option[String], cdpassportid: Option[String], szfirstname: Option[String], szlastname: Option[String], szfullname: Option[String], cdsex: Option[String], dtbirthday: Option[java.sql.Timestamp], cdmarital: Option[String], cdcountry: Option[String], dtarrive: Option[java.sql.Timestamp], dtleave: Option[java.sql.Timestamp], cddepartment: Option[String], cdposition: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob]): TblemployeesRow = {
    uid :: cdcenter :: cdpersa :: cdemployee :: cdlanguage :: cdsocialid :: cdpassportid :: szfirstname :: szlastname :: szfullname :: cdsex :: dtbirthday :: cdmarital :: cdcountry :: dtarrive :: dtleave :: cddepartment :: cdposition :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
  }
  /** GetResult implicit for fetching TblemployeesRow objects using plain SQL queries */
  implicit def GetResultTblemployeesRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblemployeesRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: HNil
  }
  /** Table description of table tblEmployees. Objects of this class serve as prototypes for rows in queries. */
  class Tblemployees(_tableTag: Tag) extends Table[TblemployeesRow](_tableTag, Some("dbo"), "tblEmployees") {
    def * = uid :: cdcenter :: cdpersa :: cdemployee :: cdlanguage :: cdsocialid :: cdpassportid :: szfirstname :: szlastname :: szfullname :: cdsex :: dtbirthday :: cdmarital :: cdcountry :: dtarrive :: dtleave :: cddepartment :: cdposition :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(8,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(8,varying=false))
    /** Database column cdPerSa DBType(char), Length(8,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(8,varying=false))
    /** Database column cdEmployee DBType(char), Length(8,false) */
    val cdemployee: Column[String] = column[String]("cdEmployee", O.Length(8,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column cdSocialID DBType(char), Length(20,false) */
    val cdsocialid: Column[Option[String]] = column[Option[String]]("cdSocialID", O.Length(20,varying=false))
    /** Database column cdPassportID DBType(char), Length(20,false) */
    val cdpassportid: Column[Option[String]] = column[Option[String]]("cdPassportID", O.Length(20,varying=false))
    /** Database column szFirstName DBType(nchar), Length(40,false) */
    val szfirstname: Column[Option[String]] = column[Option[String]]("szFirstName", O.Length(40,varying=false))
    /** Database column szLastName DBType(nchar), Length(80,false) */
    val szlastname: Column[Option[String]] = column[Option[String]]("szLastName", O.Length(80,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column cdSex DBType(char), Length(10,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(10,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdMarital DBType(char), Length(1,false) */
    val cdmarital: Column[Option[String]] = column[Option[String]]("cdMarital", O.Length(1,varying=false))
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column dtArrive DBType(datetime) */
    val dtarrive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtArrive")
    /** Database column dtLeave DBType(datetime) */
    val dtleave: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLeave")
    /** Database column cdDepartment DBType(char), Length(8,false) */
    val cddepartment: Column[Option[String]] = column[Option[String]]("cdDepartment", O.Length(8,varying=false))
    /** Database column cdPosition DBType(char), Length(8,false) */
    val cdposition: Column[Option[String]] = column[Option[String]]("cdPosition", O.Length(8,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    
    /** Primary key of Tblemployees (database name PK_tblEmployees) */
    val pk = primaryKey("PK_tblEmployees", cdcenter :: cdpersa :: cdemployee :: HNil)
  }
  /** Collection-like TableQuery object for table Tblemployees */
  lazy val Tblemployees = new TableQuery(tag => new Tblemployees(tag))
  
  /** Entity class storing rows of table Tblexchangeitem
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdexchangeitem Database column cdExchangeItem DBType(char), Length(1,false)
   *  @param cdproductidFrom Database column cdProductID_From DBType(char), Length(15,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param cdunitFrom Database column cdUnit_From DBType(char), Length(3,false)
   *  @param icountFrom Database column iCount_From DBType(int)
   *  @param cdproductidTo Database column cdProductID_To DBType(char), Length(15,false)
   *  @param cdunitTo Database column cdUnit_To DBType(char), Length(3,false)
   *  @param icountTo Database column iCount_To DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblexchangeitemRow(uid: String, cdexchangeitem: String, cdproductidFrom: String, iseq: Int, cdunitFrom: String, icountFrom: Int, cdproductidTo: String, cdunitTo: String, icountTo: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblexchangeitemRow objects using plain SQL queries */
  implicit def GetResultTblexchangeitemRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblexchangeitemRow] = GR{
    prs => import prs._
    TblexchangeitemRow.tupled((<<[String], <<[String], <<[String], <<[Int], <<[String], <<[Int], <<[String], <<[String], <<[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblExchangeItem. Objects of this class serve as prototypes for rows in queries. */
  class Tblexchangeitem(_tableTag: Tag) extends Table[TblexchangeitemRow](_tableTag, Some("dbo"), "tblExchangeItem") {
    def * = (uid, cdexchangeitem, cdproductidFrom, iseq, cdunitFrom, icountFrom, cdproductidTo, cdunitTo, icountTo, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblexchangeitemRow.tupled, TblexchangeitemRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdexchangeitem.?, cdproductidFrom.?, iseq.?, cdunitFrom.?, icountFrom.?, cdproductidTo.?, cdunitTo.?, icountTo.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblexchangeitemRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdExchangeItem DBType(char), Length(1,false) */
    val cdexchangeitem: Column[String] = column[String]("cdExchangeItem", O.Length(1,varying=false))
    /** Database column cdProductID_From DBType(char), Length(15,false) */
    val cdproductidFrom: Column[String] = column[String]("cdProductID_From", O.Length(15,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdUnit_From DBType(char), Length(3,false) */
    val cdunitFrom: Column[String] = column[String]("cdUnit_From", O.Length(3,varying=false))
    /** Database column iCount_From DBType(int) */
    val icountFrom: Column[Int] = column[Int]("iCount_From")
    /** Database column cdProductID_To DBType(char), Length(15,false) */
    val cdproductidTo: Column[String] = column[String]("cdProductID_To", O.Length(15,varying=false))
    /** Database column cdUnit_To DBType(char), Length(3,false) */
    val cdunitTo: Column[String] = column[String]("cdUnit_To", O.Length(3,varying=false))
    /** Database column iCount_To DBType(int) */
    val icountTo: Column[Int] = column[Int]("iCount_To")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblexchangeitem (database name PK_tblExchangeItem) */
    val pk = primaryKey("PK_tblExchangeItem", (cdexchangeitem, cdproductidFrom, iseq))
  }
  /** Collection-like TableQuery object for table Tblexchangeitem */
  lazy val Tblexchangeitem = new TableQuery(tag => new Tblexchangeitem(tag))
  
  /** Entity class storing rows of table Tblfaxdata
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdfaxno Database column cdFaxNo DBType(char), PrimaryKey, Length(14,false)
   *  @param dtfaxdate Database column dtFaxDate DBType(datetime)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false)
   *  @param szstatus Database column szStatus DBType(nchar), Length(20,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param szmembername Database column szMemberName DBType(nchar), Length(50,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param cdinvno Database column cdInvNo DBType(char), Length(10,false)
   *  @param szbillyear Database column szBillYear DBType(char), Length(4,false)
   *  @param szbillmonth Database column szBillMonth DBType(char), Length(2,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblfaxdataRow(uid: String, cdfaxno: String, dtfaxdate: Option[java.sql.Timestamp], cdstatus: Option[String], szstatus: Option[String], cdmember: Option[String], szmembername: Option[String], cdorderno: Option[String], cdinvno: Option[String], szbillyear: Option[String], szbillmonth: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblfaxdataRow objects using plain SQL queries */
  implicit def GetResultTblfaxdataRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]], e3: GR[Option[java.sql.Blob]]): GR[TblfaxdataRow] = GR{
    prs => import prs._
    TblfaxdataRow.tupled((<<[String], <<[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblFaxData. Objects of this class serve as prototypes for rows in queries. */
  class Tblfaxdata(_tableTag: Tag) extends Table[TblfaxdataRow](_tableTag, Some("dbo"), "tblFaxData") {
    def * = (uid, cdfaxno, dtfaxdate, cdstatus, szstatus, cdmember, szmembername, cdorderno, cdinvno, szbillyear, szbillmonth, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblfaxdataRow.tupled, TblfaxdataRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdfaxno.?, dtfaxdate, cdstatus, szstatus, cdmember, szmembername, cdorderno, cdinvno, szbillyear, szbillmonth, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblfaxdataRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdFaxNo DBType(char), PrimaryKey, Length(14,false) */
    val cdfaxno: Column[String] = column[String]("cdFaxNo", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column dtFaxDate DBType(datetime) */
    val dtfaxdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFaxDate")
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column szStatus DBType(nchar), Length(20,false) */
    val szstatus: Column[Option[String]] = column[Option[String]]("szStatus", O.Length(20,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szMemberName DBType(nchar), Length(50,false) */
    val szmembername: Column[Option[String]] = column[Option[String]]("szMemberName", O.Length(50,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[Option[String]] = column[Option[String]]("cdInvNo", O.Length(10,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[Option[String]] = column[Option[String]]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[Option[String]] = column[Option[String]]("szBillMonth", O.Length(2,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblfaxdata */
  lazy val Tblfaxdata = new TableQuery(tag => new Tblfaxdata(tag))
  
  /** Entity class storing rows of table Tblfreight
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdfreightid Database column cdFreightID DBType(char), Length(20,false)
   *  @param szaddressee Database column szAddressee DBType(nchar), Length(80,false)
   *  @param szfulladdr Database column szFullAddr DBType(nchar), Length(255,false)
   *  @param dtpsupp Database column dtPSupp DBType(datetime)
   *  @param iitemnum Database column iItemNum DBType(int)
   *  @param cdtimeblock Database column cdTimeBlock DBType(char), Length(1,false)
   *  @param sztel Database column szTel DBType(nchar), Length(128,false)
   *  @param szext Database column szExt DBType(nchar), Length(10,false)
   *  @param szcell Database column szCell DBType(nchar), Length(128,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblfreightRow(uid: String, cdfreightid: String, szaddressee: Option[String], szfulladdr: Option[String], dtpsupp: java.sql.Timestamp, iitemnum: Option[Int], cdtimeblock: Option[String], sztel: Option[String], szext: Option[String], szcell: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblfreightRow objects using plain SQL queries */
  implicit def GetResultTblfreightRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[java.sql.Timestamp], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]]): GR[TblfreightRow] = GR{
    prs => import prs._
    TblfreightRow.tupled((<<[String], <<[String], <<?[String], <<?[String], <<[java.sql.Timestamp], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblFreight. Objects of this class serve as prototypes for rows in queries. */
  class Tblfreight(_tableTag: Tag) extends Table[TblfreightRow](_tableTag, Some("dbo"), "tblFreight") {
    def * = (uid, cdfreightid, szaddressee, szfulladdr, dtpsupp, iitemnum, cdtimeblock, sztel, szext, szcell, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblfreightRow.tupled, TblfreightRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdfreightid.?, szaddressee, szfulladdr, dtpsupp.?, iitemnum, cdtimeblock, sztel, szext, szcell, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblfreightRow.tupled((_1.get, _2.get, _3, _4, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdFreightID DBType(char), Length(20,false) */
    val cdfreightid: Column[String] = column[String]("cdFreightID", O.Length(20,varying=false))
    /** Database column szAddressee DBType(nchar), Length(80,false) */
    val szaddressee: Column[Option[String]] = column[Option[String]]("szAddressee", O.Length(80,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column dtPSupp DBType(datetime) */
    val dtpsupp: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtPSupp")
    /** Database column iItemNum DBType(int) */
    val iitemnum: Column[Option[Int]] = column[Option[Int]]("iItemNum")
    /** Database column cdTimeBlock DBType(char), Length(1,false) */
    val cdtimeblock: Column[Option[String]] = column[Option[String]]("cdTimeBlock", O.Length(1,varying=false))
    /** Database column szTel DBType(nchar), Length(128,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(128,varying=false))
    /** Database column szExt DBType(nchar), Length(10,false) */
    val szext: Column[Option[String]] = column[Option[String]]("szExt", O.Length(10,varying=false))
    /** Database column szCell DBType(nchar), Length(128,false) */
    val szcell: Column[Option[String]] = column[Option[String]]("szCell", O.Length(128,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblfreight (database name PK_tblFreight) */
    val pk = primaryKey("PK_tblFreight", (cdfreightid, dtpsupp))
  }
  /** Collection-like TableQuery object for table Tblfreight */
  lazy val Tblfreight = new TableQuery(tag => new Tblfreight(tag))
  
  /** Entity class storing rows of table Tblfunctionlist
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param szid Database column szID DBType(char), Length(15,false)
   *  @param cdfunction Database column cdFunction DBType(char), Length(1,false) */
  case class TblfunctionlistRow(uid: String, szid: String, cdfunction: Option[String])
  /** GetResult implicit for fetching TblfunctionlistRow objects using plain SQL queries */
  implicit def GetResultTblfunctionlistRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[TblfunctionlistRow] = GR{
    prs => import prs._
    TblfunctionlistRow.tupled((<<[String], <<[String], <<?[String]))
  }
  /** Table description of table tblFunctionList. Objects of this class serve as prototypes for rows in queries. */
  class Tblfunctionlist(_tableTag: Tag) extends Table[TblfunctionlistRow](_tableTag, Some("dbo"), "tblFunctionList") {
    def * = (uid, szid, cdfunction) <> (TblfunctionlistRow.tupled, TblfunctionlistRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szid.?, cdfunction).shaped.<>({r=>import r._; _1.map(_=> TblfunctionlistRow.tupled((_1.get, _2.get, _3)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szID DBType(char), Length(15,false) */
    val szid: Column[String] = column[String]("szID", O.Length(15,varying=false))
    /** Database column cdFunction DBType(char), Length(1,false) */
    val cdfunction: Column[Option[String]] = column[Option[String]]("cdFunction", O.Length(1,varying=false))
    
    /** Index over (szid) (database name IX_tblFunctionList) */
    val index1 = index("IX_tblFunctionList", szid)
  }
  /** Collection-like TableQuery object for table Tblfunctionlist */
  lazy val Tblfunctionlist = new TableQuery(tag => new Tblfunctionlist(tag))
  
  /** Entity class storing rows of table Tblfunctionlistd
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidfunclist Database column uidFuncList DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(Some())
   *  @param szname Database column szName DBType(nchar), Length(128,false), Default(Some())
   *  @param szdescription Database column szDescription DBType(nchar), Length(150,false), Default(Some()) */
  case class TblfunctionlistdRow(uid: String, uidfunclist: Option[String], cdlanguage: Option[String] = Some(""), szname: Option[String] = Some(""), szdescription: Option[String] = Some(""))
  /** GetResult implicit for fetching TblfunctionlistdRow objects using plain SQL queries */
  implicit def GetResultTblfunctionlistdRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[TblfunctionlistdRow] = GR{
    prs => import prs._
    TblfunctionlistdRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblFunctionListD. Objects of this class serve as prototypes for rows in queries. */
  class Tblfunctionlistd(_tableTag: Tag) extends Table[TblfunctionlistdRow](_tableTag, Some("dbo"), "tblFunctionListD") {
    def * = (uid, uidfunclist, cdlanguage, szname, szdescription) <> (TblfunctionlistdRow.tupled, TblfunctionlistdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidfunclist, cdlanguage, szname, szdescription).shaped.<>({r=>import r._; _1.map(_=> TblfunctionlistdRow.tupled((_1.get, _2, _3, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidFuncList DBType(uniqueidentifier), Length(36,false) */
    val uidfunclist: Column[Option[String]] = column[Option[String]]("uidFuncList", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(Some()) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szName DBType(nchar), Length(128,false), Default(Some()) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szDescription DBType(nchar), Length(150,false), Default(Some()) */
    val szdescription: Column[Option[String]] = column[Option[String]]("szDescription", O.Length(150,varying=false), O.Default(Some("")))
  }
  /** Collection-like TableQuery object for table Tblfunctionlistd */
  lazy val Tblfunctionlistd = new TableQuery(tag => new Tblfunctionlistd(tag))
  
  /** Entity class storing rows of table Tblgift
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdgiftno Database column cdGiftNo DBType(char), PrimaryKey, Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false), Default()
   *  @param cdyear Database column cdYear DBType(char), Length(4,false)
   *  @param cdmonth Database column cdMonth DBType(char), Length(2,false)
   *  @param cdgiftorderno Database column cdGiftOrderNo DBType(char), Length(15,false)
   *  @param igifttype Database column iGiftType DBType(int), Default(Some(0))
   *  @param iqty Database column iQty DBType(int), Default(Some(0))
   *  @param icatalogqty Database column iCatalogQty DBType(int), Default(Some(0))
   *  @param cdflag1 Database column cdFlag1 DBType(char), Length(10,false)
   *  @param cdflag2 Database column cdFlag2 DBType(char), Length(10,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(120,false)
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
  case class TblgiftRow(uid: String, cdgiftno: String, cdmember: String = "", cdyear: Option[String], cdmonth: Option[String], cdgiftorderno: Option[String], igifttype: Option[Int] = Some(0), iqty: Option[Int] = Some(0), icatalogqty: Option[Int] = Some(0), cdflag1: Option[String], cdflag2: Option[String], szremark: Option[String], isinvalid: Option[Boolean] = Some(false), dtcreate: Option[java.sql.Timestamp], uidcreator: Option[String], dtmodify: Option[java.sql.Timestamp], uidmodifier: Option[String])
  /** GetResult implicit for fetching TblgiftRow objects using plain SQL queries */
  implicit def GetResultTblgiftRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]]): GR[TblgiftRow] = GR{
    prs => import prs._
    TblgiftRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblGift. Objects of this class serve as prototypes for rows in queries. */
  class Tblgift(_tableTag: Tag) extends Table[TblgiftRow](_tableTag, Some("dbo"), "tblGift") {
    def * = (uid, cdgiftno, cdmember, cdyear, cdmonth, cdgiftorderno, igifttype, iqty, icatalogqty, cdflag1, cdflag2, szremark, isinvalid, dtcreate, uidcreator, dtmodify, uidmodifier) <> (TblgiftRow.tupled, TblgiftRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdgiftno.?, cdmember.?, cdyear, cdmonth, cdgiftorderno, igifttype, iqty, icatalogqty, cdflag1, cdflag2, szremark, isinvalid, dtcreate, uidcreator, dtmodify, uidmodifier).shaped.<>({r=>import r._; _1.map(_=> TblgiftRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdGiftNo DBType(char), PrimaryKey, Length(10,false) */
    val cdgiftno: Column[String] = column[String]("cdGiftNo", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false), O.Default(""))
    /** Database column cdYear DBType(char), Length(4,false) */
    val cdyear: Column[Option[String]] = column[Option[String]]("cdYear", O.Length(4,varying=false))
    /** Database column cdMonth DBType(char), Length(2,false) */
    val cdmonth: Column[Option[String]] = column[Option[String]]("cdMonth", O.Length(2,varying=false))
    /** Database column cdGiftOrderNo DBType(char), Length(15,false) */
    val cdgiftorderno: Column[Option[String]] = column[Option[String]]("cdGiftOrderNo", O.Length(15,varying=false))
    /** Database column iGiftType DBType(int), Default(Some(0)) */
    val igifttype: Column[Option[Int]] = column[Option[Int]]("iGiftType", O.Default(Some(0)))
    /** Database column iQty DBType(int), Default(Some(0)) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty", O.Default(Some(0)))
    /** Database column iCatalogQty DBType(int), Default(Some(0)) */
    val icatalogqty: Column[Option[Int]] = column[Option[Int]]("iCatalogQty", O.Default(Some(0)))
    /** Database column cdFlag1 DBType(char), Length(10,false) */
    val cdflag1: Column[Option[String]] = column[Option[String]]("cdFlag1", O.Length(10,varying=false))
    /** Database column cdFlag2 DBType(char), Length(10,false) */
    val cdflag2: Column[Option[String]] = column[Option[String]]("cdFlag2", O.Length(10,varying=false))
    /** Database column szRemark DBType(nchar), Length(120,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(120,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
  }
  /** Collection-like TableQuery object for table Tblgift */
  lazy val Tblgift = new TableQuery(tag => new Tblgift(tag))
  
  /** Entity class storing rows of table Tblgiftd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdgiftno Database column cdGiftNo DBType(char), Length(10,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(15,false)
   *  @param iqty Database column iQty DBType(int), Default(Some(0))
   *  @param cdflag1 Database column cdFlag1 DBType(char), Length(1,false)
   *  @param cdflag2 Database column cdFlag2 DBType(char), Length(1,false)
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
  case class TblgiftdRow(uid: String, cdgiftno: String, cdorderno: String, iqty: Option[Int] = Some(0), cdflag1: Option[String], cdflag2: Option[String], isinvalid: Option[Boolean] = Some(false), dtcreate: Option[java.sql.Timestamp], uidcreator: Option[String], dtmodify: Option[java.sql.Timestamp], uidmodifier: Option[String])
  /** GetResult implicit for fetching TblgiftdRow objects using plain SQL queries */
  implicit def GetResultTblgiftdRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]]): GR[TblgiftdRow] = GR{
    prs => import prs._
    TblgiftdRow.tupled((<<[String], <<[String], <<[String], <<?[Int], <<?[String], <<?[String], <<?[Boolean], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblGiftD. Objects of this class serve as prototypes for rows in queries. */
  class Tblgiftd(_tableTag: Tag) extends Table[TblgiftdRow](_tableTag, Some("dbo"), "tblGiftD") {
    def * = (uid, cdgiftno, cdorderno, iqty, cdflag1, cdflag2, isinvalid, dtcreate, uidcreator, dtmodify, uidmodifier) <> (TblgiftdRow.tupled, TblgiftdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdgiftno.?, cdorderno.?, iqty, cdflag1, cdflag2, isinvalid, dtcreate, uidcreator, dtmodify, uidmodifier).shaped.<>({r=>import r._; _1.map(_=> TblgiftdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdGiftNo DBType(char), Length(10,false) */
    val cdgiftno: Column[String] = column[String]("cdGiftNo", O.Length(10,varying=false))
    /** Database column cdOrderNo DBType(char), Length(15,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(15,varying=false))
    /** Database column iQty DBType(int), Default(Some(0)) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty", O.Default(Some(0)))
    /** Database column cdFlag1 DBType(char), Length(1,false) */
    val cdflag1: Column[Option[String]] = column[Option[String]]("cdFlag1", O.Length(1,varying=false))
    /** Database column cdFlag2 DBType(char), Length(1,false) */
    val cdflag2: Column[Option[String]] = column[Option[String]]("cdFlag2", O.Length(1,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
  }
  /** Collection-like TableQuery object for table Tblgiftd */
  lazy val Tblgiftd = new TableQuery(tag => new Tblgiftd(tag))
  
  /** Entity class storing rows of table Tblgiftsetting
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdgifttype Database column cdGiftType DBType(char), PrimaryKey, Length(2,false)
   *  @param szgiftdesc Database column szGiftDesc DBType(nvarchar), Length(50,true), Default(Some())
   *  @param igiftcount Database column iGiftCount DBType(int), Default(Some(0))
   *  @param icatalog Database column iCatalog DBType(int), Default(Some(0))
   *  @param szremark Database column szRemark DBType(nvarchar), Length(50,true), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblgiftsettingRow(uid: String, cdgifttype: String, szgiftdesc: Option[String] = Some(""), igiftcount: Option[Int] = Some(0), icatalog: Option[Int] = Some(0), szremark: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblgiftsettingRow objects using plain SQL queries */
  implicit def GetResultTblgiftsettingRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblgiftsettingRow] = GR{
    prs => import prs._
    TblgiftsettingRow.tupled((<<[String], <<[String], <<?[String], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblGiftSetting. Objects of this class serve as prototypes for rows in queries. */
  class Tblgiftsetting(_tableTag: Tag) extends Table[TblgiftsettingRow](_tableTag, Some("dbo"), "tblGiftSetting") {
    def * = (uid, cdgifttype, szgiftdesc, igiftcount, icatalog, szremark, uidcreator, dtcreate, byts) <> (TblgiftsettingRow.tupled, TblgiftsettingRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdgifttype.?, szgiftdesc, igiftcount, icatalog, szremark, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblgiftsettingRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdGiftType DBType(char), PrimaryKey, Length(2,false) */
    val cdgifttype: Column[String] = column[String]("cdGiftType", O.PrimaryKey, O.Length(2,varying=false))
    /** Database column szGiftDesc DBType(nvarchar), Length(50,true), Default(Some()) */
    val szgiftdesc: Column[Option[String]] = column[Option[String]]("szGiftDesc", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column iGiftCount DBType(int), Default(Some(0)) */
    val igiftcount: Column[Option[Int]] = column[Option[Int]]("iGiftCount", O.Default(Some(0)))
    /** Database column iCatalog DBType(int), Default(Some(0)) */
    val icatalog: Column[Option[Int]] = column[Option[Int]]("iCatalog", O.Default(Some(0)))
    /** Database column szRemark DBType(nvarchar), Length(50,true), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblgiftsetting */
  lazy val Tblgiftsetting = new TableQuery(tag => new Tblgiftsetting(tag))
  
  /** Entity class storing rows of table Tblgiftsettingd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidgiftsetting Database column uidGiftSetting DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblgiftsettingdRow(uid: String, uidgiftsetting: Option[String], cdlanguage: Option[String], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblgiftsettingdRow objects using plain SQL queries */
  implicit def GetResultTblgiftsettingdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblgiftsettingdRow] = GR{
    prs => import prs._
    TblgiftsettingdRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblGiftSettingD. Objects of this class serve as prototypes for rows in queries. */
  class Tblgiftsettingd(_tableTag: Tag) extends Table[TblgiftsettingdRow](_tableTag, Some("dbo"), "tblGiftSettingD") {
    def * = (uid, uidgiftsetting, cdlanguage, uidmodifier, dtmodify) <> (TblgiftsettingdRow.tupled, TblgiftsettingdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidgiftsetting, cdlanguage, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblgiftsettingdRow.tupled((_1.get, _2, _3, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidGiftSetting DBType(uniqueidentifier), Length(36,false) */
    val uidgiftsetting: Column[Option[String]] = column[Option[String]]("uidGiftSetting", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblgiftsettingd */
  lazy val Tblgiftsettingd = new TableQuery(tag => new Tblgiftsettingd(tag))
  
  /** Entity class storing rows of table Tblgrade
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdgrade Database column cdGrade DBType(char), Length(4,false)
   *  @param cdcourse Database column cdCourse DBType(char), Length(5,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblgradeRow(uid: String, cdgrade: String, cdcourse: String, uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblgradeRow objects using plain SQL queries */
  implicit def GetResultTblgradeRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblgradeRow] = GR{
    prs => import prs._
    TblgradeRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblGrade. Objects of this class serve as prototypes for rows in queries. */
  class Tblgrade(_tableTag: Tag) extends Table[TblgradeRow](_tableTag, Some("dbo"), "tblGrade") {
    def * = (uid, cdgrade, cdcourse, uidcreator, dtcreate, byts) <> (TblgradeRow.tupled, TblgradeRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdgrade.?, cdcourse.?, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblgradeRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdGrade DBType(char), Length(4,false) */
    val cdgrade: Column[String] = column[String]("cdGrade", O.Length(4,varying=false))
    /** Database column cdCourse DBType(char), Length(5,false) */
    val cdcourse: Column[String] = column[String]("cdCourse", O.Length(5,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblgrade (database name PK_tblGrade) */
    val pk = primaryKey("PK_tblGrade", (cdgrade, cdcourse))
    
    /** Index over (uid) (database name IX_tblGrade) */
    val index1 = index("IX_tblGrade", uid)
  }
  /** Collection-like TableQuery object for table Tblgrade */
  lazy val Tblgrade = new TableQuery(tag => new Tblgrade(tag))
  
  /** Entity class storing rows of table Tblgraded
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidgrade Database column uidGrade DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param szdesc Database column szDesc DBType(nchar), Length(50,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblgradedRow(uid: String, uidgrade: String, cdlanguage: String = "zh-CHT", szdesc: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblgradedRow objects using plain SQL queries */
  implicit def GetResultTblgradedRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblgradedRow] = GR{
    prs => import prs._
    TblgradedRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblGradeD. Objects of this class serve as prototypes for rows in queries. */
  class Tblgraded(_tableTag: Tag) extends Table[TblgradedRow](_tableTag, Some("dbo"), "tblGradeD") {
    def * = (uid, uidgrade, cdlanguage, szdesc, uidmodifier, dtmodify) <> (TblgradedRow.tupled, TblgradedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidgrade.?, cdlanguage.?, szdesc, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblgradedRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidGrade DBType(uniqueidentifier), Length(36,false) */
    val uidgrade: Column[String] = column[String]("uidGrade", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column szDesc DBType(nchar), Length(50,false), Default(Some()) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblgraded (database name PK_tblGradeD) */
    val pk = primaryKey("PK_tblGradeD", (uidgrade, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblgraded */
  lazy val Tblgraded = new TableQuery(tag => new Tblgraded(tag))
  
  /** Entity class storing rows of table Tblgroup
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param szname Database column szName DBType(char), PrimaryKey, Length(25,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblgroupRow(uid: String, szname: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblgroupRow objects using plain SQL queries */
  implicit def GetResultTblgroupRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblgroupRow] = GR{
    prs => import prs._
    TblgroupRow.tupled((<<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblGroup. Objects of this class serve as prototypes for rows in queries. */
  class Tblgroup(_tableTag: Tag) extends Table[TblgroupRow](_tableTag, Some("dbo"), "tblGroup") {
    def * = (uid, szname, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblgroupRow.tupled, TblgroupRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szname.?, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblgroupRow.tupled((_1.get, _2.get, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szName DBType(char), PrimaryKey, Length(25,false) */
    val szname: Column[String] = column[String]("szName", O.PrimaryKey, O.Length(25,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblgroup */
  lazy val Tblgroup = new TableQuery(tag => new Tblgroup(tag))
  
  /** Entity class storing rows of table Tblgroupd
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidgroup Database column uidGroup DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(Some())
   *  @param szdescription Database column szDescription DBType(nchar), Length(150,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblgroupdRow(uid: String, uidgroup: String, cdlanguage: Option[String] = Some(""), szdescription: Option[String] = Some(""), uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblgroupdRow objects using plain SQL queries */
  implicit def GetResultTblgroupdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblgroupdRow] = GR{
    prs => import prs._
    TblgroupdRow.tupled((<<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblGroupD. Objects of this class serve as prototypes for rows in queries. */
  class Tblgroupd(_tableTag: Tag) extends Table[TblgroupdRow](_tableTag, Some("dbo"), "tblGroupD") {
    def * = (uid, uidgroup, cdlanguage, szdescription, uidmodifier, dtmodify) <> (TblgroupdRow.tupled, TblgroupdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidgroup.?, cdlanguage, szdescription, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblgroupdRow.tupled((_1.get, _2.get, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidGroup DBType(uniqueidentifier), Length(36,false) */
    val uidgroup: Column[String] = column[String]("uidGroup", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(Some()) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szDescription DBType(nchar), Length(150,false), Default(Some()) */
    val szdescription: Column[Option[String]] = column[Option[String]]("szDescription", O.Length(150,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblgroupd */
  lazy val Tblgroupd = new TableQuery(tag => new Tblgroupd(tag))
  
  /** Entity class storing rows of table Tblhandom
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdhandcode Database column cdHandCode DBType(char), Length(8,false)
   *  @param itype Database column iType DBType(int)
   *  @param uidowner Database column uidOwner DBType(uniqueidentifier), Length(36,false)
   *  @param cdowner Database column cdOwner DBType(char), Length(10,false)
   *  @param szowner Database column szOwner DBType(nvarchar), Length(100,true)
   *  @param dthanddate Database column dtHandDate DBType(datetime)
   *  @param itotal Database column iTotal DBType(int)
   *  @param itrans Database column iTrans DBType(int)
   *  @param uiduser Database column uidUser DBType(uniqueidentifier), Length(36,false)
   *  @param cduser Database column cdUser DBType(char), Length(10,false)
   *  @param szuser Database column szUser DBType(nvarchar), Length(100,true)
   *  @param iused Database column iUsed DBType(int)
   *  @param iusable Database column iUsable DBType(int)
   *  @param szmemo Database column szMemo DBType(nvarchar), Length(1024,true)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblhandomRow(uid: Option[String], cdhandcode: String, itype: Int, uidowner: String, cdowner: Option[String], szowner: Option[String], dthanddate: Option[java.sql.Timestamp], itotal: Option[Int], itrans: Option[Int], uiduser: Option[String], cduser: Option[String], szuser: Option[String], iused: Option[Int], iusable: Option[Int], szmemo: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblhandomRow objects using plain SQL queries */
  implicit def GetResultTblhandomRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Int], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Int]]): GR[TblhandomRow] = GR{
    prs => import prs._
    TblhandomRow.tupled((<<?[String], <<[String], <<[Int], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblHandOM. Objects of this class serve as prototypes for rows in queries. */
  class Tblhandom(_tableTag: Tag) extends Table[TblhandomRow](_tableTag, Some("dbo"), "tblHandOM") {
    def * = (uid, cdhandcode, itype, uidowner, cdowner, szowner, dthanddate, itotal, itrans, uiduser, cduser, szuser, iused, iusable, szmemo, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblhandomRow.tupled, TblhandomRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdhandcode.?, itype.?, uidowner.?, cdowner, szowner, dthanddate, itotal, itrans, uiduser, cduser, szuser, iused, iusable, szmemo, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _2.map(_=> TblhandomRow.tupled((_1, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdHandCode DBType(char), Length(8,false) */
    val cdhandcode: Column[String] = column[String]("cdHandCode", O.Length(8,varying=false))
    /** Database column iType DBType(int) */
    val itype: Column[Int] = column[Int]("iType")
    /** Database column uidOwner DBType(uniqueidentifier), Length(36,false) */
    val uidowner: Column[String] = column[String]("uidOwner", O.Length(36,varying=false))
    /** Database column cdOwner DBType(char), Length(10,false) */
    val cdowner: Column[Option[String]] = column[Option[String]]("cdOwner", O.Length(10,varying=false))
    /** Database column szOwner DBType(nvarchar), Length(100,true) */
    val szowner: Column[Option[String]] = column[Option[String]]("szOwner", O.Length(100,varying=true))
    /** Database column dtHandDate DBType(datetime) */
    val dthanddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtHandDate")
    /** Database column iTotal DBType(int) */
    val itotal: Column[Option[Int]] = column[Option[Int]]("iTotal")
    /** Database column iTrans DBType(int) */
    val itrans: Column[Option[Int]] = column[Option[Int]]("iTrans")
    /** Database column uidUser DBType(uniqueidentifier), Length(36,false) */
    val uiduser: Column[Option[String]] = column[Option[String]]("uidUser", O.Length(36,varying=false))
    /** Database column cdUser DBType(char), Length(10,false) */
    val cduser: Column[Option[String]] = column[Option[String]]("cdUser", O.Length(10,varying=false))
    /** Database column szUser DBType(nvarchar), Length(100,true) */
    val szuser: Column[Option[String]] = column[Option[String]]("szUser", O.Length(100,varying=true))
    /** Database column iUsed DBType(int) */
    val iused: Column[Option[Int]] = column[Option[Int]]("iUsed")
    /** Database column iUsable DBType(int) */
    val iusable: Column[Option[Int]] = column[Option[Int]]("iUsable")
    /** Database column szMemo DBType(nvarchar), Length(1024,true) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(1024,varying=true))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblhandom (database name PK_tblHandOM) */
    val pk = primaryKey("PK_tblHandOM", (cdhandcode, itype))
  }
  /** Collection-like TableQuery object for table Tblhandom */
  lazy val Tblhandom = new TableQuery(tag => new Tblhandom(tag))
  
  /** Entity class storing rows of table Tblhandomlog
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdtype Database column cdType DBType(char), Length(1,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param iorderqty Database column iOrderQty DBType(int), Default(Some(0))
   *  @param iallstock Database column iAllStock DBType(int), Default(Some(0))
   *  @param istockqty Database column iStockQty DBType(int), Default(Some(0))
   *  @param ilifeqty Database column iLifeQty DBType(int), Default(Some(0))
   *  @param istock2101 Database column iStock2101 DBType(int), Default(Some(0))
   *  @param fzamount Database column fzAmount DBType(float), Default(Some(0.0))
   *  @param fz2101 Database column fz2101 DBType(float), Default(Some(0.0))
   *  @param sznote Database column szNote DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param szname Database column szName DBType(nchar), Length(255,false)
   *  @param szsuper Database column szSuper DBType(nchar), Length(120,false)
   *  @param iloanqty Database column iLoanQty DBType(int), Default(Some(0)) */
  case class TblhandomlogRow(uid: Option[String], cdbonuscode: String, cdmember: String, cdtype: String, cdorderno: Option[String], iorderqty: Option[Int] = Some(0), iallstock: Option[Int] = Some(0), istockqty: Option[Int] = Some(0), ilifeqty: Option[Int] = Some(0), istock2101: Option[Int] = Some(0), fzamount: Option[Double] = Some(0.0), fz2101: Option[Double] = Some(0.0), sznote: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], szname: Option[String], szsuper: Option[String], iloanqty: Option[Int] = Some(0))
  /** GetResult implicit for fetching TblhandomlogRow objects using plain SQL queries */
  implicit def GetResultTblhandomlogRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Option[Int]], e3: GR[Option[Double]], e4: GR[Option[java.sql.Timestamp]]): GR[TblhandomlogRow] = GR{
    prs => import prs._
    TblhandomlogRow.tupled((<<?[String], <<[String], <<[String], <<[String], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Double], <<?[Double], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[Int]))
  }
  /** Table description of table tblHandOMLog. Objects of this class serve as prototypes for rows in queries. */
  class Tblhandomlog(_tableTag: Tag) extends Table[TblhandomlogRow](_tableTag, Some("dbo"), "tblHandOMLog") {
    def * = (uid, cdbonuscode, cdmember, cdtype, cdorderno, iorderqty, iallstock, istockqty, ilifeqty, istock2101, fzamount, fz2101, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, szname, szsuper, iloanqty) <> (TblhandomlogRow.tupled, TblhandomlogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdbonuscode.?, cdmember.?, cdtype.?, cdorderno, iorderqty, iallstock, istockqty, ilifeqty, istock2101, fzamount, fz2101, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, szname, szsuper, iloanqty).shaped.<>({r=>import r._; _2.map(_=> TblhandomlogRow.tupled((_1, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(1,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iOrderQty DBType(int), Default(Some(0)) */
    val iorderqty: Column[Option[Int]] = column[Option[Int]]("iOrderQty", O.Default(Some(0)))
    /** Database column iAllStock DBType(int), Default(Some(0)) */
    val iallstock: Column[Option[Int]] = column[Option[Int]]("iAllStock", O.Default(Some(0)))
    /** Database column iStockQty DBType(int), Default(Some(0)) */
    val istockqty: Column[Option[Int]] = column[Option[Int]]("iStockQty", O.Default(Some(0)))
    /** Database column iLifeQty DBType(int), Default(Some(0)) */
    val ilifeqty: Column[Option[Int]] = column[Option[Int]]("iLifeQty", O.Default(Some(0)))
    /** Database column iStock2101 DBType(int), Default(Some(0)) */
    val istock2101: Column[Option[Int]] = column[Option[Int]]("iStock2101", O.Default(Some(0)))
    /** Database column fzAmount DBType(float), Default(Some(0.0)) */
    val fzamount: Column[Option[Double]] = column[Option[Double]]("fzAmount", O.Default(Some(0.0)))
    /** Database column fz2101 DBType(float), Default(Some(0.0)) */
    val fz2101: Column[Option[Double]] = column[Option[Double]]("fz2101", O.Default(Some(0.0)))
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column szName DBType(nchar), Length(255,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(255,varying=false))
    /** Database column szSuper DBType(nchar), Length(120,false) */
    val szsuper: Column[Option[String]] = column[Option[String]]("szSuper", O.Length(120,varying=false))
    /** Database column iLoanQty DBType(int), Default(Some(0)) */
    val iloanqty: Column[Option[Int]] = column[Option[Int]]("iLoanQty", O.Default(Some(0)))
    
    /** Primary key of Tblhandomlog (database name PK_tblHandOMLog) */
    val pk = primaryKey("PK_tblHandOMLog", (cdbonuscode, cdmember, cdtype))
  }
  /** Collection-like TableQuery object for table Tblhandomlog */
  lazy val Tblhandomlog = new TableQuery(tag => new Tblhandomlog(tag))
  
  /** Entity class storing rows of table Tblhitrust
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(20,false)
   *  @param szcondition Database column szCondition DBType(char), Length(100,false)
   *  @param dtdatetime Database column dtDateTime DBType(datetime) */
  case class TblhitrustRow(uid: String, cdorderno: Option[String], szcondition: Option[String], dtdatetime: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblhitrustRow objects using plain SQL queries */
  implicit def GetResultTblhitrustRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblhitrustRow] = GR{
    prs => import prs._
    TblhitrustRow.tupled((<<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblHitrust. Objects of this class serve as prototypes for rows in queries. */
  class Tblhitrust(_tableTag: Tag) extends Table[TblhitrustRow](_tableTag, Some("dbo"), "tblHitrust") {
    def * = (uid, cdorderno, szcondition, dtdatetime) <> (TblhitrustRow.tupled, TblhitrustRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdorderno, szcondition, dtdatetime).shaped.<>({r=>import r._; _1.map(_=> TblhitrustRow.tupled((_1.get, _2, _3, _4)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdOrderNo DBType(char), Length(20,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(20,varying=false))
    /** Database column szCondition DBType(char), Length(100,false) */
    val szcondition: Column[Option[String]] = column[Option[String]]("szCondition", O.Length(100,varying=false))
    /** Database column dtDateTime DBType(datetime) */
    val dtdatetime: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtDateTime")
  }
  /** Collection-like TableQuery object for table Tblhitrust */
  lazy val Tblhitrust = new TableQuery(tag => new Tblhitrust(tag))
  
  /** Entity class storing rows of table Tblinfodefine
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpackage Database column cdPackage DBType(char), Length(8,false)
   *  @param cdinfotype Database column cdInfoType DBType(char), Length(4,false)
   *  @param yninuser Database column ynInUser DBType(bit), Default(true)
   *  @param sztablename Database column szTableName DBType(char), Length(128,false)
   *  @param szprogname Database column szProgName DBType(char), Length(128,false) */
  case class TblinfodefineRow(uid: String, cdpackage: String, cdinfotype: String, yninuser: Boolean = true, sztablename: Option[String], szprogname: Option[String])
  /** GetResult implicit for fetching TblinfodefineRow objects using plain SQL queries */
  implicit def GetResultTblinfodefineRow(implicit e0: GR[String], e1: GR[Boolean], e2: GR[Option[String]]): GR[TblinfodefineRow] = GR{
    prs => import prs._
    TblinfodefineRow.tupled((<<[String], <<[String], <<[String], <<[Boolean], <<?[String], <<?[String]))
  }
  /** Table description of table tblInfoDefine. Objects of this class serve as prototypes for rows in queries. */
  class Tblinfodefine(_tableTag: Tag) extends Table[TblinfodefineRow](_tableTag, Some("dbo"), "tblInfoDefine") {
    def * = (uid, cdpackage, cdinfotype, yninuser, sztablename, szprogname) <> (TblinfodefineRow.tupled, TblinfodefineRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpackage.?, cdinfotype.?, yninuser.?, sztablename, szprogname).shaped.<>({r=>import r._; _1.map(_=> TblinfodefineRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPackage DBType(char), Length(8,false) */
    val cdpackage: Column[String] = column[String]("cdPackage", O.Length(8,varying=false))
    /** Database column cdInfoType DBType(char), Length(4,false) */
    val cdinfotype: Column[String] = column[String]("cdInfoType", O.Length(4,varying=false))
    /** Database column ynInUser DBType(bit), Default(true) */
    val yninuser: Column[Boolean] = column[Boolean]("ynInUser", O.Default(true))
    /** Database column szTableName DBType(char), Length(128,false) */
    val sztablename: Column[Option[String]] = column[Option[String]]("szTableName", O.Length(128,varying=false))
    /** Database column szProgName DBType(char), Length(128,false) */
    val szprogname: Column[Option[String]] = column[Option[String]]("szProgName", O.Length(128,varying=false))
    
    /** Primary key of Tblinfodefine (database name PK_tblInfoDefine) */
    val pk = primaryKey("PK_tblInfoDefine", (cdpackage, cdinfotype))
  }
  /** Collection-like TableQuery object for table Tblinfodefine */
  lazy val Tblinfodefine = new TableQuery(tag => new Tblinfodefine(tag))
  
  /** Entity class storing rows of table Tblinfodefined
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidinfo Database column uidInfo DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szinfodesc Database column szInfoDesc DBType(nchar), Length(255,false) */
  case class TblinfodefinedRow(uid: String, uidinfo: String, cdlanguage: String, szinfodesc: Option[String])
  /** GetResult implicit for fetching TblinfodefinedRow objects using plain SQL queries */
  implicit def GetResultTblinfodefinedRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[TblinfodefinedRow] = GR{
    prs => import prs._
    TblinfodefinedRow.tupled((<<[String], <<[String], <<[String], <<?[String]))
  }
  /** Table description of table tblInfoDefineD. Objects of this class serve as prototypes for rows in queries. */
  class Tblinfodefined(_tableTag: Tag) extends Table[TblinfodefinedRow](_tableTag, Some("dbo"), "tblInfoDefineD") {
    def * = (uid, uidinfo, cdlanguage, szinfodesc) <> (TblinfodefinedRow.tupled, TblinfodefinedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidinfo.?, cdlanguage.?, szinfodesc).shaped.<>({r=>import r._; _1.map(_=> TblinfodefinedRow.tupled((_1.get, _2.get, _3.get, _4)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidInfo DBType(uniqueidentifier), Length(36,false) */
    val uidinfo: Column[String] = column[String]("uidInfo", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szInfoDesc DBType(nchar), Length(255,false) */
    val szinfodesc: Column[Option[String]] = column[Option[String]]("szInfoDesc", O.Length(255,varying=false))
    
    /** Primary key of Tblinfodefined (database name PK_tblInfoDefineD) */
    val pk = primaryKey("PK_tblInfoDefineD", (uidinfo, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblinfodefined */
  lazy val Tblinfodefined = new TableQuery(tag => new Tblinfodefined(tag))
  
  /** Entity class storing rows of table Tblinterviewq
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdtype Database column cdType DBType(char), Length(10,false)
   *  @param cdqid Database column cdQID DBType(char), Length(10,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
  case class TblinterviewqRow(uid: String, cdtype: String, cdqid: String, dtcreate: Option[java.sql.Timestamp], uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"))
  /** GetResult implicit for fetching TblinterviewqRow objects using plain SQL queries */
  implicit def GetResultTblinterviewqRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]]): GR[TblinterviewqRow] = GR{
    prs => import prs._
    TblinterviewqRow.tupled((<<[String], <<[String], <<[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblInterviewQ. Objects of this class serve as prototypes for rows in queries. */
  class Tblinterviewq(_tableTag: Tag) extends Table[TblinterviewqRow](_tableTag, Some("dbo"), "tblInterviewQ") {
    def * = (uid, cdtype, cdqid, dtcreate, uidcreator) <> (TblinterviewqRow.tupled, TblinterviewqRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdtype.?, cdqid.?, dtcreate, uidcreator).shaped.<>({r=>import r._; _1.map(_=> TblinterviewqRow.tupled((_1.get, _2.get, _3.get, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdType DBType(char), Length(10,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(10,varying=false))
    /** Database column cdQID DBType(char), Length(10,false) */
    val cdqid: Column[String] = column[String]("cdQID", O.Length(10,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    
    /** Primary key of Tblinterviewq (database name PK_tblInterviewQ) */
    val pk = primaryKey("PK_tblInterviewQ", (cdtype, cdqid))
  }
  /** Collection-like TableQuery object for table Tblinterviewq */
  lazy val Tblinterviewq = new TableQuery(tag => new Tblinterviewq(tag))
  
  /** Entity class storing rows of table Tblinterviewqd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidquestion Database column uidQuestion DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param szdesc Database column szDesc DBType(char), Length(256,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodifier Database column dtModifier DBType(datetime) */
  case class TblinterviewqdRow(uid: String, uidquestion: String, cdlanguage: String = "zh-CHT", szdesc: Option[String], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodifier: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblinterviewqdRow objects using plain SQL queries */
  implicit def GetResultTblinterviewqdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblinterviewqdRow] = GR{
    prs => import prs._
    TblinterviewqdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblInterviewQD. Objects of this class serve as prototypes for rows in queries. */
  class Tblinterviewqd(_tableTag: Tag) extends Table[TblinterviewqdRow](_tableTag, Some("dbo"), "tblInterviewQD") {
    def * = (uid, uidquestion, cdlanguage, szdesc, uidmodifier, dtmodifier) <> (TblinterviewqdRow.tupled, TblinterviewqdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidquestion.?, cdlanguage.?, szdesc, uidmodifier, dtmodifier).shaped.<>({r=>import r._; _1.map(_=> TblinterviewqdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidQuestion DBType(uniqueidentifier), Length(36,false) */
    val uidquestion: Column[String] = column[String]("uidQuestion", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column szDesc DBType(char), Length(256,false) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(256,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModifier DBType(datetime) */
    val dtmodifier: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModifier")
    
    /** Primary key of Tblinterviewqd (database name PK_tblInterviewQD) */
    val pk = primaryKey("PK_tblInterviewQD", (uidquestion, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblinterviewqd */
  lazy val Tblinterviewqd = new TableQuery(tag => new Tblinterviewqd(tag))
  
  /** Entity class storing rows of table Tblinv2620Temp
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param dtbusinessdate Database column dtBusinessDate DBType(datetime)
   *  @param dtcreatedate Database column dtCreateDate DBType(datetime)
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param cditem Database column cdItem DBType(char), Length(15,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(120,false)
   *  @param ordqty Database column OrdQty DBType(int), Default(Some(0))
   *  @param storeqty Database column StoreQty DBType(int), Default(Some(0))
   *  @param ipreinvqtyd Database column iPreInvQtyD DBType(int), Default(Some(0))
   *  @param outqtyN Database column OutQty_N DBType(int), Default(Some(0))
   *  @param outqtyL Database column OutQty_L DBType(int), Default(Some(0))
   *  @param iinhouseqty Database column iInHouseQty DBType(int), Default(Some(0))
   *  @param nooutqtyN Database column NoOutQty_N DBType(int), Default(Some(0))
   *  @param nooutqtyA Database column NoOutQty_A DBType(int), Default(Some(0))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class Tblinv2620TempRow(uid: String, dtbusinessdate: java.sql.Timestamp, dtcreatedate: java.sql.Timestamp, cdwarehouse: String, cditem: String, szprodname: Option[String], ordqty: Option[Int] = Some(0), storeqty: Option[Int] = Some(0), ipreinvqtyd: Option[Int] = Some(0), outqtyN: Option[Int] = Some(0), outqtyL: Option[Int] = Some(0), iinhouseqty: Option[Int] = Some(0), nooutqtyN: Option[Int] = Some(0), nooutqtyA: Option[Int] = Some(0), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching Tblinv2620TempRow objects using plain SQL queries */
  implicit def GetResultTblinv2620TempRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]]): GR[Tblinv2620TempRow] = GR{
    prs => import prs._
    Tblinv2620TempRow.tupled((<<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<[String], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblINV2620_Temp. Objects of this class serve as prototypes for rows in queries. */
  class Tblinv2620Temp(_tableTag: Tag) extends Table[Tblinv2620TempRow](_tableTag, Some("dbo"), "tblINV2620_Temp") {
    def * = (uid, dtbusinessdate, dtcreatedate, cdwarehouse, cditem, szprodname, ordqty, storeqty, ipreinvqtyd, outqtyN, outqtyL, iinhouseqty, nooutqtyN, nooutqtyA, uidcreator, dtcreate, uidmodifier, dtmodify) <> (Tblinv2620TempRow.tupled, Tblinv2620TempRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, dtbusinessdate.?, dtcreatedate.?, cdwarehouse.?, cditem.?, szprodname, ordqty, storeqty, ipreinvqtyd, outqtyN, outqtyL, iinhouseqty, nooutqtyN, nooutqtyA, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> Tblinv2620TempRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusinessDate")
    /** Database column dtCreateDate DBType(datetime) */
    val dtcreatedate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreateDate")
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column cdItem DBType(char), Length(15,false) */
    val cditem: Column[String] = column[String]("cdItem", O.Length(15,varying=false))
    /** Database column szProdName DBType(nchar), Length(120,false) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(120,varying=false))
    /** Database column OrdQty DBType(int), Default(Some(0)) */
    val ordqty: Column[Option[Int]] = column[Option[Int]]("OrdQty", O.Default(Some(0)))
    /** Database column StoreQty DBType(int), Default(Some(0)) */
    val storeqty: Column[Option[Int]] = column[Option[Int]]("StoreQty", O.Default(Some(0)))
    /** Database column iPreInvQtyD DBType(int), Default(Some(0)) */
    val ipreinvqtyd: Column[Option[Int]] = column[Option[Int]]("iPreInvQtyD", O.Default(Some(0)))
    /** Database column OutQty_N DBType(int), Default(Some(0)) */
    val outqtyN: Column[Option[Int]] = column[Option[Int]]("OutQty_N", O.Default(Some(0)))
    /** Database column OutQty_L DBType(int), Default(Some(0)) */
    val outqtyL: Column[Option[Int]] = column[Option[Int]]("OutQty_L", O.Default(Some(0)))
    /** Database column iInHouseQty DBType(int), Default(Some(0)) */
    val iinhouseqty: Column[Option[Int]] = column[Option[Int]]("iInHouseQty", O.Default(Some(0)))
    /** Database column NoOutQty_N DBType(int), Default(Some(0)) */
    val nooutqtyN: Column[Option[Int]] = column[Option[Int]]("NoOutQty_N", O.Default(Some(0)))
    /** Database column NoOutQty_A DBType(int), Default(Some(0)) */
    val nooutqtyA: Column[Option[Int]] = column[Option[Int]]("NoOutQty_A", O.Default(Some(0)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblinv2620Temp (database name PK_tblINV2620_Temp) */
    val pk = primaryKey("PK_tblINV2620_Temp", (dtbusinessdate, dtcreatedate, cdwarehouse, cditem))
  }
  /** Collection-like TableQuery object for table Tblinv2620Temp */
  lazy val Tblinv2620Temp = new TableQuery(tag => new Tblinv2620Temp(tag))
  
  /** Row type of table Tblinvcontrol */
  type TblinvcontrolRow = HCons[Option[String],HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[java.sql.Timestamp,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblinvcontrolRow providing default values if available in the database schema. */
  def TblinvcontrolRow(uid: Option[String], cdpersa: String, cdpersg: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, cdinvoiceno: String, cdinvoicechk: String, cdmachine: Option[String], cdbuyertype: Option[String], cdbuyer: Option[String], szbuyer: Option[String], cdtaxtype: Option[String], cdstatus: Option[String] = Some("0"), iamtbefor: Option[Int] = Some(0), iamttax: Option[Int] = Some(0), iamttotal: Option[Int] = Some(0), isissue: Option[Boolean] = Some(false), dtissue: Option[java.sql.Timestamp], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdorderno: Option[String], cdmember: Option[String], cdcurrency: Option[String], sznote: Option[String], cdmemkind: Option[String], szvisanote: Option[String]): TblinvcontrolRow = {
    uid :: cdpersa :: cdpersg :: dtstrdate :: dtenddate :: cdinvoiceno :: cdinvoicechk :: cdmachine :: cdbuyertype :: cdbuyer :: szbuyer :: cdtaxtype :: cdstatus :: iamtbefor :: iamttax :: iamttotal :: isissue :: dtissue :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdorderno :: cdmember :: cdcurrency :: sznote :: cdmemkind :: szvisanote :: HNil
  }
  /** GetResult implicit for fetching TblinvcontrolRow objects using plain SQL queries */
  implicit def GetResultTblinvcontrolRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[java.sql.Timestamp], e3: GR[Option[Int]], e4: GR[Option[Boolean]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblinvcontrolRow] = GR{
    prs => import prs._
    <<?[String] :: <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblInvControl. Objects of this class serve as prototypes for rows in queries. */
  class Tblinvcontrol(_tableTag: Tag) extends Table[TblinvcontrolRow](_tableTag, Some("dbo"), "tblInvControl") {
    def * = uid :: cdpersa :: cdpersg :: dtstrdate :: dtenddate :: cdinvoiceno :: cdinvoicechk :: cdmachine :: cdbuyertype :: cdbuyer :: szbuyer :: cdtaxtype :: cdstatus :: iamtbefor :: iamttax :: iamttotal :: isissue :: dtissue :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdorderno :: cdmember :: cdcurrency :: sznote :: cdmemkind :: szvisanote :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSg DBType(char), Length(4,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(4,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column cdInvoiceNo DBType(char), PrimaryKey, Length(10,false) */
    val cdinvoiceno: Column[String] = column[String]("cdInvoiceNo", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column cdInvoiceChk DBType(char), Length(1,false) */
    val cdinvoicechk: Column[String] = column[String]("cdInvoiceChk", O.Length(1,varying=false))
    /** Database column cdMachine DBType(char), Length(2,false) */
    val cdmachine: Column[Option[String]] = column[Option[String]]("cdMachine", O.Length(2,varying=false))
    /** Database column cdBuyerType DBType(char), Length(1,false) */
    val cdbuyertype: Column[Option[String]] = column[Option[String]]("cdBuyerType", O.Length(1,varying=false))
    /** Database column cdBuyer DBType(char), Length(10,false) */
    val cdbuyer: Column[Option[String]] = column[Option[String]]("cdBuyer", O.Length(10,varying=false))
    /** Database column szBuyer DBType(nchar), Length(80,false) */
    val szbuyer: Column[Option[String]] = column[Option[String]]("szBuyer", O.Length(80,varying=false))
    /** Database column cdTaxType DBType(char), Length(1,false) */
    val cdtaxtype: Column[Option[String]] = column[Option[String]]("cdTaxType", O.Length(1,varying=false))
    /** Database column cdStatus DBType(char), Length(1,false), Default(Some(0)) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column iAmtBefor DBType(int), Default(Some(0)) */
    val iamtbefor: Column[Option[Int]] = column[Option[Int]]("iAmtBefor", O.Default(Some(0)))
    /** Database column iAmtTax DBType(int), Default(Some(0)) */
    val iamttax: Column[Option[Int]] = column[Option[Int]]("iAmtTax", O.Default(Some(0)))
    /** Database column iAmtTotal DBType(int), Default(Some(0)) */
    val iamttotal: Column[Option[Int]] = column[Option[Int]]("iAmtTotal", O.Default(Some(0)))
    /** Database column isIssue DBType(bit), Default(Some(false)) */
    val isissue: Column[Option[Boolean]] = column[Option[Boolean]]("isIssue", O.Default(Some(false)))
    /** Database column dtIssue DBType(datetime) */
    val dtissue: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtIssue")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column szVisaNote DBType(nchar), Length(255,false) */
    val szvisanote: Column[Option[String]] = column[Option[String]]("szVisaNote", O.Length(255,varying=false))
    
    /** Index over (dtstrdate,dtenddate,cdmachine,cdinvoiceno,cdstatus) (database name IX_tblInvControl) */
    val index1 = index("IX_tblInvControl", dtstrdate :: dtenddate :: cdmachine :: cdinvoiceno :: cdstatus :: HNil)
    /** Index over (cdorderno) (database name IX_tblInvControl_1) */
    val index2 = index("IX_tblInvControl_1", cdorderno :: HNil)
    /** Index over (cdpersa,dtstrdate,cdmachine) (database name IX_tblInvControl_2) */
    val index3 = index("IX_tblInvControl_2", cdpersa :: dtstrdate :: cdmachine :: HNil)
  }
  /** Collection-like TableQuery object for table Tblinvcontrol */
  lazy val Tblinvcontrol = new TableQuery(tag => new Tblinvcontrol(tag))
  
  /** Entity class storing rows of table Tblinvdetail
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdinvno Database column cdInvNo DBType(char), Length(10,false)
   *  @param szbillyear Database column szBillYear DBType(char), Length(4,false)
   *  @param szbillmonth Database column szBillMonth DBType(char), Length(2,false)
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param iprodqty Database column iProdQty DBType(int)
   *  @param cdunitsale Database column cdUnitSale DBType(char), Length(3,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(255,false)
   *  @param fsaleprice Database column fSalePrice DBType(float)
   *  @param fdiscountprice Database column fDiscountPrice DBType(float)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param fmoney Database column fMoney DBType(float)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp)
   *  @param cdproject Database column cdProject DBType(char), Length(15,false) */
  case class TblinvdetailRow(uid: String, cdinvno: String, szbillyear: String, szbillmonth: String, iserialno: Int, szprodid: String, iprodqty: Int, cdunitsale: String, szprodname: String, fsaleprice: Double, fdiscountprice: Double, cdcurrency: String, fmoney: Double, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdproject: Option[String])
  /** GetResult implicit for fetching TblinvdetailRow objects using plain SQL queries */
  implicit def GetResultTblinvdetailRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Double], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblinvdetailRow] = GR{
    prs => import prs._
    TblinvdetailRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[Int], <<[String], <<[Int], <<[String], <<[String], <<[Double], <<[Double], <<[String], <<[Double], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String]))
  }
  /** Table description of table tblInvDetail. Objects of this class serve as prototypes for rows in queries. */
  class Tblinvdetail(_tableTag: Tag) extends Table[TblinvdetailRow](_tableTag, Some("dbo"), "tblInvDetail") {
    def * = (uid, cdinvno, szbillyear, szbillmonth, iserialno, szprodid, iprodqty, cdunitsale, szprodname, fsaleprice, fdiscountprice, cdcurrency, fmoney, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdproject) <> (TblinvdetailRow.tupled, TblinvdetailRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdinvno.?, szbillyear.?, szbillmonth.?, iserialno.?, szprodid.?, iprodqty.?, cdunitsale.?, szprodname.?, fsaleprice.?, fdiscountprice.?, cdcurrency.?, fmoney.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdproject).shaped.<>({r=>import r._; _1.map(_=> TblinvdetailRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10.get, _11.get, _12.get, _13.get, _14, _15, _16, _17, _18, _19)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[String] = column[String]("cdInvNo", O.Length(10,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[String] = column[String]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[String] = column[String]("szBillMonth", O.Length(2,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column cdUnitSale DBType(char), Length(3,false) */
    val cdunitsale: Column[String] = column[String]("cdUnitSale", O.Length(3,varying=false))
    /** Database column szProdName DBType(nchar), Length(255,false) */
    val szprodname: Column[String] = column[String]("szProdName", O.Length(255,varying=false))
    /** Database column fSalePrice DBType(float) */
    val fsaleprice: Column[Double] = column[Double]("fSalePrice")
    /** Database column fDiscountPrice DBType(float) */
    val fdiscountprice: Column[Double] = column[Double]("fDiscountPrice")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fMoney DBType(float) */
    val fmoney: Column[Double] = column[Double]("fMoney")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
    
    /** Primary key of Tblinvdetail (database name PK_tblBillDetail) */
    val pk = primaryKey("PK_tblBillDetail", (cdinvno, szbillyear, szbillmonth, iserialno))
  }
  /** Collection-like TableQuery object for table Tblinvdetail */
  lazy val Tblinvdetail = new TableQuery(tag => new Tblinvdetail(tag))
  
  /** Entity class storing rows of table Tblinvdiscdetail
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdinvno Database column cdInvNo DBType(char), Length(10,false)
   *  @param szbillyear Database column szBillYear DBType(char), Length(4,false)
   *  @param szbillmonth Database column szBillMonth DBType(char), Length(2,false)
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param iprodqty Database column iProdQty DBType(int)
   *  @param cdunitsale Database column cdUnitSale DBType(char), Length(3,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(255,false)
   *  @param fsaleprice Database column fSalePrice DBType(float)
   *  @param fdiscountprice Database column fdiscountPrice DBType(float)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param fmoney Database column fMoney DBType(float)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byts DBType(timestamp)
   *  @param cdproject Database column cdProject DBType(char), Length(15,false)
   *  @param cddiscinvoice Database column cdDiscInvoice DBType(char), Length(10,false), Default(Some()) */
  case class TblinvdiscdetailRow(uid: Option[String], cdinvno: String, szbillyear: String, szbillmonth: String, iserialno: Int, szprodid: Option[String], iprodqty: Option[Int], cdunitsale: Option[String], szprodname: Option[String], fsaleprice: Option[Double], fdiscountprice: Option[Double], cdcurrency: Option[String], fmoney: Option[Double], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdproject: Option[String], cddiscinvoice: Option[String] = Some(""))
  /** GetResult implicit for fetching TblinvdiscdetailRow objects using plain SQL queries */
  implicit def GetResultTblinvdiscdetailRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Int], e3: GR[Option[Int]], e4: GR[Option[Double]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblinvdiscdetailRow] = GR{
    prs => import prs._
    TblinvdiscdetailRow.tupled((<<?[String], <<[String], <<[String], <<[String], <<[Int], <<?[String], <<?[Int], <<?[String], <<?[String], <<?[Double], <<?[Double], <<?[String], <<?[Double], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String], <<?[String]))
  }
  /** Table description of table tblInvDiscDetail. Objects of this class serve as prototypes for rows in queries. */
  class Tblinvdiscdetail(_tableTag: Tag) extends Table[TblinvdiscdetailRow](_tableTag, Some("dbo"), "tblInvDiscDetail") {
    def * = (uid, cdinvno, szbillyear, szbillmonth, iserialno, szprodid, iprodqty, cdunitsale, szprodname, fsaleprice, fdiscountprice, cdcurrency, fmoney, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdproject, cddiscinvoice) <> (TblinvdiscdetailRow.tupled, TblinvdiscdetailRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdinvno.?, szbillyear.?, szbillmonth.?, iserialno.?, szprodid, iprodqty, cdunitsale, szprodname, fsaleprice, fdiscountprice, cdcurrency, fmoney, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdproject, cddiscinvoice).shaped.<>({r=>import r._; _2.map(_=> TblinvdiscdetailRow.tupled((_1, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[String] = column[String]("cdInvNo", O.Length(10,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[String] = column[String]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[String] = column[String]("szBillMonth", O.Length(2,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[Option[String]] = column[Option[String]]("szProdID", O.Length(15,varying=false))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Option[Int]] = column[Option[Int]]("iProdQty")
    /** Database column cdUnitSale DBType(char), Length(3,false) */
    val cdunitsale: Column[Option[String]] = column[Option[String]]("cdUnitSale", O.Length(3,varying=false))
    /** Database column szProdName DBType(nchar), Length(255,false) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(255,varying=false))
    /** Database column fSalePrice DBType(float) */
    val fsaleprice: Column[Option[Double]] = column[Option[Double]]("fSalePrice")
    /** Database column fdiscountPrice DBType(float) */
    val fdiscountprice: Column[Option[Double]] = column[Option[Double]]("fdiscountPrice")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column fMoney DBType(float) */
    val fmoney: Column[Option[Double]] = column[Option[Double]]("fMoney")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
    /** Database column cdDiscInvoice DBType(char), Length(10,false), Default(Some()) */
    val cddiscinvoice: Column[Option[String]] = column[Option[String]]("cdDiscInvoice", O.Length(10,varying=false), O.Default(Some("")))
    
    /** Primary key of Tblinvdiscdetail (database name PK_tblInvDiscDetail) */
    val pk = primaryKey("PK_tblInvDiscDetail", (cdinvno, szbillyear, szbillmonth, iserialno))
  }
  /** Collection-like TableQuery object for table Tblinvdiscdetail */
  lazy val Tblinvdiscdetail = new TableQuery(tag => new Tblinvdiscdetail(tag))
  
  /** Row type of table Tblinvdiscount */
  type TblinvdiscountRow = HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblinvdiscountRow providing default values if available in the database schema. */
  def TblinvdiscountRow(uid: String, cdpersa: Option[String], cdpersg: Option[String], dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], cddiscinvoice: Option[String], cdinvoiceno: String, cdinvoicechk: Option[String], cdmachine: Option[String], cdbuyertype: Option[String], cdbuyer: Option[String], szbuyer: Option[String], cdtaxtype: Option[String], cdstatus: Option[String], iamtbefor: Option[Int] = Some(0), iamttax: Option[Int] = Some(0), iamttotal: Option[Int] = Some(0), isissue: Option[Boolean] = Some(false), dtissue: Option[java.sql.Timestamp], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdorderno: Option[String], cdmember: Option[String], cdcurrency: Option[String], sznote: Option[String], cdmemkind: Option[String], szvisanote: Option[String], dtbusinessdate: Option[java.sql.Timestamp]): TblinvdiscountRow = {
    uid :: cdpersa :: cdpersg :: dtstrdate :: dtenddate :: cddiscinvoice :: cdinvoiceno :: cdinvoicechk :: cdmachine :: cdbuyertype :: cdbuyer :: szbuyer :: cdtaxtype :: cdstatus :: iamtbefor :: iamttax :: iamttotal :: isissue :: dtissue :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdorderno :: cdmember :: cdcurrency :: sznote :: cdmemkind :: szvisanote :: dtbusinessdate :: HNil
  }
  /** GetResult implicit for fetching TblinvdiscountRow objects using plain SQL queries */
  implicit def GetResultTblinvdiscountRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Int]], e4: GR[Option[Boolean]], e5: GR[Option[java.sql.Blob]]): GR[TblinvdiscountRow] = GR{
    prs => import prs._
    <<[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblInvDiscount. Objects of this class serve as prototypes for rows in queries. */
  class Tblinvdiscount(_tableTag: Tag) extends Table[TblinvdiscountRow](_tableTag, Some("dbo"), "tblInvDiscount") {
    def * = uid :: cdpersa :: cdpersg :: dtstrdate :: dtenddate :: cddiscinvoice :: cdinvoiceno :: cdinvoicechk :: cdmachine :: cdbuyertype :: cdbuyer :: szbuyer :: cdtaxtype :: cdstatus :: iamtbefor :: iamttax :: iamttotal :: isissue :: dtissue :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdorderno :: cdmember :: cdcurrency :: sznote :: cdmemkind :: szvisanote :: dtbusinessdate :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[Option[String]] = column[Option[String]]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSg DBType(char), Length(4,false) */
    val cdpersg: Column[Option[String]] = column[Option[String]]("cdPerSg", O.Length(4,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column cdDiscInvoice DBType(char), Length(10,false) */
    val cddiscinvoice: Column[Option[String]] = column[Option[String]]("cdDiscInvoice", O.Length(10,varying=false))
    /** Database column cdInvoiceNo DBType(char), Length(10,false) */
    val cdinvoiceno: Column[String] = column[String]("cdInvoiceNo", O.Length(10,varying=false))
    /** Database column cdInvoiceChk DBType(char), Length(1,false) */
    val cdinvoicechk: Column[Option[String]] = column[Option[String]]("cdInvoiceChk", O.Length(1,varying=false))
    /** Database column cdMachine DBType(char), Length(2,false) */
    val cdmachine: Column[Option[String]] = column[Option[String]]("cdMachine", O.Length(2,varying=false))
    /** Database column cdBuyerType DBType(char), Length(1,false) */
    val cdbuyertype: Column[Option[String]] = column[Option[String]]("cdBuyerType", O.Length(1,varying=false))
    /** Database column cdBuyer DBType(char), Length(10,false) */
    val cdbuyer: Column[Option[String]] = column[Option[String]]("cdBuyer", O.Length(10,varying=false))
    /** Database column szBuyer DBType(nchar), Length(80,false) */
    val szbuyer: Column[Option[String]] = column[Option[String]]("szBuyer", O.Length(80,varying=false))
    /** Database column cdTaxType DBType(char), Length(1,false) */
    val cdtaxtype: Column[Option[String]] = column[Option[String]]("cdTaxType", O.Length(1,varying=false))
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column iAmtBefor DBType(int), Default(Some(0)) */
    val iamtbefor: Column[Option[Int]] = column[Option[Int]]("iAmtBefor", O.Default(Some(0)))
    /** Database column iAmtTax DBType(int), Default(Some(0)) */
    val iamttax: Column[Option[Int]] = column[Option[Int]]("iAmtTax", O.Default(Some(0)))
    /** Database column iAmtTotal DBType(int), Default(Some(0)) */
    val iamttotal: Column[Option[Int]] = column[Option[Int]]("iAmtTotal", O.Default(Some(0)))
    /** Database column isIssue DBType(bit), Default(Some(false)) */
    val isissue: Column[Option[Boolean]] = column[Option[Boolean]]("isIssue", O.Default(Some(false)))
    /** Database column dtIssue DBType(datetime) */
    val dtissue: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtIssue")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column szVisaNote DBType(nchar), Length(255,false) */
    val szvisanote: Column[Option[String]] = column[Option[String]]("szVisaNote", O.Length(255,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    
    /** Index over (dtbusinessdate,cdmember) (database name IX_tblInvDiscount) */
    val index1 = index("IX_tblInvDiscount", dtbusinessdate :: cdmember :: HNil)
    /** Index over (dtstrdate,cdorderno) (database name IX_tblInvDiscount_1) */
    val index2 = index("IX_tblInvDiscount_1", dtstrdate :: cdorderno :: HNil)
    /** Index over (cddiscinvoice,cdinvoiceno) (database name IX_tblInvDiscount_3) */
    val index3 = index("IX_tblInvDiscount_3", cddiscinvoice :: cdinvoiceno :: HNil)
  }
  /** Collection-like TableQuery object for table Tblinvdiscount */
  lazy val Tblinvdiscount = new TableQuery(tag => new Tblinvdiscount(tag))
  
  /** Entity class storing rows of table Tblinventory
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdinvno Database column cdInvNo DBType(char), Length(14,false)
   *  @param dtinvdate Database column dtInvDate DBType(datetime)
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param isinvcheck Database column isInvCheck DBType(bit)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblinventoryRow(uid: String, cdinvno: String, dtinvdate: java.sql.Timestamp, cdwarehouse: String, isinvcheck: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblinventoryRow objects using plain SQL queries */
  implicit def GetResultTblinventoryRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[Boolean]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]]): GR[TblinventoryRow] = GR{
    prs => import prs._
    TblinventoryRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblInventory. Objects of this class serve as prototypes for rows in queries. */
  class Tblinventory(_tableTag: Tag) extends Table[TblinventoryRow](_tableTag, Some("dbo"), "tblInventory") {
    def * = (uid, cdinvno, dtinvdate, cdwarehouse, isinvcheck, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblinventoryRow.tupled, TblinventoryRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdinvno.?, dtinvdate.?, cdwarehouse.?, isinvcheck, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblinventoryRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdInvNo DBType(char), Length(14,false) */
    val cdinvno: Column[String] = column[String]("cdInvNo", O.Length(14,varying=false))
    /** Database column dtInvDate DBType(datetime) */
    val dtinvdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtInvDate")
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column isInvCheck DBType(bit) */
    val isinvcheck: Column[Option[Boolean]] = column[Option[Boolean]]("isInvCheck")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblinventory (database name PK_tblInventory) */
    val pk = primaryKey("PK_tblInventory", (cdinvno, cdwarehouse))
  }
  /** Collection-like TableQuery object for table Tblinventory */
  lazy val Tblinventory = new TableQuery(tag => new Tblinventory(tag))
  
  /** Entity class storing rows of table Tblinventoryd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdinvno Database column cdInvNo DBType(char), Length(14,false)
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param cdwareid Database column cdWareID DBType(char), Length(15,false)
   *  @param iinvqty Database column iInvQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblinventorydRow(uid: String, cdinvno: String, cdwarehouse: String, iseq: Int, cdwareid: Option[String], iinvqty: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblinventorydRow objects using plain SQL queries */
  implicit def GetResultTblinventorydRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]]): GR[TblinventorydRow] = GR{
    prs => import prs._
    TblinventorydRow.tupled((<<[String], <<[String], <<[String], <<[Int], <<?[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblInventoryD. Objects of this class serve as prototypes for rows in queries. */
  class Tblinventoryd(_tableTag: Tag) extends Table[TblinventorydRow](_tableTag, Some("dbo"), "tblInventoryD") {
    def * = (uid, cdinvno, cdwarehouse, iseq, cdwareid, iinvqty, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblinventorydRow.tupled, TblinventorydRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdinvno.?, cdwarehouse.?, iseq.?, cdwareid, iinvqty, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblinventorydRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdInvNo DBType(char), Length(14,false) */
    val cdinvno: Column[String] = column[String]("cdInvNo", O.Length(14,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdWareID DBType(char), Length(15,false) */
    val cdwareid: Column[Option[String]] = column[Option[String]]("cdWareID", O.Length(15,varying=false))
    /** Database column iInvQty DBType(int) */
    val iinvqty: Column[Option[Int]] = column[Option[Int]]("iInvQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblinventoryd (database name PK_tblInventoryD) */
    val pk = primaryKey("PK_tblInventoryD", (cdinvno, cdwarehouse, iseq))
  }
  /** Collection-like TableQuery object for table Tblinventoryd */
  lazy val Tblinventoryd = new TableQuery(tag => new Tblinventoryd(tag))
  
  /** Entity class storing rows of table Tblinvmachine
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmachine Database column cdMachine DBType(char), Length(2,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(10,false)
   *  @param cdpersg Database column cdPerSg DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblinvmachineRow(uid: String, cdmachine: Option[String], cdpersa: Option[String], cdpersg: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblinvmachineRow objects using plain SQL queries */
  implicit def GetResultTblinvmachineRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblinvmachineRow] = GR{
    prs => import prs._
    TblinvmachineRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblInvMachine. Objects of this class serve as prototypes for rows in queries. */
  class Tblinvmachine(_tableTag: Tag) extends Table[TblinvmachineRow](_tableTag, Some("dbo"), "tblInvMachine") {
    def * = (uid, cdmachine, cdpersa, cdpersg, uidcreator, dtcreate) <> (TblinvmachineRow.tupled, TblinvmachineRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmachine, cdpersa, cdpersg, uidcreator, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblinvmachineRow.tupled((_1.get, _2, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMachine DBType(char), Length(2,false) */
    val cdmachine: Column[Option[String]] = column[Option[String]]("cdMachine", O.Length(2,varying=false))
    /** Database column cdPerSa DBType(char), Length(10,false) */
    val cdpersa: Column[Option[String]] = column[Option[String]]("cdPerSa", O.Length(10,varying=false))
    /** Database column cdPerSg DBType(char), Length(10,false) */
    val cdpersg: Column[Option[String]] = column[Option[String]]("cdPerSg", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
  }
  /** Collection-like TableQuery object for table Tblinvmachine */
  lazy val Tblinvmachine = new TableQuery(tag => new Tblinvmachine(tag))
  
  /** Entity class storing rows of table Tblinvmachined
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szdesc Database column szDesc DBType(nchar), Length(80,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblinvmachinedRow(uid: String, uidrelation: Option[String], cdlanguage: Option[String], szdesc: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblinvmachinedRow objects using plain SQL queries */
  implicit def GetResultTblinvmachinedRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblinvmachinedRow] = GR{
    prs => import prs._
    TblinvmachinedRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblInvMachineD. Objects of this class serve as prototypes for rows in queries. */
  class Tblinvmachined(_tableTag: Tag) extends Table[TblinvmachinedRow](_tableTag, Some("dbo"), "tblInvMachineD") {
    def * = (uid, uidrelation, cdlanguage, szdesc, uidmodifier, dtmodify) <> (TblinvmachinedRow.tupled, TblinvmachinedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation, cdlanguage, szdesc, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblinvmachinedRow.tupled((_1.get, _2, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column szDesc DBType(nchar), Length(80,false) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(80,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblinvmachined */
  lazy val Tblinvmachined = new TableQuery(tag => new Tblinvmachined(tag))
  
  /** Entity class storing rows of table Tblinvmaster
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdinvno Database column cdInvNo DBType(char), Length(10,false)
   *  @param szbillyear Database column szBillYear DBType(char), Length(4,false)
   *  @param szbillmonth Database column szBillMonth DBType(char), Length(2,false)
   *  @param isvaild Database column isVaild DBType(bit), Default(true)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param cdprefix Database column cdPrefix DBType(char), Length(2,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdcid Database column cdCid DBType(char), Length(10,false), Default(Some())
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param ftotalmoney Database column fTotalMoney DBType(float)
   *  @param sznote Database column szNote DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblinvmasterRow(uid: String, cdinvno: String, szbillyear: String, szbillmonth: String, isvaild: Boolean = true, cdorderno: String, cdprefix: String, cdmember: String, cdcid: Option[String] = Some(""), cdcurrency: String, ftotalmoney: Double, sznote: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblinvmasterRow objects using plain SQL queries */
  implicit def GetResultTblinvmasterRow(implicit e0: GR[String], e1: GR[Boolean], e2: GR[Option[String]], e3: GR[Double], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblinvmasterRow] = GR{
    prs => import prs._
    TblinvmasterRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[Boolean], <<[String], <<[String], <<[String], <<?[String], <<[String], <<[Double], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblInvMaster. Objects of this class serve as prototypes for rows in queries. */
  class Tblinvmaster(_tableTag: Tag) extends Table[TblinvmasterRow](_tableTag, Some("dbo"), "tblInvMaster") {
    def * = (uid, cdinvno, szbillyear, szbillmonth, isvaild, cdorderno, cdprefix, cdmember, cdcid, cdcurrency, ftotalmoney, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblinvmasterRow.tupled, TblinvmasterRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdinvno.?, szbillyear.?, szbillmonth.?, isvaild.?, cdorderno.?, cdprefix.?, cdmember.?, cdcid, cdcurrency.?, ftotalmoney.?, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblinvmasterRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9, _10.get, _11.get, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[String] = column[String]("cdInvNo", O.Length(10,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[String] = column[String]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[String] = column[String]("szBillMonth", O.Length(2,varying=false))
    /** Database column isVaild DBType(bit), Default(true) */
    val isvaild: Column[Boolean] = column[Boolean]("isVaild", O.Default(true))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column cdPrefix DBType(char), Length(2,false) */
    val cdprefix: Column[String] = column[String]("cdPrefix", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdCid DBType(char), Length(10,false), Default(Some()) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fTotalMoney DBType(float) */
    val ftotalmoney: Column[Double] = column[Double]("fTotalMoney")
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblinvmaster (database name PK_tblBillMaster) */
    val pk = primaryKey("PK_tblBillMaster", (cdinvno, szbillyear, szbillmonth))
  }
  /** Collection-like TableQuery object for table Tblinvmaster */
  lazy val Tblinvmaster = new TableQuery(tag => new Tblinvmaster(tag))
  
  /** Entity class storing rows of table Tblinvsetup
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param szbillyear Database column szBillYear DBType(char), Length(4,false)
   *  @param szbillmonth Database column szBillMonth DBType(char), Length(2,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param cdbillcode Database column cdBillCode DBType(char), Length(2,false)
   *  @param istartno Database column iStartNo DBType(int)
   *  @param iendno Database column iEndNo DBType(int), Default(-1)
   *  @param icurrentno Database column iCurrentNo DBType(int)
   *  @param isusefull Database column isUseFull DBType(bit), Default(false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblinvsetupRow(uid: String, szbillyear: String, szbillmonth: String, iseq: Int, cdbillcode: String, istartno: Int, iendno: Int = -1, icurrentno: Int, isusefull: Boolean = false, uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblinvsetupRow objects using plain SQL queries */
  implicit def GetResultTblinvsetupRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Boolean], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblinvsetupRow] = GR{
    prs => import prs._
    TblinvsetupRow.tupled((<<[String], <<[String], <<[String], <<[Int], <<[String], <<[Int], <<[Int], <<[Int], <<[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblInvSetup. Objects of this class serve as prototypes for rows in queries. */
  class Tblinvsetup(_tableTag: Tag) extends Table[TblinvsetupRow](_tableTag, Some("dbo"), "tblInvSetup") {
    def * = (uid, szbillyear, szbillmonth, iseq, cdbillcode, istartno, iendno, icurrentno, isusefull, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblinvsetupRow.tupled, TblinvsetupRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szbillyear.?, szbillmonth.?, iseq.?, cdbillcode.?, istartno.?, iendno.?, icurrentno.?, isusefull.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblinvsetupRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[String] = column[String]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[String] = column[String]("szBillMonth", O.Length(2,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdBillCode DBType(char), Length(2,false) */
    val cdbillcode: Column[String] = column[String]("cdBillCode", O.Length(2,varying=false))
    /** Database column iStartNo DBType(int) */
    val istartno: Column[Int] = column[Int]("iStartNo")
    /** Database column iEndNo DBType(int), Default(-1) */
    val iendno: Column[Int] = column[Int]("iEndNo", O.Default(-1))
    /** Database column iCurrentNo DBType(int) */
    val icurrentno: Column[Int] = column[Int]("iCurrentNo")
    /** Database column isUseFull DBType(bit), Default(false) */
    val isusefull: Column[Boolean] = column[Boolean]("isUseFull", O.Default(false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblinvsetup (database name PK_tblBillList) */
    val pk = primaryKey("PK_tblBillList", (szbillyear, szbillmonth, iseq))
  }
  /** Collection-like TableQuery object for table Tblinvsetup */
  lazy val Tblinvsetup = new TableQuery(tag => new Tblinvsetup(tag))
  
  /** Entity class storing rows of table Tblloanback
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdloanno Database column cdLoanNo DBType(char), Length(14,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param cdbacktype Database column cdBackType DBType(char), Length(1,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false), Default()
   *  @param dtbusiness Database column dtBusiness DBType(datetime)
   *  @param cdprodid Database column cdProdID DBType(char), Length(15,false)
   *  @param iprodbackqty Database column iProdBackQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblloanbackRow(uid: String, cdloanno: String, iseq: Int, cdbacktype: String, cdorderno: String = "", dtbusiness: java.sql.Timestamp, cdprodid: String, iprodbackqty: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblloanbackRow objects using plain SQL queries */
  implicit def GetResultTblloanbackRow(implicit e0: GR[String], e1: GR[Int], e2: GR[java.sql.Timestamp], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblloanbackRow] = GR{
    prs => import prs._
    TblloanbackRow.tupled((<<[String], <<[String], <<[Int], <<[String], <<[String], <<[java.sql.Timestamp], <<[String], <<[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblLoanBack. Objects of this class serve as prototypes for rows in queries. */
  class Tblloanback(_tableTag: Tag) extends Table[TblloanbackRow](_tableTag, Some("dbo"), "tblLoanBack") {
    def * = (uid, cdloanno, iseq, cdbacktype, cdorderno, dtbusiness, cdprodid, iprodbackqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblloanbackRow.tupled, TblloanbackRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdloanno.?, iseq.?, cdbacktype.?, cdorderno.?, dtbusiness.?, cdprodid.?, iprodbackqty.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblloanbackRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9, _10, _11, _12, _13)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdLoanNo DBType(char), Length(14,false) */
    val cdloanno: Column[String] = column[String]("cdLoanNo", O.Length(14,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdBackType DBType(char), Length(1,false) */
    val cdbacktype: Column[String] = column[String]("cdBackType", O.Length(1,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false), Default() */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false), O.Default(""))
    /** Database column dtBusiness DBType(datetime) */
    val dtbusiness: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusiness")
    /** Database column cdProdID DBType(char), Length(15,false) */
    val cdprodid: Column[String] = column[String]("cdProdID", O.Length(15,varying=false))
    /** Database column iProdBackQty DBType(int) */
    val iprodbackqty: Column[Int] = column[Int]("iProdBackQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblloanback (database name PK_tblLoanBack) */
    val pk = primaryKey("PK_tblLoanBack", (cdloanno, iseq))
  }
  /** Collection-like TableQuery object for table Tblloanback */
  lazy val Tblloanback = new TableQuery(tag => new Tblloanback(tag))
  
  /** Entity class storing rows of table Tblloandetail
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdloanno Database column cdLoanNo DBType(char), Length(14,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param dtbusiness Database column dtBusiness DBType(datetime)
   *  @param cdprodid Database column cdProdID DBType(char), Length(15,false)
   *  @param iprodqty Database column iProdQty DBType(int)
   *  @param iprodbackqty Database column iProdBackQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblloandetailRow(uid: String, cdloanno: String, iseq: Int, dtbusiness: java.sql.Timestamp, cdprodid: String, iprodqty: Int, iprodbackqty: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblloandetailRow objects using plain SQL queries */
  implicit def GetResultTblloandetailRow(implicit e0: GR[String], e1: GR[Int], e2: GR[java.sql.Timestamp], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblloandetailRow] = GR{
    prs => import prs._
    TblloandetailRow.tupled((<<[String], <<[String], <<[Int], <<[java.sql.Timestamp], <<[String], <<[Int], <<[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblLoanDetail. Objects of this class serve as prototypes for rows in queries. */
  class Tblloandetail(_tableTag: Tag) extends Table[TblloandetailRow](_tableTag, Some("dbo"), "tblLoanDetail") {
    def * = (uid, cdloanno, iseq, dtbusiness, cdprodid, iprodqty, iprodbackqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblloandetailRow.tupled, TblloandetailRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdloanno.?, iseq.?, dtbusiness.?, cdprodid.?, iprodqty.?, iprodbackqty.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblloandetailRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdLoanNo DBType(char), Length(14,false) */
    val cdloanno: Column[String] = column[String]("cdLoanNo", O.Length(14,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column dtBusiness DBType(datetime) */
    val dtbusiness: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusiness")
    /** Database column cdProdID DBType(char), Length(15,false) */
    val cdprodid: Column[String] = column[String]("cdProdID", O.Length(15,varying=false))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column iProdBackQty DBType(int) */
    val iprodbackqty: Column[Int] = column[Int]("iProdBackQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblloandetail (database name PK_tblLoanDetail) */
    val pk = primaryKey("PK_tblLoanDetail", (cdloanno, iseq))
  }
  /** Collection-like TableQuery object for table Tblloandetail */
  lazy val Tblloandetail = new TableQuery(tag => new Tblloandetail(tag))
  
  /** Entity class storing rows of table Tblloanmaster
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdloanno Database column cdLoanNo DBType(char), PrimaryKey, Length(14,false)
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param sznote Database column szNote DBType(nchar), Length(255,false), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblloanmasterRow(uid: String, cdloanno: String, cdwarehouse: String, cdmember: String, sznote: Option[String] = Some(""), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblloanmasterRow objects using plain SQL queries */
  implicit def GetResultTblloanmasterRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblloanmasterRow] = GR{
    prs => import prs._
    TblloanmasterRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblLoanMaster. Objects of this class serve as prototypes for rows in queries. */
  class Tblloanmaster(_tableTag: Tag) extends Table[TblloanmasterRow](_tableTag, Some("dbo"), "tblLoanMaster") {
    def * = (uid, cdloanno, cdwarehouse, cdmember, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblloanmasterRow.tupled, TblloanmasterRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdloanno.?, cdwarehouse.?, cdmember.?, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblloanmasterRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdLoanNo DBType(char), PrimaryKey, Length(14,false) */
    val cdloanno: Column[String] = column[String]("cdLoanNo", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column szNote DBType(nchar), Length(255,false), Default(Some()) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Index over (cdmember) (database name cdMember) */
    val index1 = index("cdMember", cdmember)
  }
  /** Collection-like TableQuery object for table Tblloanmaster */
  lazy val Tblloanmaster = new TableQuery(tag => new Tblloanmaster(tag))
  
  /** Row type of table Tblloopapply */
  type TblloopapplyRow = HCons[String,HCons[Option[String],HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Double],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblloopapplyRow providing default values if available in the database schema. */
  def TblloopapplyRow(uid: String, cdcenter: Option[String] = Some(""), cdapplyno: String = "", dtapplydate: Option[java.sql.Timestamp], cdmember: Option[String] = Some(""), szapplyname: Option[String] = Some(""), szreceiver: Option[String] = Some(""), sztel: Option[String] = Some(""), cdreceivetime: Option[String] = Some(""), cdpaytype: Option[String] = Some(""), cdprodcombination: Option[String] = Some(""), uida006: Option[String], uidcard1: Option[String], uidcard2: Option[String], uidbankaccount: Option[String], dteffective: Option[java.sql.Timestamp], szremark: Option[String], isinvalid: Option[Boolean] = Some(false), famount: Option[Double] = Some(0.0), dtstart: Option[java.sql.Timestamp], dtend: Option[java.sql.Timestamp], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], cdkind: Option[String]): TblloopapplyRow = {
    uid :: cdcenter :: cdapplyno :: dtapplydate :: cdmember :: szapplyname :: szreceiver :: sztel :: cdreceivetime :: cdpaytype :: cdprodcombination :: uida006 :: uidcard1 :: uidcard2 :: uidbankaccount :: dteffective :: szremark :: isinvalid :: famount :: dtstart :: dtend :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: cdkind :: HNil
  }
  /** GetResult implicit for fetching TblloopapplyRow objects using plain SQL queries */
  implicit def GetResultTblloopapplyRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]], e4: GR[Option[Double]]): GR[TblloopapplyRow] = GR{
    prs => import prs._
    <<[String] :: <<?[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Boolean] :: <<?[Double] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: HNil
  }
  /** Table description of table tblLoopApply. Objects of this class serve as prototypes for rows in queries. */
  class Tblloopapply(_tableTag: Tag) extends Table[TblloopapplyRow](_tableTag, Some("dbo"), "tblLoopApply") {
    def * = uid :: cdcenter :: cdapplyno :: dtapplydate :: cdmember :: szapplyname :: szreceiver :: sztel :: cdreceivetime :: cdpaytype :: cdprodcombination :: uida006 :: uidcard1 :: uidcard2 :: uidbankaccount :: dteffective :: szremark :: isinvalid :: famount :: dtstart :: dtend :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: cdkind :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(10,false), Default(Some()) */
    val cdcenter: Column[Option[String]] = column[Option[String]]("cdCenter", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdApplyNo DBType(char), Length(9,false), Default() */
    val cdapplyno: Column[String] = column[String]("cdApplyNo", O.Length(9,varying=false), O.Default(""))
    /** Database column dtApplyDate DBType(datetime) */
    val dtapplydate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtApplyDate")
    /** Database column cdMember DBType(char), Length(10,false), Default(Some()) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szApplyName DBType(nchar), Length(50,false), Default(Some()) */
    val szapplyname: Column[Option[String]] = column[Option[String]]("szApplyName", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szReceiver DBType(nchar), Length(50,false), Default(Some()) */
    val szreceiver: Column[Option[String]] = column[Option[String]]("szReceiver", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szTel DBType(char), Length(20,false), Default(Some()) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column cdReceiveTime DBType(char), Length(1,false), Default(Some()) */
    val cdreceivetime: Column[Option[String]] = column[Option[String]]("cdReceiveTime", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdPayType DBType(char), Length(1,false), Default(Some()) */
    val cdpaytype: Column[Option[String]] = column[Option[String]]("cdPayType", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdProdCombination DBType(char), Length(10,false), Default(Some()) */
    val cdprodcombination: Column[Option[String]] = column[Option[String]]("cdProdCombination", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column uidA006 DBType(uniqueidentifier), Length(36,false) */
    val uida006: Column[Option[String]] = column[Option[String]]("uidA006", O.Length(36,varying=false))
    /** Database column uidCard1 DBType(uniqueidentifier), Length(36,false) */
    val uidcard1: Column[Option[String]] = column[Option[String]]("uidCard1", O.Length(36,varying=false))
    /** Database column uidCard2 DBType(uniqueidentifier), Length(36,false) */
    val uidcard2: Column[Option[String]] = column[Option[String]]("uidCard2", O.Length(36,varying=false))
    /** Database column uidBankAccount DBType(uniqueidentifier), Length(36,false) */
    val uidbankaccount: Column[Option[String]] = column[Option[String]]("uidBankAccount", O.Length(36,varying=false))
    /** Database column dtEffective DBType(datetime) */
    val dteffective: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEffective")
    /** Database column szRemark DBType(nchar), Length(120,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(120,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column fAmount DBType(float), Default(Some(0.0)) */
    val famount: Column[Option[Double]] = column[Option[Double]]("fAmount", O.Default(Some(0.0)))
    /** Database column dtStart DBType(datetime) */
    val dtstart: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStart")
    /** Database column dtEnd DBType(datetime) */
    val dtend: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEnd")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdKind DBType(char), Length(10,false) */
    val cdkind: Column[Option[String]] = column[Option[String]]("cdKind", O.Length(10,varying=false))
    
    /** Index over (cdapplyno) (database name IX_tblLoopApply) */
    val index1 = index("IX_tblLoopApply", cdapplyno :: HNil)
  }
  /** Collection-like TableQuery object for table Tblloopapply */
  lazy val Tblloopapply = new TableQuery(tag => new Tblloopapply(tag))
  
  /** Entity class storing rows of table Tblloopapplypause
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdapplyno Database column cdApplyNo DBType(nchar), Length(10,false)
   *  @param dtpauses Database column dtPauseS DBType(datetime)
   *  @param dtpausee Database column dtPauseE DBType(datetime)
   *  @param cdflag Database column cdFlag DBType(nchar), Length(10,false), Default(Some())
   *  @param szremark Database column szRemark DBType(nchar), Length(256,false)
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblloopapplypauseRow(uid: String, cdmember: Option[String], cdapplyno: Option[String], dtpauses: Option[java.sql.Timestamp], dtpausee: Option[java.sql.Timestamp], cdflag: Option[String] = Some(""), szremark: Option[String], isinvalid: Option[Boolean] = Some(false), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblloopapplypauseRow objects using plain SQL queries */
  implicit def GetResultTblloopapplypauseRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]]): GR[TblloopapplypauseRow] = GR{
    prs => import prs._
    TblloopapplypauseRow.tupled((<<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblLoopApplyPause. Objects of this class serve as prototypes for rows in queries. */
  class Tblloopapplypause(_tableTag: Tag) extends Table[TblloopapplypauseRow](_tableTag, Some("dbo"), "tblLoopApplyPause") {
    def * = (uid, cdmember, cdapplyno, dtpauses, dtpausee, cdflag, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblloopapplypauseRow.tupled, TblloopapplypauseRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember, cdapplyno, dtpauses, dtpausee, cdflag, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblloopapplypauseRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column cdApplyNo DBType(nchar), Length(10,false) */
    val cdapplyno: Column[Option[String]] = column[Option[String]]("cdApplyNo", O.Length(10,varying=false))
    /** Database column dtPauseS DBType(datetime) */
    val dtpauses: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPauseS")
    /** Database column dtPauseE DBType(datetime) */
    val dtpausee: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPauseE")
    /** Database column cdFlag DBType(nchar), Length(10,false), Default(Some()) */
    val cdflag: Column[Option[String]] = column[Option[String]]("cdFlag", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(256,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(256,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblloopapplypause */
  lazy val Tblloopapplypause = new TableQuery(tag => new Tblloopapplypause(tag))
  
  /** Entity class storing rows of table Tblloopcombination
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param imonth Database column iMonth DBType(int)
   *  @param cdproduct Database column cdProduct DBType(char), Length(15,false)
   *  @param iqty Database column iQty DBType(int), Default(Some(1))
   *  @param isvalid Database column isValid DBType(bit), Default(Some(true))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(char), Length(10,false) */
  case class TblloopcombinationRow(uid: String, imonth: Option[Int], cdproduct: Option[String], iqty: Option[Int] = Some(1), isvalid: Option[Boolean] = Some(true), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[String])
  /** GetResult implicit for fetching TblloopcombinationRow objects using plain SQL queries */
  implicit def GetResultTblloopcombinationRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]]): GR[TblloopcombinationRow] = GR{
    prs => import prs._
    TblloopcombinationRow.tupled((<<[String], <<?[Int], <<?[String], <<?[Int], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String]))
  }
  /** Table description of table tblLoopCombination. Objects of this class serve as prototypes for rows in queries. */
  class Tblloopcombination(_tableTag: Tag) extends Table[TblloopcombinationRow](_tableTag, Some("dbo"), "tblLoopCombination") {
    def * = (uid, imonth, cdproduct, iqty, isvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblloopcombinationRow.tupled, TblloopcombinationRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, imonth, cdproduct, iqty, isvalid, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblloopcombinationRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column iMonth DBType(int) */
    val imonth: Column[Option[Int]] = column[Option[Int]]("iMonth")
    /** Database column cdProduct DBType(char), Length(15,false) */
    val cdproduct: Column[Option[String]] = column[Option[String]]("cdProduct", O.Length(15,varying=false))
    /** Database column iQty DBType(int), Default(Some(1)) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty", O.Default(Some(1)))
    /** Database column isValid DBType(bit), Default(Some(true)) */
    val isvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isValid", O.Default(Some(true)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(char), Length(10,false) */
    val dtmodify: Column[Option[String]] = column[Option[String]]("dtModify", O.Length(10,varying=false))
  }
  /** Collection-like TableQuery object for table Tblloopcombination */
  lazy val Tblloopcombination = new TableQuery(tag => new Tblloopcombination(tag))
  
  /** Entity class storing rows of table Tbllooporder
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdapplyno Database column cdApplyNo DBType(char), Length(9,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdproduct Database column cdProduct DBType(char), Length(15,false)
   *  @param iqty Database column iQty DBType(int), Default(Some(0))
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbllooporderRow(uid: String, cdapplyno: String, cdmember: String, cdproduct: String, iqty: Option[Int] = Some(0), isinvalid: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbllooporderRow objects using plain SQL queries */
  implicit def GetResultTbllooporderRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[Boolean]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]]): GR[TbllooporderRow] = GR{
    prs => import prs._
    TbllooporderRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[Int], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblLoopOrder. Objects of this class serve as prototypes for rows in queries. */
  class Tbllooporder(_tableTag: Tag) extends Table[TbllooporderRow](_tableTag, Some("dbo"), "tblLoopOrder") {
    def * = (uid, cdapplyno, cdmember, cdproduct, iqty, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TbllooporderRow.tupled, TbllooporderRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdapplyno.?, cdmember.?, cdproduct.?, iqty, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TbllooporderRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdApplyNo DBType(char), Length(9,false) */
    val cdapplyno: Column[String] = column[String]("cdApplyNo", O.Length(9,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdProduct DBType(char), Length(15,false) */
    val cdproduct: Column[String] = column[String]("cdProduct", O.Length(15,varying=false))
    /** Database column iQty DBType(int), Default(Some(0)) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty", O.Default(Some(0)))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Index over (cdapplyno) (database name IX_tblLoopOrder) */
    val index1 = index("IX_tblLoopOrder", cdapplyno)
  }
  /** Collection-like TableQuery object for table Tbllooporder */
  lazy val Tbllooporder = new TableQuery(tag => new Tbllooporder(tag))
  
  /** Entity class storing rows of table Tblloopordercurrent
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdapplyno Database column cdApplyNo DBType(char), Length(9,false), Default()
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdproduct Database column cdProduct DBType(char), Length(15,false)
   *  @param iqty Database column iQty DBType(int), Default(Some(0))
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblloopordercurrentRow(uid: String, cdapplyno: String = "", cdmember: String, cdproduct: String, iqty: Option[Int] = Some(0), isinvalid: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblloopordercurrentRow objects using plain SQL queries */
  implicit def GetResultTblloopordercurrentRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[Boolean]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]]): GR[TblloopordercurrentRow] = GR{
    prs => import prs._
    TblloopordercurrentRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[Int], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblLoopOrderCurrent. Objects of this class serve as prototypes for rows in queries. */
  class Tblloopordercurrent(_tableTag: Tag) extends Table[TblloopordercurrentRow](_tableTag, Some("dbo"), "tblLoopOrderCurrent") {
    def * = (uid, cdapplyno, cdmember, cdproduct, iqty, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblloopordercurrentRow.tupled, TblloopordercurrentRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdapplyno.?, cdmember.?, cdproduct.?, iqty, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblloopordercurrentRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdApplyNo DBType(char), Length(9,false), Default() */
    val cdapplyno: Column[String] = column[String]("cdApplyNo", O.Length(9,varying=false), O.Default(""))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdProduct DBType(char), Length(15,false) */
    val cdproduct: Column[String] = column[String]("cdProduct", O.Length(15,varying=false))
    /** Database column iQty DBType(int), Default(Some(0)) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty", O.Default(Some(0)))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblloopordercurrent */
  lazy val Tblloopordercurrent = new TableQuery(tag => new Tblloopordercurrent(tag))
  
  /** Entity class storing rows of table Tblloopproduct
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdprodid Database column cdProdID DBType(char), Length(15,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdflag1 Database column cdFlag1 DBType(char), Length(10,false), Default(Some())
   *  @param cdflag2 Database column cdFlag2 DBType(char), Length(10,false), Default(Some())
   *  @param cdflag3 Database column cdFlag3 DBType(char), Length(10,false), Default(Some())
   *  @param isvalid Database column isValid DBType(bit), Default(true)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblloopproductRow(uid: String, cdprodid: String, dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], cdflag1: Option[String] = Some(""), cdflag2: Option[String] = Some(""), cdflag3: Option[String] = Some(""), isvalid: Boolean = true, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblloopproductRow objects using plain SQL queries */
  implicit def GetResultTblloopproductRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]], e3: GR[Boolean]): GR[TblloopproductRow] = GR{
    prs => import prs._
    TblloopproductRow.tupled((<<[String], <<[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblLoopProduct. Objects of this class serve as prototypes for rows in queries. */
  class Tblloopproduct(_tableTag: Tag) extends Table[TblloopproductRow](_tableTag, Some("dbo"), "tblLoopProduct") {
    def * = (uid, cdprodid, dtstrdate, dtenddate, cdflag1, cdflag2, cdflag3, isvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblloopproductRow.tupled, TblloopproductRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdprodid.?, dtstrdate, dtenddate, cdflag1, cdflag2, cdflag3, isvalid.?, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblloopproductRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8.get, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdProdID DBType(char), Length(15,false) */
    val cdprodid: Column[String] = column[String]("cdProdID", O.Length(15,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column cdFlag1 DBType(char), Length(10,false), Default(Some()) */
    val cdflag1: Column[Option[String]] = column[Option[String]]("cdFlag1", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdFlag2 DBType(char), Length(10,false), Default(Some()) */
    val cdflag2: Column[Option[String]] = column[Option[String]]("cdFlag2", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdFlag3 DBType(char), Length(10,false), Default(Some()) */
    val cdflag3: Column[Option[String]] = column[Option[String]]("cdFlag3", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column isValid DBType(bit), Default(true) */
    val isvalid: Column[Boolean] = column[Boolean]("isValid", O.Default(true))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblloopproduct */
  lazy val Tblloopproduct = new TableQuery(tag => new Tblloopproduct(tag))
  
  /** Entity class storing rows of table Tblloopweblog
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param sno Database column sno DBType(char), Length(20,false)
   *  @param cdapplyno Database column cdApplyNo DBType(char), Length(20,false)
   *  @param ocombination Database column OCombination DBType(char), Length(1,false)
   *  @param mcombination Database column MCombination DBType(char), Length(1,false)
   *  @param oprodid Database column OProdID DBType(char), Length(20,false)
   *  @param oiprod Database column OiProd DBType(char), Length(10,false)
   *  @param dtdate Database column dtDate DBType(datetime) */
  case class TblloopweblogRow(uid: String, sno: Option[String], cdapplyno: Option[String], ocombination: Option[String], mcombination: Option[String], oprodid: Option[String], oiprod: Option[String], dtdate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblloopweblogRow objects using plain SQL queries */
  implicit def GetResultTblloopweblogRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblloopweblogRow] = GR{
    prs => import prs._
    TblloopweblogRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblLoopWebLog. Objects of this class serve as prototypes for rows in queries. */
  class Tblloopweblog(_tableTag: Tag) extends Table[TblloopweblogRow](_tableTag, Some("dbo"), "tblLoopWebLog") {
    def * = (uid, sno, cdapplyno, ocombination, mcombination, oprodid, oiprod, dtdate) <> (TblloopweblogRow.tupled, TblloopweblogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, sno, cdapplyno, ocombination, mcombination, oprodid, oiprod, dtdate).shaped.<>({r=>import r._; _1.map(_=> TblloopweblogRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column sno DBType(char), Length(20,false) */
    val sno: Column[Option[String]] = column[Option[String]]("sno", O.Length(20,varying=false))
    /** Database column cdApplyNo DBType(char), Length(20,false) */
    val cdapplyno: Column[Option[String]] = column[Option[String]]("cdApplyNo", O.Length(20,varying=false))
    /** Database column OCombination DBType(char), Length(1,false) */
    val ocombination: Column[Option[String]] = column[Option[String]]("OCombination", O.Length(1,varying=false))
    /** Database column MCombination DBType(char), Length(1,false) */
    val mcombination: Column[Option[String]] = column[Option[String]]("MCombination", O.Length(1,varying=false))
    /** Database column OProdID DBType(char), Length(20,false) */
    val oprodid: Column[Option[String]] = column[Option[String]]("OProdID", O.Length(20,varying=false))
    /** Database column OiProd DBType(char), Length(10,false) */
    val oiprod: Column[Option[String]] = column[Option[String]]("OiProd", O.Length(10,varying=false))
    /** Database column dtDate DBType(datetime) */
    val dtdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtDate")
  }
  /** Collection-like TableQuery object for table Tblloopweblog */
  lazy val Tblloopweblog = new TableQuery(tag => new Tblloopweblog(tag))
  
  /** Row type of table Tblmachine */
  type TblmachineRow = HCons[String,HCons[String,HCons[Int,HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblmachineRow providing default values if available in the database schema. */
  def TblmachineRow(uid: String, cdmachine: String, iseqno: Int = 0, dtmade: Option[java.sql.Timestamp], cdkind: Option[String], cdkindmain: Option[String], cdproduct: Option[String], dtinhouse: Option[java.sql.Timestamp], cdinhouseno: Option[String], uidinemp: Option[String], dtouthouse: Option[java.sql.Timestamp], cdouthouseno: Option[String], uidoutemp: Option[String], cdoutunit: Option[String], cdouttype: Option[String], szdeliverno: Option[String], uiddeliverno: Option[String], dtback: Option[java.sql.Timestamp], cdbackno: Option[String], uidbackemp: Option[String], cdbacktype: Option[String], cdcustno: Option[String], cdstate: Option[String], isinvalid: Option[Boolean] = Some(true), szremark: Option[String], cdinemp: Option[String], cdoutemp: Option[String], cdbackemp: Option[String], dtbarcode: Option[java.sql.Timestamp], uidbcemp: Option[String], cdbcemp: Option[String], cdmember: Option[String], ibcprint: Option[Int] = Some(0), szflmserial: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdserialno: Option[String], bak1: Option[String], bak2: Option[String], bak3: Option[String], bak4: Option[String], bak5: Option[String]): TblmachineRow = {
    uid :: cdmachine :: iseqno :: dtmade :: cdkind :: cdkindmain :: cdproduct :: dtinhouse :: cdinhouseno :: uidinemp :: dtouthouse :: cdouthouseno :: uidoutemp :: cdoutunit :: cdouttype :: szdeliverno :: uiddeliverno :: dtback :: cdbackno :: uidbackemp :: cdbacktype :: cdcustno :: cdstate :: isinvalid :: szremark :: cdinemp :: cdoutemp :: cdbackemp :: dtbarcode :: uidbcemp :: cdbcemp :: cdmember :: ibcprint :: szflmserial :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdserialno :: bak1 :: bak2 :: bak3 :: bak4 :: bak5 :: HNil
  }
  /** GetResult implicit for fetching TblmachineRow objects using plain SQL queries */
  implicit def GetResultTblmachineRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[String]], e4: GR[Option[Boolean]], e5: GR[Option[Int]], e6: GR[Option[java.sql.Blob]]): GR[TblmachineRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[Int] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblMachine. Objects of this class serve as prototypes for rows in queries. */
  class Tblmachine(_tableTag: Tag) extends Table[TblmachineRow](_tableTag, Some("dbo"), "tblMachine") {
    def * = uid :: cdmachine :: iseqno :: dtmade :: cdkind :: cdkindmain :: cdproduct :: dtinhouse :: cdinhouseno :: uidinemp :: dtouthouse :: cdouthouseno :: uidoutemp :: cdoutunit :: cdouttype :: szdeliverno :: uiddeliverno :: dtback :: cdbackno :: uidbackemp :: cdbacktype :: cdcustno :: cdstate :: isinvalid :: szremark :: cdinemp :: cdoutemp :: cdbackemp :: dtbarcode :: uidbcemp :: cdbcemp :: cdmember :: ibcprint :: szflmserial :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdserialno :: bak1 :: bak2 :: bak3 :: bak4 :: bak5 :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMachine DBType(char), Length(20,false) */
    val cdmachine: Column[String] = column[String]("cdMachine", O.Length(20,varying=false))
    /** Database column iSeqNo DBType(int), Default(0) */
    val iseqno: Column[Int] = column[Int]("iSeqNo", O.Default(0))
    /** Database column dtMade DBType(datetime) */
    val dtmade: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtMade")
    /** Database column cdKind DBType(char), Length(10,false) */
    val cdkind: Column[Option[String]] = column[Option[String]]("cdKind", O.Length(10,varying=false))
    /** Database column cdKindMain DBType(char), Length(10,false) */
    val cdkindmain: Column[Option[String]] = column[Option[String]]("cdKindMain", O.Length(10,varying=false))
    /** Database column cdProduct DBType(char), Length(15,false) */
    val cdproduct: Column[Option[String]] = column[Option[String]]("cdProduct", O.Length(15,varying=false))
    /** Database column dtInHouse DBType(datetime) */
    val dtinhouse: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtInHouse")
    /** Database column cdInHouseNo DBType(char), Length(15,false) */
    val cdinhouseno: Column[Option[String]] = column[Option[String]]("cdInHouseNo", O.Length(15,varying=false))
    /** Database column uidInEmp DBType(uniqueidentifier), Length(36,false) */
    val uidinemp: Column[Option[String]] = column[Option[String]]("uidInEmp", O.Length(36,varying=false))
    /** Database column dtOutHouse DBType(datetime) */
    val dtouthouse: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOutHouse")
    /** Database column cdOutHouseNo DBType(char), Length(15,false) */
    val cdouthouseno: Column[Option[String]] = column[Option[String]]("cdOutHouseNo", O.Length(15,varying=false))
    /** Database column uidOutEmp DBType(uniqueidentifier), Length(36,false) */
    val uidoutemp: Column[Option[String]] = column[Option[String]]("uidOutEmp", O.Length(36,varying=false))
    /** Database column cdOutUnit DBType(char), Length(2,false) */
    val cdoutunit: Column[Option[String]] = column[Option[String]]("cdOutUnit", O.Length(2,varying=false))
    /** Database column cdOutType DBType(char), Length(2,false) */
    val cdouttype: Column[Option[String]] = column[Option[String]]("cdOutType", O.Length(2,varying=false))
    /** Database column szDeliverNo DBType(char), Length(15,false) */
    val szdeliverno: Column[Option[String]] = column[Option[String]]("szDeliverNo", O.Length(15,varying=false))
    /** Database column uidDeliverNo DBType(uniqueidentifier), Length(36,false) */
    val uiddeliverno: Column[Option[String]] = column[Option[String]]("uidDeliverNo", O.Length(36,varying=false))
    /** Database column dtBack DBType(datetime) */
    val dtback: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBack")
    /** Database column cdBackNo DBType(char), Length(15,false) */
    val cdbackno: Column[Option[String]] = column[Option[String]]("cdBackNo", O.Length(15,varying=false))
    /** Database column uidBackEmp DBType(uniqueidentifier), Length(36,false) */
    val uidbackemp: Column[Option[String]] = column[Option[String]]("uidBackEmp", O.Length(36,varying=false))
    /** Database column cdBackType DBType(char), Length(2,false) */
    val cdbacktype: Column[Option[String]] = column[Option[String]]("cdBackType", O.Length(2,varying=false))
    /** Database column cdCustNo DBType(char), Length(10,false) */
    val cdcustno: Column[Option[String]] = column[Option[String]]("cdCustNo", O.Length(10,varying=false))
    /** Database column cdState DBType(char), Length(2,false) */
    val cdstate: Column[Option[String]] = column[Option[String]]("cdState", O.Length(2,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(true)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(true)))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column cdInEmp DBType(char), Length(8,false) */
    val cdinemp: Column[Option[String]] = column[Option[String]]("cdInEmp", O.Length(8,varying=false))
    /** Database column cdOutEmp DBType(char), Length(8,false) */
    val cdoutemp: Column[Option[String]] = column[Option[String]]("cdOutEmp", O.Length(8,varying=false))
    /** Database column cdBackEmp DBType(char), Length(8,false) */
    val cdbackemp: Column[Option[String]] = column[Option[String]]("cdBackEmp", O.Length(8,varying=false))
    /** Database column dtBarCode DBType(datetime) */
    val dtbarcode: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBarCode")
    /** Database column uidBCEmp DBType(uniqueidentifier), Length(36,false) */
    val uidbcemp: Column[Option[String]] = column[Option[String]]("uidBCEmp", O.Length(36,varying=false))
    /** Database column cdBCEmp DBType(char), Length(8,false) */
    val cdbcemp: Column[Option[String]] = column[Option[String]]("cdBCEmp", O.Length(8,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column iBCPrint DBType(int), Default(Some(0)) */
    val ibcprint: Column[Option[Int]] = column[Option[Int]]("iBCPrint", O.Default(Some(0)))
    /** Database column szFLMSerial DBType(char), Length(20,false) */
    val szflmserial: Column[Option[String]] = column[Option[String]]("szFLMSerial", O.Length(20,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column cdSerialNo DBType(char), Length(20,false) */
    val cdserialno: Column[Option[String]] = column[Option[String]]("cdSerialNo", O.Length(20,varying=false))
    /** Database column Bak_1 DBType(varchar), Length(20,true) */
    val bak1: Column[Option[String]] = column[Option[String]]("Bak_1", O.Length(20,varying=true))
    /** Database column Bak_2 DBType(varchar), Length(20,true) */
    val bak2: Column[Option[String]] = column[Option[String]]("Bak_2", O.Length(20,varying=true))
    /** Database column Bak_3 DBType(varchar), Length(20,true) */
    val bak3: Column[Option[String]] = column[Option[String]]("Bak_3", O.Length(20,varying=true))
    /** Database column Bak_4 DBType(varchar), Length(20,true) */
    val bak4: Column[Option[String]] = column[Option[String]]("Bak_4", O.Length(20,varying=true))
    /** Database column Bak_5 DBType(varchar), Length(20,true) */
    val bak5: Column[Option[String]] = column[Option[String]]("Bak_5", O.Length(20,varying=true))
    
    /** Primary key of Tblmachine (database name PK_tblMachine) */
    val pk = primaryKey("PK_tblMachine", cdmachine :: iseqno :: HNil)
    
    /** Index over (cdmachine,cdouthouseno) (database name IX_tblMachine) */
    val index1 = index("IX_tblMachine", cdmachine :: cdouthouseno :: HNil)
    /** Uniqueness Index over (uid) (database name IX_tblMachine_1) */
    val index2 = index("IX_tblMachine_1", uid :: HNil, unique=true)
  }
  /** Collection-like TableQuery object for table Tblmachine */
  lazy val Tblmachine = new TableQuery(tag => new Tblmachine(tag))
  
  /** Row type of table Tblmanifest */
  type TblmanifestRow = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblmanifestRow providing default values if available in the database schema. */
  def TblmanifestRow(uid: String, cdcenter: String, cdmfid: String, imfsn: Int, cdinvno: Option[String], cdorderby: Option[String], cdtakeby: Option[String], dtpsupp: Option[java.sql.Timestamp], cdtimeblock: Option[String], dtgoodout: Option[java.sql.Timestamp], szaddressee: Option[String], sztel: Option[String], szext: Option[String], szcell: Option[String], cdcountry: Option[String], cdarea: Option[String], cdcity: Option[String], cdzip: Option[String], szaddress: Option[String], szfulladdr: Option[String], cdsourceid: Option[String], cdsourceprefix: Option[String], cdemergency: Option[String], szpsuppmemo: Option[String], szstatus: Option[String], isvalid: Option[String], szpsuppuser: Option[String], cdfreightid: Option[String], uidfreight: Option[String], cdwarehouse: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdmember: Option[String], szname: Option[String], iFlag1: Option[String] = Some(""), iFlag2: Option[String], iFlag3: Option[String], iFlag4: Option[String], iFlag5: Option[String]): TblmanifestRow = {
    uid :: cdcenter :: cdmfid :: imfsn :: cdinvno :: cdorderby :: cdtakeby :: dtpsupp :: cdtimeblock :: dtgoodout :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdarea :: cdcity :: cdzip :: szaddress :: szfulladdr :: cdsourceid :: cdsourceprefix :: cdemergency :: szpsuppmemo :: szstatus :: isvalid :: szpsuppuser :: cdfreightid :: uidfreight :: cdwarehouse :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdmember :: szname :: iFlag1 :: iFlag2 :: iFlag3 :: iFlag4 :: iFlag5 :: HNil
  }
  /** GetResult implicit for fetching TblmanifestRow objects using plain SQL queries */
  implicit def GetResultTblmanifestRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblmanifestRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblManifest. Objects of this class serve as prototypes for rows in queries. */
  class Tblmanifest(_tableTag: Tag) extends Table[TblmanifestRow](_tableTag, Some("dbo"), "tblManifest") {
    def * = uid :: cdcenter :: cdmfid :: imfsn :: cdinvno :: cdorderby :: cdtakeby :: dtpsupp :: cdtimeblock :: dtgoodout :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdarea :: cdcity :: cdzip :: szaddress :: szfulladdr :: cdsourceid :: cdsourceprefix :: cdemergency :: szpsuppmemo :: szstatus :: isvalid :: szpsuppuser :: cdfreightid :: uidfreight :: cdwarehouse :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdmember :: szname :: iFlag1 :: iFlag2 :: iFlag3 :: iFlag4 :: iFlag5 :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdMfId DBType(char), Length(14,false) */
    val cdmfid: Column[String] = column[String]("cdMfId", O.Length(14,varying=false))
    /** Database column iMfSn DBType(int) */
    val imfsn: Column[Int] = column[Int]("iMfSn")
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[Option[String]] = column[Option[String]]("cdInvNo", O.Length(10,varying=false))
    /** Database column cdOrderBy DBType(char), Length(1,false) */
    val cdorderby: Column[Option[String]] = column[Option[String]]("cdOrderBy", O.Length(1,varying=false))
    /** Database column cdTakeBy DBType(char), Length(1,false) */
    val cdtakeby: Column[Option[String]] = column[Option[String]]("cdTakeBy", O.Length(1,varying=false))
    /** Database column dtPSupp DBType(datetime) */
    val dtpsupp: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPSupp")
    /** Database column cdTimeBlock DBType(char), Length(1,false) */
    val cdtimeblock: Column[Option[String]] = column[Option[String]]("cdTimeBlock", O.Length(1,varying=false))
    /** Database column dtGoodOut DBType(datetime) */
    val dtgoodout: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtGoodOut")
    /** Database column szAddressee DBType(nchar), Length(80,false) */
    val szaddressee: Column[Option[String]] = column[Option[String]]("szAddressee", O.Length(80,varying=false))
    /** Database column szTel DBType(nchar), Length(128,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(128,varying=false))
    /** Database column szExt DBType(nchar), Length(10,false) */
    val szext: Column[Option[String]] = column[Option[String]]("szExt", O.Length(10,varying=false))
    /** Database column szCell DBType(nchar), Length(128,false) */
    val szcell: Column[Option[String]] = column[Option[String]]("szCell", O.Length(128,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(10,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szAddress DBType(nchar), Length(128,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column cdSourceId DBType(char), Length(14,false) */
    val cdsourceid: Column[Option[String]] = column[Option[String]]("cdSourceId", O.Length(14,varying=false))
    /** Database column cdSourcePrefix DBType(char), Length(2,false) */
    val cdsourceprefix: Column[Option[String]] = column[Option[String]]("cdSourcePrefix", O.Length(2,varying=false))
    /** Database column cdEmergency DBType(char), Length(1,false) */
    val cdemergency: Column[Option[String]] = column[Option[String]]("cdEmergency", O.Length(1,varying=false))
    /** Database column szPSuppMemo DBType(nchar), Length(255,false) */
    val szpsuppmemo: Column[Option[String]] = column[Option[String]]("szPSuppMemo", O.Length(255,varying=false))
    /** Database column szStatus DBType(char), Length(1,false) */
    val szstatus: Column[Option[String]] = column[Option[String]]("szStatus", O.Length(1,varying=false))
    /** Database column isValid DBType(char), Length(1,false) */
    val isvalid: Column[Option[String]] = column[Option[String]]("isValid", O.Length(1,varying=false))
    /** Database column szPSuppUser DBType(nchar), Length(80,false) */
    val szpsuppuser: Column[Option[String]] = column[Option[String]]("szPSuppUser", O.Length(80,varying=false))
    /** Database column cdFreightID DBType(char), Length(20,false) */
    val cdfreightid: Column[Option[String]] = column[Option[String]]("cdFreightID", O.Length(20,varying=false))
    /** Database column uidFreight DBType(uniqueidentifier), Length(36,false) */
    val uidfreight: Column[Option[String]] = column[Option[String]]("uidFreight", O.Length(36,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[Option[String]] = column[Option[String]]("cdWareHouse", O.Length(4,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szName DBType(nchar), Length(128,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(128,varying=false))
    /** Database column i_flag1 DBType(char), Length(1,false), Default(Some()) */
    val iFlag1: Column[Option[String]] = column[Option[String]]("i_flag1", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column i_flag2 DBType(char), Length(1,false) */
    val iFlag2: Column[Option[String]] = column[Option[String]]("i_flag2", O.Length(1,varying=false))
    /** Database column i_flag3 DBType(char), Length(1,false) */
    val iFlag3: Column[Option[String]] = column[Option[String]]("i_flag3", O.Length(1,varying=false))
    /** Database column i_flag4 DBType(char), Length(1,false) */
    val iFlag4: Column[Option[String]] = column[Option[String]]("i_flag4", O.Length(1,varying=false))
    /** Database column i_flag5 DBType(char), Length(1,false) */
    val iFlag5: Column[Option[String]] = column[Option[String]]("i_flag5", O.Length(1,varying=false))
    
    /** Primary key of Tblmanifest (database name PK_tblManifest) */
    val pk = primaryKey("PK_tblManifest", cdmfid :: imfsn :: HNil)
    
    /** Index over (dtpsupp) (database name IX_tblManifest) */
    val index1 = index("IX_tblManifest", dtpsupp :: HNil)
  }
  /** Collection-like TableQuery object for table Tblmanifest */
  lazy val Tblmanifest = new TableQuery(tag => new Tblmanifest(tag))
  
  /** Entity class storing rows of table TblmanifestBacklog
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmfid Database column cdMfId DBType(char), Length(14,false)
   *  @param dtchange Database column dtChange DBType(datetime)
   *  @param szpsuppmemo Database column szPSuppMemo DBType(char), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblmanifestBacklogRow(uid: String, cdmfid: String, dtchange: java.sql.Timestamp, szpsuppmemo: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblmanifestBacklogRow objects using plain SQL queries */
  implicit def GetResultTblmanifestBacklogRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblmanifestBacklogRow] = GR{
    prs => import prs._
    TblmanifestBacklogRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblManifest_BackLog. Objects of this class serve as prototypes for rows in queries. */
  class TblmanifestBacklog(_tableTag: Tag) extends Table[TblmanifestBacklogRow](_tableTag, Some("dbo"), "tblManifest_BackLog") {
    def * = (uid, cdmfid, dtchange, szpsuppmemo, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblmanifestBacklogRow.tupled, TblmanifestBacklogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmfid.?, dtchange.?, szpsuppmemo, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblmanifestBacklogRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMfId DBType(char), Length(14,false) */
    val cdmfid: Column[String] = column[String]("cdMfId", O.Length(14,varying=false))
    /** Database column dtChange DBType(datetime) */
    val dtchange: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtChange")
    /** Database column szPSuppMemo DBType(char), Length(255,false) */
    val szpsuppmemo: Column[Option[String]] = column[Option[String]]("szPSuppMemo", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table TblmanifestBacklog */
  lazy val TblmanifestBacklog = new TableQuery(tag => new TblmanifestBacklog(tag))
  
  /** Entity class storing rows of table Tblmanifestd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmfid Database column cdMfId DBType(char), Length(14,false)
   *  @param imfsn Database column iMfSn DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param iprodqty Database column iProdQty DBType(int)
   *  @param iprodoutqty Database column iProdOutQty DBType(int)
   *  @param iprodpostqty Database column iProdPostQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblmanifestdRow(uid: String, cdmfid: String, imfsn: Int, szprodid: String, iprodqty: Option[Int], iprodoutqty: Option[Int], iprodpostqty: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblmanifestdRow objects using plain SQL queries */
  implicit def GetResultTblmanifestdRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[Int]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblmanifestdRow] = GR{
    prs => import prs._
    TblmanifestdRow.tupled((<<[String], <<[String], <<[Int], <<[String], <<?[Int], <<?[Int], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblManifestD. Objects of this class serve as prototypes for rows in queries. */
  class Tblmanifestd(_tableTag: Tag) extends Table[TblmanifestdRow](_tableTag, Some("dbo"), "tblManifestD") {
    def * = (uid, cdmfid, imfsn, szprodid, iprodqty, iprodoutqty, iprodpostqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblmanifestdRow.tupled, TblmanifestdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmfid.?, imfsn.?, szprodid.?, iprodqty, iprodoutqty, iprodpostqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblmanifestdRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMfId DBType(char), Length(14,false) */
    val cdmfid: Column[String] = column[String]("cdMfId", O.Length(14,varying=false))
    /** Database column iMfSn DBType(int) */
    val imfsn: Column[Int] = column[Int]("iMfSn")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Option[Int]] = column[Option[Int]]("iProdQty")
    /** Database column iProdOutQty DBType(int) */
    val iprodoutqty: Column[Option[Int]] = column[Option[Int]]("iProdOutQty")
    /** Database column iProdPostQty DBType(int) */
    val iprodpostqty: Column[Option[Int]] = column[Option[Int]]("iProdPostQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblmanifestd (database name PK_tblManifestD) */
    val pk = primaryKey("PK_tblManifestD", (cdmfid, imfsn, szprodid))
  }
  /** Collection-like TableQuery object for table Tblmanifestd */
  lazy val Tblmanifestd = new TableQuery(tag => new Tblmanifestd(tag))
  
  /** Entity class storing rows of table TblmanifestLog
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmfid Database column cdMfId DBType(char), Length(14,false)
   *  @param dtchange Database column dtChange DBType(datetime)
   *  @param szpsuppmemo Database column szPSuppMemo DBType(char), Length(255,false)
   *  @param szstatus Database column szStatus DBType(char), Length(1,false)
   *  @param isvalid Database column isValid DBType(char), Length(1,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblmanifestLogRow(uid: String, cdmfid: String, dtchange: java.sql.Timestamp, szpsuppmemo: Option[String], szstatus: Option[String], isvalid: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblmanifestLogRow objects using plain SQL queries */
  implicit def GetResultTblmanifestLogRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblmanifestLogRow] = GR{
    prs => import prs._
    TblmanifestLogRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblManifest_Log. Objects of this class serve as prototypes for rows in queries. */
  class TblmanifestLog(_tableTag: Tag) extends Table[TblmanifestLogRow](_tableTag, Some("dbo"), "tblManifest_Log") {
    def * = (uid, cdmfid, dtchange, szpsuppmemo, szstatus, isvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblmanifestLogRow.tupled, TblmanifestLogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmfid.?, dtchange.?, szpsuppmemo, szstatus, isvalid, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblmanifestLogRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMfId DBType(char), Length(14,false) */
    val cdmfid: Column[String] = column[String]("cdMfId", O.Length(14,varying=false))
    /** Database column dtChange DBType(datetime) */
    val dtchange: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtChange")
    /** Database column szPSuppMemo DBType(char), Length(255,false) */
    val szpsuppmemo: Column[Option[String]] = column[Option[String]]("szPSuppMemo", O.Length(255,varying=false))
    /** Database column szStatus DBType(char), Length(1,false) */
    val szstatus: Column[Option[String]] = column[Option[String]]("szStatus", O.Length(1,varying=false))
    /** Database column isValid DBType(char), Length(1,false) */
    val isvalid: Column[Option[String]] = column[Option[String]]("isValid", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table TblmanifestLog */
  lazy val TblmanifestLog = new TableQuery(tag => new TblmanifestLog(tag))
  
  /** Entity class storing rows of table TblmanifestSysout
   *  @param cddate Database column cdDate DBType(char), Length(10,false)
   *  @param cdmfid Database column cdMfid DBType(char), Length(14,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblmanifestSysoutRow(cddate: String, cdmfid: String, dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblmanifestSysoutRow objects using plain SQL queries */
  implicit def GetResultTblmanifestSysoutRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]]): GR[TblmanifestSysoutRow] = GR{
    prs => import prs._
    TblmanifestSysoutRow.tupled((<<[String], <<[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblManifest_SysOut. Objects of this class serve as prototypes for rows in queries. */
  class TblmanifestSysout(_tableTag: Tag) extends Table[TblmanifestSysoutRow](_tableTag, Some("dbo"), "tblManifest_SysOut") {
    def * = (cddate, cdmfid, dtcreate) <> (TblmanifestSysoutRow.tupled, TblmanifestSysoutRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cddate.?, cdmfid.?, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblmanifestSysoutRow.tupled((_1.get, _2.get, _3)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdDate DBType(char), Length(10,false) */
    val cddate: Column[String] = column[String]("cdDate", O.Length(10,varying=false))
    /** Database column cdMfid DBType(char), Length(14,false) */
    val cdmfid: Column[String] = column[String]("cdMfid", O.Length(14,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    
    /** Primary key of TblmanifestSysout (database name PK_tblManifest_SysOut) */
    val pk = primaryKey("PK_tblManifest_SysOut", (cddate, cdmfid))
  }
  /** Collection-like TableQuery object for table TblmanifestSysout */
  lazy val TblmanifestSysout = new TableQuery(tag => new TblmanifestSysout(tag))
  
  /** Entity class storing rows of table TblmanifestSysoutD
   *  @param cddate Database column cdDate DBType(char), Length(10,false)
   *  @param cdmfid Database column cdMfId DBType(char), Length(14,false)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblmanifestSysoutDRow(cddate: String, cdmfid: String, szprodid: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblmanifestSysoutDRow objects using plain SQL queries */
  implicit def GetResultTblmanifestSysoutDRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblmanifestSysoutDRow] = GR{
    prs => import prs._
    TblmanifestSysoutDRow.tupled((<<[String], <<[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblManifest_SysOut_D. Objects of this class serve as prototypes for rows in queries. */
  class TblmanifestSysoutD(_tableTag: Tag) extends Table[TblmanifestSysoutDRow](_tableTag, Some("dbo"), "tblManifest_SysOut_D") {
    def * = (cddate, cdmfid, szprodid, dtcreate) <> (TblmanifestSysoutDRow.tupled, TblmanifestSysoutDRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cddate.?, cdmfid.?, szprodid, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblmanifestSysoutDRow.tupled((_1.get, _2.get, _3, _4)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdDate DBType(char), Length(10,false) */
    val cddate: Column[String] = column[String]("cdDate", O.Length(10,varying=false))
    /** Database column cdMfId DBType(char), Length(14,false) */
    val cdmfid: Column[String] = column[String]("cdMfId", O.Length(14,varying=false))
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[Option[String]] = column[Option[String]]("szProdID", O.Length(15,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
  }
  /** Collection-like TableQuery object for table TblmanifestSysoutD */
  lazy val TblmanifestSysoutD = new TableQuery(tag => new TblmanifestSysoutD(tag))
  
  /** Row type of table Tblmem2000 */
  type Tblmem2000Row = HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblmem2000Row providing default values if available in the database schema. */
  def Tblmem2000Row(uid: String, uidmem: Option[String], cdmemid: Option[String], cdleader: Option[String], dtfilldate: Option[java.sql.Timestamp], cdstation: Option[String], cdclassify: Option[String], cdmethod: Option[String], cdspace: Option[String], cdnote: Option[String], cdcondition: Option[String], cdresult: Option[String], dtallowdate: Option[java.sql.Timestamp], cdallowman: Option[String], dtconsdate: Option[java.sql.Timestamp], cdconsman: Option[String], cdpaycontent: Option[String], dteffectdate: Option[java.sql.Timestamp], cdarea: Option[String], cdtype: Option[String], cdinterviewc: Option[String], dtapprial: Option[java.sql.Timestamp], dtlastdate: Option[java.sql.Timestamp], cdbonusym: Option[String], dtinterviewsys: Option[java.sql.Timestamp], cdstationid: Option[String], cdstationcondition: Option[String] = Some(""), ismemup: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): Tblmem2000Row = {
    uid :: uidmem :: cdmemid :: cdleader :: dtfilldate :: cdstation :: cdclassify :: cdmethod :: cdspace :: cdnote :: cdcondition :: cdresult :: dtallowdate :: cdallowman :: dtconsdate :: cdconsman :: cdpaycontent :: dteffectdate :: cdarea :: cdtype :: cdinterviewc :: dtapprial :: dtlastdate :: cdbonusym :: dtinterviewsys :: cdstationid :: cdstationcondition :: ismemup :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching Tblmem2000Row objects using plain SQL queries */
  implicit def GetResultTblmem2000Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]]): GR[Tblmem2000Row] = GR{
    prs => import prs._
    <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblMem2000. Objects of this class serve as prototypes for rows in queries. */
  class Tblmem2000(_tableTag: Tag) extends Table[Tblmem2000Row](_tableTag, Some("dbo"), "tblMem2000") {
    def * = uid :: uidmem :: cdmemid :: cdleader :: dtfilldate :: cdstation :: cdclassify :: cdmethod :: cdspace :: cdnote :: cdcondition :: cdresult :: dtallowdate :: cdallowman :: dtconsdate :: cdconsman :: cdpaycontent :: dteffectdate :: cdarea :: cdtype :: cdinterviewc :: dtapprial :: dtlastdate :: cdbonusym :: dtinterviewsys :: cdstationid :: cdstationcondition :: ismemup :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidMem DBType(uniqueidentifier), Length(36,false) */
    val uidmem: Column[Option[String]] = column[Option[String]]("uidMem", O.Length(36,varying=false))
    /** Database column cdMemID DBType(char), Length(10,false) */
    val cdmemid: Column[Option[String]] = column[Option[String]]("cdMemID", O.Length(10,varying=false))
    /** Database column cdLeader DBType(char), Length(10,false) */
    val cdleader: Column[Option[String]] = column[Option[String]]("cdLeader", O.Length(10,varying=false))
    /** Database column dtFillDate DBType(datetime) */
    val dtfilldate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFillDate")
    /** Database column cdStation DBType(nchar), Length(50,false) */
    val cdstation: Column[Option[String]] = column[Option[String]]("cdStation", O.Length(50,varying=false))
    /** Database column cdClassify DBType(char), Length(10,false) */
    val cdclassify: Column[Option[String]] = column[Option[String]]("cdClassify", O.Length(10,varying=false))
    /** Database column cdMethod DBType(char), Length(10,false) */
    val cdmethod: Column[Option[String]] = column[Option[String]]("cdMethod", O.Length(10,varying=false))
    /** Database column cdSpace DBType(char), Length(10,false) */
    val cdspace: Column[Option[String]] = column[Option[String]]("cdSpace", O.Length(10,varying=false))
    /** Database column cdNote DBType(nchar), Length(1024,false) */
    val cdnote: Column[Option[String]] = column[Option[String]]("cdNote", O.Length(1024,varying=false))
    /** Database column cdCondition DBType(char), Length(10,false) */
    val cdcondition: Column[Option[String]] = column[Option[String]]("cdCondition", O.Length(10,varying=false))
    /** Database column cdResult DBType(char), Length(1,false) */
    val cdresult: Column[Option[String]] = column[Option[String]]("cdResult", O.Length(1,varying=false))
    /** Database column dtAllowDate DBType(datetime) */
    val dtallowdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtAllowDate")
    /** Database column cdAllowman DBType(nchar), Length(50,false) */
    val cdallowman: Column[Option[String]] = column[Option[String]]("cdAllowman", O.Length(50,varying=false))
    /** Database column dtConsDate DBType(datetime) */
    val dtconsdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtConsDate")
    /** Database column cdConsman DBType(nchar), Length(50,false) */
    val cdconsman: Column[Option[String]] = column[Option[String]]("cdConsman", O.Length(50,varying=false))
    /** Database column cdPayContent DBType(nchar), Length(1024,false) */
    val cdpaycontent: Column[Option[String]] = column[Option[String]]("cdPayContent", O.Length(1024,varying=false))
    /** Database column dtEffectDate DBType(datetime) */
    val dteffectdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEffectDate")
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdType DBType(char), Length(10,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(10,varying=false))
    /** Database column cdInterviewC DBType(char), Length(10,false) */
    val cdinterviewc: Column[Option[String]] = column[Option[String]]("cdInterviewC", O.Length(10,varying=false))
    /** Database column dtApprial DBType(datetime) */
    val dtapprial: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtApprial")
    /** Database column dtLastdate DBType(datetime) */
    val dtlastdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastdate")
    /** Database column cdBonusYM DBType(char), Length(10,false) */
    val cdbonusym: Column[Option[String]] = column[Option[String]]("cdBonusYM", O.Length(10,varying=false))
    /** Database column dtInterviewSys DBType(datetime) */
    val dtinterviewsys: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtInterviewSys")
    /** Database column cdStationID DBType(char), Length(10,false) */
    val cdstationid: Column[Option[String]] = column[Option[String]]("cdStationID", O.Length(10,varying=false))
    /** Database column cdStationCondition DBType(char), Length(10,false), Default(Some()) */
    val cdstationcondition: Column[Option[String]] = column[Option[String]]("cdStationCondition", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column isMemUp DBType(bit), Default(Some(false)) */
    val ismemup: Column[Option[Boolean]] = column[Option[Boolean]]("isMemUp", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Index over (cdmemid) (database name IX_tblMem2000) */
    val index1 = index("IX_tblMem2000", cdmemid :: HNil)
  }
  /** Collection-like TableQuery object for table Tblmem2000 */
  lazy val Tblmem2000 = new TableQuery(tag => new Tblmem2000(tag))
  
  /** Row type of table Tblmem2000His */
  type Tblmem2000HisRow = HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblmem2000HisRow providing default values if available in the database schema. */
  def Tblmem2000HisRow(uid: String, uidmem: Option[String], cdmemid: Option[String], cdleader: Option[String], dtfilldate: Option[java.sql.Timestamp], cdstation: Option[String], cdclassify: Option[String], cdmethod: Option[String], cdspace: Option[String], cdnote: Option[String], cdcondition: Option[String], cdresult: Option[String], dtallowdate: Option[java.sql.Timestamp], cdallowman: Option[String], dtconsdate: Option[java.sql.Timestamp], cdconsman: Option[String], cdpaycontent: Option[String], dteffectdate: Option[java.sql.Timestamp], cdarea: Option[String], cdtype: Option[String], cdinterviewc: Option[String], dtapprial: Option[java.sql.Timestamp], dtlastdate: Option[java.sql.Timestamp], cdbonusym: Option[String], dtinterviewsys: Option[java.sql.Timestamp], cdstationid: Option[String], cdstationcondition: Option[String], ismemup: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): Tblmem2000HisRow = {
    uid :: uidmem :: cdmemid :: cdleader :: dtfilldate :: cdstation :: cdclassify :: cdmethod :: cdspace :: cdnote :: cdcondition :: cdresult :: dtallowdate :: cdallowman :: dtconsdate :: cdconsman :: cdpaycontent :: dteffectdate :: cdarea :: cdtype :: cdinterviewc :: dtapprial :: dtlastdate :: cdbonusym :: dtinterviewsys :: cdstationid :: cdstationcondition :: ismemup :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching Tblmem2000HisRow objects using plain SQL queries */
  implicit def GetResultTblmem2000HisRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]]): GR[Tblmem2000HisRow] = GR{
    prs => import prs._
    <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblMem2000_His. Objects of this class serve as prototypes for rows in queries. */
  class Tblmem2000His(_tableTag: Tag) extends Table[Tblmem2000HisRow](_tableTag, Some("dbo"), "tblMem2000_His") {
    def * = uid :: uidmem :: cdmemid :: cdleader :: dtfilldate :: cdstation :: cdclassify :: cdmethod :: cdspace :: cdnote :: cdcondition :: cdresult :: dtallowdate :: cdallowman :: dtconsdate :: cdconsman :: cdpaycontent :: dteffectdate :: cdarea :: cdtype :: cdinterviewc :: dtapprial :: dtlastdate :: cdbonusym :: dtinterviewsys :: cdstationid :: cdstationcondition :: ismemup :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidMem DBType(uniqueidentifier), Length(36,false) */
    val uidmem: Column[Option[String]] = column[Option[String]]("uidMem", O.Length(36,varying=false))
    /** Database column cdMemID DBType(char), Length(10,false) */
    val cdmemid: Column[Option[String]] = column[Option[String]]("cdMemID", O.Length(10,varying=false))
    /** Database column cdLeader DBType(char), Length(10,false) */
    val cdleader: Column[Option[String]] = column[Option[String]]("cdLeader", O.Length(10,varying=false))
    /** Database column dtFillDate DBType(datetime) */
    val dtfilldate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFillDate")
    /** Database column cdStation DBType(nchar), Length(50,false) */
    val cdstation: Column[Option[String]] = column[Option[String]]("cdStation", O.Length(50,varying=false))
    /** Database column cdClassify DBType(char), Length(10,false) */
    val cdclassify: Column[Option[String]] = column[Option[String]]("cdClassify", O.Length(10,varying=false))
    /** Database column cdMethod DBType(char), Length(10,false) */
    val cdmethod: Column[Option[String]] = column[Option[String]]("cdMethod", O.Length(10,varying=false))
    /** Database column cdSpace DBType(char), Length(10,false) */
    val cdspace: Column[Option[String]] = column[Option[String]]("cdSpace", O.Length(10,varying=false))
    /** Database column cdNote DBType(nchar), Length(1024,false) */
    val cdnote: Column[Option[String]] = column[Option[String]]("cdNote", O.Length(1024,varying=false))
    /** Database column cdCondition DBType(char), Length(10,false) */
    val cdcondition: Column[Option[String]] = column[Option[String]]("cdCondition", O.Length(10,varying=false))
    /** Database column cdResult DBType(char), Length(1,false) */
    val cdresult: Column[Option[String]] = column[Option[String]]("cdResult", O.Length(1,varying=false))
    /** Database column dtAllowDate DBType(datetime) */
    val dtallowdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtAllowDate")
    /** Database column cdAllowman DBType(nchar), Length(50,false) */
    val cdallowman: Column[Option[String]] = column[Option[String]]("cdAllowman", O.Length(50,varying=false))
    /** Database column dtConsDate DBType(datetime) */
    val dtconsdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtConsDate")
    /** Database column cdConsman DBType(nchar), Length(50,false) */
    val cdconsman: Column[Option[String]] = column[Option[String]]("cdConsman", O.Length(50,varying=false))
    /** Database column cdPayContent DBType(nchar), Length(1024,false) */
    val cdpaycontent: Column[Option[String]] = column[Option[String]]("cdPayContent", O.Length(1024,varying=false))
    /** Database column dtEffectDate DBType(datetime) */
    val dteffectdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEffectDate")
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdType DBType(char), Length(10,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(10,varying=false))
    /** Database column cdInterviewC DBType(char), Length(10,false) */
    val cdinterviewc: Column[Option[String]] = column[Option[String]]("cdInterviewC", O.Length(10,varying=false))
    /** Database column dtApprial DBType(datetime) */
    val dtapprial: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtApprial")
    /** Database column dtLastdate DBType(datetime) */
    val dtlastdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastdate")
    /** Database column cdBonusYM DBType(char), Length(10,false) */
    val cdbonusym: Column[Option[String]] = column[Option[String]]("cdBonusYM", O.Length(10,varying=false))
    /** Database column dtInterviewSys DBType(datetime) */
    val dtinterviewsys: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtInterviewSys")
    /** Database column cdStationID DBType(char), Length(10,false) */
    val cdstationid: Column[Option[String]] = column[Option[String]]("cdStationID", O.Length(10,varying=false))
    /** Database column cdStationCondition DBType(char), Length(10,false) */
    val cdstationcondition: Column[Option[String]] = column[Option[String]]("cdStationCondition", O.Length(10,varying=false))
    /** Database column isMemUp DBType(bit) */
    val ismemup: Column[Option[Boolean]] = column[Option[Boolean]]("isMemUp")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblmem2000His */
  lazy val Tblmem2000His = new TableQuery(tag => new Tblmem2000His(tag))
  
  /** Row type of table Tblmem2010 */
  type Tblmem2010Row = HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Double],HCons[Option[Boolean],HCons[Option[Double],HCons[Option[Boolean],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Int,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblmem2010Row providing default values if available in the database schema. */
  def Tblmem2010Row(uid: String, uidfill: Option[String], uidmem: Option[String], cdmemid: Option[String], dtfilldate: Option[java.sql.Timestamp], cdleader: Option[String], cdinterviewc: Option[String], dtpredate: Option[java.sql.Timestamp], cdprerange: Option[String], dtlasttime: Option[java.sql.Timestamp], dtnexttime: Option[java.sql.Timestamp], dtrealdate: Option[java.sql.Timestamp], cdrealrange: Option[String], cdmasterman: Option[String], cdtechman: Option[String], cdpenman: Option[String], cdnote: Option[String], istestscore: Option[Boolean] = Some(false), ftestscore: Option[Double], istechscore: Option[Boolean] = Some(false), ftechscore: Option[Double], ismeetscore: Option[Boolean] = Some(false), fmeetscore: Option[Double], favg: Option[Double], ftotal: Option[Double], cdresult: Option[String], cdcondition: Option[String], cdsetman: Option[String], dtsetdate: Option[java.sql.Timestamp], cdresultfman: Option[String], dtresultfdate: Option[java.sql.Timestamp], sno: Int, cdtype: Option[String], cdpattern: Option[String], szans: Option[String], cdflag: Option[String] = Some("0"), isinvalid: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): Tblmem2010Row = {
    uid :: uidfill :: uidmem :: cdmemid :: dtfilldate :: cdleader :: cdinterviewc :: dtpredate :: cdprerange :: dtlasttime :: dtnexttime :: dtrealdate :: cdrealrange :: cdmasterman :: cdtechman :: cdpenman :: cdnote :: istestscore :: ftestscore :: istechscore :: ftechscore :: ismeetscore :: fmeetscore :: favg :: ftotal :: cdresult :: cdcondition :: cdsetman :: dtsetdate :: cdresultfman :: dtresultfdate :: sno :: cdtype :: cdpattern :: szans :: cdflag :: isinvalid :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching Tblmem2010Row objects using plain SQL queries */
  implicit def GetResultTblmem2010Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]], e4: GR[Option[Double]], e5: GR[Int]): GR[Tblmem2010Row] = GR{
    prs => import prs._
    <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[Double] :: <<?[Boolean] :: <<?[Double] :: <<?[Boolean] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblMem2010. Objects of this class serve as prototypes for rows in queries. */
  class Tblmem2010(_tableTag: Tag) extends Table[Tblmem2010Row](_tableTag, Some("dbo"), "tblMem2010") {
    def * = uid :: uidfill :: uidmem :: cdmemid :: dtfilldate :: cdleader :: cdinterviewc :: dtpredate :: cdprerange :: dtlasttime :: dtnexttime :: dtrealdate :: cdrealrange :: cdmasterman :: cdtechman :: cdpenman :: cdnote :: istestscore :: ftestscore :: istechscore :: ftechscore :: ismeetscore :: fmeetscore :: favg :: ftotal :: cdresult :: cdcondition :: cdsetman :: dtsetdate :: cdresultfman :: dtresultfdate :: sno :: cdtype :: cdpattern :: szans :: cdflag :: isinvalid :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidFill DBType(uniqueidentifier), Length(36,false) */
    val uidfill: Column[Option[String]] = column[Option[String]]("uidFill", O.Length(36,varying=false))
    /** Database column uidMem DBType(uniqueidentifier), Length(36,false) */
    val uidmem: Column[Option[String]] = column[Option[String]]("uidMem", O.Length(36,varying=false))
    /** Database column cdMemID DBType(char), Length(10,false) */
    val cdmemid: Column[Option[String]] = column[Option[String]]("cdMemID", O.Length(10,varying=false))
    /** Database column dtFillDate DBType(datetime) */
    val dtfilldate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFillDate")
    /** Database column cdLeader DBType(char), Length(10,false) */
    val cdleader: Column[Option[String]] = column[Option[String]]("cdLeader", O.Length(10,varying=false))
    /** Database column cdInterViewC DBType(char), Length(10,false) */
    val cdinterviewc: Column[Option[String]] = column[Option[String]]("cdInterViewC", O.Length(10,varying=false))
    /** Database column dtPredate DBType(datetime) */
    val dtpredate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPredate")
    /** Database column cdPreRange DBType(nchar), Length(10,false) */
    val cdprerange: Column[Option[String]] = column[Option[String]]("cdPreRange", O.Length(10,varying=false))
    /** Database column dtLastTime DBType(datetime) */
    val dtlasttime: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastTime")
    /** Database column dtNextTime DBType(datetime) */
    val dtnexttime: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtNextTime")
    /** Database column dtRealdate DBType(datetime) */
    val dtrealdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtRealdate")
    /** Database column cdRealRange DBType(char), Length(10,false) */
    val cdrealrange: Column[Option[String]] = column[Option[String]]("cdRealRange", O.Length(10,varying=false))
    /** Database column cdMasterMan DBType(nchar), Length(50,false) */
    val cdmasterman: Column[Option[String]] = column[Option[String]]("cdMasterMan", O.Length(50,varying=false))
    /** Database column cdTechMan DBType(nchar), Length(50,false) */
    val cdtechman: Column[Option[String]] = column[Option[String]]("cdTechMan", O.Length(50,varying=false))
    /** Database column cdPenMan DBType(nchar), Length(50,false) */
    val cdpenman: Column[Option[String]] = column[Option[String]]("cdPenMan", O.Length(50,varying=false))
    /** Database column cdNote DBType(nchar), Length(256,false) */
    val cdnote: Column[Option[String]] = column[Option[String]]("cdNote", O.Length(256,varying=false))
    /** Database column isTestScore DBType(bit), Default(Some(false)) */
    val istestscore: Column[Option[Boolean]] = column[Option[Boolean]]("isTestScore", O.Default(Some(false)))
    /** Database column fTestScore DBType(float) */
    val ftestscore: Column[Option[Double]] = column[Option[Double]]("fTestScore")
    /** Database column isTechScore DBType(bit), Default(Some(false)) */
    val istechscore: Column[Option[Boolean]] = column[Option[Boolean]]("isTechScore", O.Default(Some(false)))
    /** Database column fTechScore DBType(float) */
    val ftechscore: Column[Option[Double]] = column[Option[Double]]("fTechScore")
    /** Database column isMeetScore DBType(bit), Default(Some(false)) */
    val ismeetscore: Column[Option[Boolean]] = column[Option[Boolean]]("isMeetScore", O.Default(Some(false)))
    /** Database column fMeetScore DBType(float) */
    val fmeetscore: Column[Option[Double]] = column[Option[Double]]("fMeetScore")
    /** Database column fAvg DBType(float) */
    val favg: Column[Option[Double]] = column[Option[Double]]("fAvg")
    /** Database column fTotal DBType(float) */
    val ftotal: Column[Option[Double]] = column[Option[Double]]("fTotal")
    /** Database column cdResult DBType(nchar), Length(10,false) */
    val cdresult: Column[Option[String]] = column[Option[String]]("cdResult", O.Length(10,varying=false))
    /** Database column cdCondition DBType(char), Length(10,false) */
    val cdcondition: Column[Option[String]] = column[Option[String]]("cdCondition", O.Length(10,varying=false))
    /** Database column cdSetMan DBType(nchar), Length(50,false) */
    val cdsetman: Column[Option[String]] = column[Option[String]]("cdSetMan", O.Length(50,varying=false))
    /** Database column dtSetDate DBType(datetime) */
    val dtsetdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtSetDate")
    /** Database column cdResultFMan DBType(nchar), Length(50,false) */
    val cdresultfman: Column[Option[String]] = column[Option[String]]("cdResultFMan", O.Length(50,varying=false))
    /** Database column dtResultFDate DBType(datetime) */
    val dtresultfdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtResultFDate")
    /** Database column sno DBType(int identity), AutoInc */
    val sno: Column[Int] = column[Int]("sno", O.AutoInc)
    /** Database column cdType DBType(char), Length(10,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(10,varying=false))
    /** Database column cdPattern DBType(char), Length(4,false) */
    val cdpattern: Column[Option[String]] = column[Option[String]]("cdPattern", O.Length(4,varying=false))
    /** Database column szAns DBType(nchar), Length(256,false) */
    val szans: Column[Option[String]] = column[Option[String]]("szAns", O.Length(256,varying=false))
    /** Database column cdFlag DBType(char), Length(10,false), Default(Some(0)) */
    val cdflag: Column[Option[String]] = column[Option[String]]("cdFlag", O.Length(10,varying=false), O.Default(Some("0")))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblmem2010 */
  lazy val Tblmem2010 = new TableQuery(tag => new Tblmem2010(tag))
  
  /** Row type of table Tblmem2010His */
  type Tblmem2010HisRow = HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Double],HCons[Option[Boolean],HCons[Option[Double],HCons[Option[Boolean],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Int,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblmem2010HisRow providing default values if available in the database schema. */
  def Tblmem2010HisRow(uid: String, uidfill: Option[String], uidmem: Option[String], cdmemid: Option[String], dtfilldate: Option[java.sql.Timestamp], cdleader: Option[String], cdinterviewc: Option[String], dtpredate: Option[java.sql.Timestamp], cdprerange: Option[String], dtlasttime: Option[java.sql.Timestamp], dtnexttime: Option[java.sql.Timestamp], dtrealdate: Option[java.sql.Timestamp], cdrealrange: Option[String], cdmasterman: Option[String], cdtechman: Option[String], cdpenman: Option[String], cdnote: Option[String], istestscore: Option[Boolean], ftestscore: Option[Double], istechscore: Option[Boolean], ftechscore: Option[Double], ismeetscore: Option[Boolean], fmeetscore: Option[Double], favg: Option[Double], ftotal: Option[Double], cdresult: Option[String], cdcondition: Option[String], cdsetman: Option[String], dtsetdate: Option[java.sql.Timestamp], cdresultfman: Option[String], dtresultfdate: Option[java.sql.Timestamp], sno: Int, cdtype: Option[String], cdpattern: Option[String], szans: Option[String], cdflag: Option[String], isinvalid: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): Tblmem2010HisRow = {
    uid :: uidfill :: uidmem :: cdmemid :: dtfilldate :: cdleader :: cdinterviewc :: dtpredate :: cdprerange :: dtlasttime :: dtnexttime :: dtrealdate :: cdrealrange :: cdmasterman :: cdtechman :: cdpenman :: cdnote :: istestscore :: ftestscore :: istechscore :: ftechscore :: ismeetscore :: fmeetscore :: favg :: ftotal :: cdresult :: cdcondition :: cdsetman :: dtsetdate :: cdresultfman :: dtresultfdate :: sno :: cdtype :: cdpattern :: szans :: cdflag :: isinvalid :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching Tblmem2010HisRow objects using plain SQL queries */
  implicit def GetResultTblmem2010HisRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]], e4: GR[Option[Double]], e5: GR[Int]): GR[Tblmem2010HisRow] = GR{
    prs => import prs._
    <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[Double] :: <<?[Boolean] :: <<?[Double] :: <<?[Boolean] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblMem2010_His. Objects of this class serve as prototypes for rows in queries. */
  class Tblmem2010His(_tableTag: Tag) extends Table[Tblmem2010HisRow](_tableTag, Some("dbo"), "tblMem2010_His") {
    def * = uid :: uidfill :: uidmem :: cdmemid :: dtfilldate :: cdleader :: cdinterviewc :: dtpredate :: cdprerange :: dtlasttime :: dtnexttime :: dtrealdate :: cdrealrange :: cdmasterman :: cdtechman :: cdpenman :: cdnote :: istestscore :: ftestscore :: istechscore :: ftechscore :: ismeetscore :: fmeetscore :: favg :: ftotal :: cdresult :: cdcondition :: cdsetman :: dtsetdate :: cdresultfman :: dtresultfdate :: sno :: cdtype :: cdpattern :: szans :: cdflag :: isinvalid :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidFill DBType(uniqueidentifier), Length(36,false) */
    val uidfill: Column[Option[String]] = column[Option[String]]("uidFill", O.Length(36,varying=false))
    /** Database column uidMem DBType(uniqueidentifier), Length(36,false) */
    val uidmem: Column[Option[String]] = column[Option[String]]("uidMem", O.Length(36,varying=false))
    /** Database column cdMemID DBType(char), Length(10,false) */
    val cdmemid: Column[Option[String]] = column[Option[String]]("cdMemID", O.Length(10,varying=false))
    /** Database column dtFillDate DBType(datetime) */
    val dtfilldate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFillDate")
    /** Database column cdLeader DBType(char), Length(10,false) */
    val cdleader: Column[Option[String]] = column[Option[String]]("cdLeader", O.Length(10,varying=false))
    /** Database column cdInterViewC DBType(char), Length(10,false) */
    val cdinterviewc: Column[Option[String]] = column[Option[String]]("cdInterViewC", O.Length(10,varying=false))
    /** Database column dtPredate DBType(datetime) */
    val dtpredate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPredate")
    /** Database column cdPreRange DBType(nchar), Length(10,false) */
    val cdprerange: Column[Option[String]] = column[Option[String]]("cdPreRange", O.Length(10,varying=false))
    /** Database column dtLastTime DBType(datetime) */
    val dtlasttime: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastTime")
    /** Database column dtNextTime DBType(datetime) */
    val dtnexttime: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtNextTime")
    /** Database column dtRealdate DBType(datetime) */
    val dtrealdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtRealdate")
    /** Database column cdRealRange DBType(char), Length(10,false) */
    val cdrealrange: Column[Option[String]] = column[Option[String]]("cdRealRange", O.Length(10,varying=false))
    /** Database column cdMasterMan DBType(nchar), Length(50,false) */
    val cdmasterman: Column[Option[String]] = column[Option[String]]("cdMasterMan", O.Length(50,varying=false))
    /** Database column cdTechMan DBType(nchar), Length(50,false) */
    val cdtechman: Column[Option[String]] = column[Option[String]]("cdTechMan", O.Length(50,varying=false))
    /** Database column cdPenMan DBType(nchar), Length(50,false) */
    val cdpenman: Column[Option[String]] = column[Option[String]]("cdPenMan", O.Length(50,varying=false))
    /** Database column cdNote DBType(nchar), Length(256,false) */
    val cdnote: Column[Option[String]] = column[Option[String]]("cdNote", O.Length(256,varying=false))
    /** Database column isTestScore DBType(bit) */
    val istestscore: Column[Option[Boolean]] = column[Option[Boolean]]("isTestScore")
    /** Database column fTestScore DBType(float) */
    val ftestscore: Column[Option[Double]] = column[Option[Double]]("fTestScore")
    /** Database column isTechScore DBType(bit) */
    val istechscore: Column[Option[Boolean]] = column[Option[Boolean]]("isTechScore")
    /** Database column fTechScore DBType(float) */
    val ftechscore: Column[Option[Double]] = column[Option[Double]]("fTechScore")
    /** Database column isMeetScore DBType(bit) */
    val ismeetscore: Column[Option[Boolean]] = column[Option[Boolean]]("isMeetScore")
    /** Database column fMeetScore DBType(float) */
    val fmeetscore: Column[Option[Double]] = column[Option[Double]]("fMeetScore")
    /** Database column fAvg DBType(float) */
    val favg: Column[Option[Double]] = column[Option[Double]]("fAvg")
    /** Database column fTotal DBType(float) */
    val ftotal: Column[Option[Double]] = column[Option[Double]]("fTotal")
    /** Database column cdResult DBType(nchar), Length(10,false) */
    val cdresult: Column[Option[String]] = column[Option[String]]("cdResult", O.Length(10,varying=false))
    /** Database column cdCondition DBType(char), Length(10,false) */
    val cdcondition: Column[Option[String]] = column[Option[String]]("cdCondition", O.Length(10,varying=false))
    /** Database column cdSetMan DBType(nchar), Length(50,false) */
    val cdsetman: Column[Option[String]] = column[Option[String]]("cdSetMan", O.Length(50,varying=false))
    /** Database column dtSetDate DBType(datetime) */
    val dtsetdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtSetDate")
    /** Database column cdResultFMan DBType(nchar), Length(50,false) */
    val cdresultfman: Column[Option[String]] = column[Option[String]]("cdResultFMan", O.Length(50,varying=false))
    /** Database column dtResultFDate DBType(datetime) */
    val dtresultfdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtResultFDate")
    /** Database column sno DBType(int) */
    val sno: Column[Int] = column[Int]("sno")
    /** Database column cdType DBType(char), Length(10,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(10,varying=false))
    /** Database column cdPattern DBType(char), Length(4,false) */
    val cdpattern: Column[Option[String]] = column[Option[String]]("cdPattern", O.Length(4,varying=false))
    /** Database column szAns DBType(nchar), Length(256,false) */
    val szans: Column[Option[String]] = column[Option[String]]("szAns", O.Length(256,varying=false))
    /** Database column cdFlag DBType(char), Length(10,false) */
    val cdflag: Column[Option[String]] = column[Option[String]]("cdFlag", O.Length(10,varying=false))
    /** Database column isInvalid DBType(bit) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblmem2010His */
  lazy val Tblmem2010His = new TableQuery(tag => new Tblmem2010His(tag))
  
  /** Row type of table Tblmember */
  type TblmemberRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Long],HCons[Option[Long],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Long],HCons[Option[Long],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblmemberRow providing default values if available in the database schema. */
  def TblmemberRow(uid: String, cdmember: String, cdapplyarea: String, cdpersa: String, cdpersb: String, cdpergp: String, cdpersg: String, cdsponser: Option[String] = Some("0000000001"), idservice: Option[String] = Some(""), cdseller: Option[String] = Some("9999999999"), cdspecial: Option[String] = Some("9999999999"), cdagency: Option[String] = Some("9999999999"), cdsuper: Option[String] = Some("9999999999"), cdsupervise: Option[String] = Some("9999999999"), cdsrvmember: Option[String] = Some("9999999999"), igeneration: Option[Int] = Some(0), cdcountry: Option[String] = Some(""), cdmemkind: Option[String] = Some(""), szfullname: Option[String] = Some(""), szename: Option[String] = Some(""), cdsex: Option[String] = Some(""), dtbirthday: Option[java.sql.Timestamp], cdcid: Option[String], uidcid: Option[String], cdsub0003: Option[String] = Some(""), cdid: Option[String] = Some(""), sz0005name: Option[String] = Some(""), sz0005cdid: Option[String] = Some(""), cdnotify: Option[String] = Some(""), cdsub0006: Option[String] = Some(""), szfulladdr: Option[String] = Some(""), szlocal: Option[String] = Some(""), cdsub0007: Option[String] = Some(""), szdetail: Option[String] = Some(""), szteldetail: Option[String] = Some(""), szfax: Option[String] = Some(""), szmobile: Option[String] = Some(""), szmail: Option[String] = Some(""), cdlanguage: Option[String] = Some(""), idstatus: Option[String] = Some("1"), dtstractive: Option[java.sql.Timestamp], dtendactive: Option[java.sql.Timestamp], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], icumpv: Option[Long] = Some(0L), icumuppv: Option[Long] = Some(0L), icurrpv: Option[Int] = Some(0), icurruppv: Option[Int] = Some(0), imovepv: Option[Int] = Some(0), ichgsponser: Option[Int] = Some(0), ichgbusiness: Option[Int] = Some(0), isextend: Option[Boolean] = Some(false), ismail: Option[Boolean] = Some(false), ispaper: Option[Boolean] = Some(false), szpaperbe: Option[String] = Some(""), issuspend: Option[Boolean] = Some(false), szsuspendbe: Option[String] = Some(""), isact0003: Option[Boolean] = Some(false), isflag1: Option[Boolean] = Some(true), isflag2: Option[Boolean] = Some(true), isflag3: Option[Boolean] = Some(false), isflag4: Option[Boolean] = Some(false), isflag5: Option[Boolean] = Some(true), isflag6: Option[Boolean] = Some(false), isflag7: Option[Boolean] = Some(false), isflag8: Option[Boolean] = Some(true), isflag9: Option[Boolean] = Some(true), isflag10: Option[Boolean] = Some(true), iscard: Option[Boolean] = Some(false), icardno: Option[Int] = Some(0), iputno: Option[Int] = Some(0), szmemo: Option[String] = Some(""), cdpaymethod: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], icardno2: Option[Int] = Some(0), cdcidnumber: Option[String] = Some(""), cdzip: Option[String] = Some(""), dtlastextended: Option[java.sql.Timestamp], cdidtax: Option[String], icumpvdsd: Option[Long] = Some(0L), icumuppvdsd: Option[Long] = Some(0L), cdbonustype: Option[String] = Some(""), szjapinmail: Option[String] = Some("")): TblmemberRow = {
    uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: icumpvdsd :: icumuppvdsd :: cdbonustype :: szjapinmail :: HNil
  }
  /** GetResult implicit for fetching TblmemberRow objects using plain SQL queries */
  implicit def GetResultTblmemberRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Long]], e5: GR[Option[Boolean]], e6: GR[Option[java.sql.Blob]]): GR[TblmemberRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Long] :: <<?[Long] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Long] :: <<?[Long] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblMember. Objects of this class serve as prototypes for rows in queries. */
  class Tblmember(_tableTag: Tag) extends Table[TblmemberRow](_tableTag, Some("dbo"), "tblMember") {
    def * = uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: icumpvdsd :: icumuppvdsd :: cdbonustype :: szjapinmail :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), PrimaryKey, Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column cdApplyArea DBType(char), Length(4,false) */
    val cdapplyarea: Column[String] = column[String]("cdApplyArea", O.Length(4,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSb DBType(char), Length(4,false) */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false), Default(Some(0000000001)) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false), O.Default(Some("0000000001")))
    /** Database column idService DBType(char), Length(8,false), Default(Some()) */
    val idservice: Column[Option[String]] = column[Option[String]]("idService", O.Length(8,varying=false), O.Default(Some("")))
    /** Database column cdSeller DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSpecial DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdAgency DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSuper DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSupervise DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSrvMember DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column iGeneration DBType(int), Default(Some(0)) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration", O.Default(Some(0)))
    /** Database column cdCountry DBType(char), Length(4,false), Default(Some()) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false), O.Default(Some("")))
    /** Database column cdMemKind DBType(char), Length(1,false), Default(Some()) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column szFullName DBType(nchar), Length(120,false), Default(Some()) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column szEName DBType(nchar), Length(120,false), Default(Some()) */
    val szename: Column[Option[String]] = column[Option[String]]("szEName", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column cdSex DBType(char), Length(1,false), Default(Some()) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column uidCid DBType(uniqueidentifier), Length(36,false) */
    val uidcid: Column[Option[String]] = column[Option[String]]("uidCid", O.Length(36,varying=false))
    /** Database column cdSub0003 DBType(char), Length(2,false), Default(Some()) */
    val cdsub0003: Column[Option[String]] = column[Option[String]]("cdSub0003", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column cdId DBType(char), Length(20,false), Default(Some()) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column sz0005Name DBType(nchar), Length(120,false), Default(Some()) */
    val sz0005name: Column[Option[String]] = column[Option[String]]("sz0005Name", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column sz0005cdId DBType(char), Length(20,false), Default(Some()) */
    val sz0005cdid: Column[Option[String]] = column[Option[String]]("sz0005cdId", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column cdNotify DBType(char), Length(2,false), Default(Some()) */
    val cdnotify: Column[Option[String]] = column[Option[String]]("cdNotify", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column cdSub0006 DBType(char), Length(2,false), Default(Some()) */
    val cdsub0006: Column[Option[String]] = column[Option[String]]("cdSub0006", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column szFullAddr DBType(nchar), Length(128,false), Default(Some()) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szLocal DBType(nchar), Length(128,false), Default(Some()) */
    val szlocal: Column[Option[String]] = column[Option[String]]("szLocal", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column cdSub0007 DBType(char), Length(2,false), Default(Some()) */
    val cdsub0007: Column[Option[String]] = column[Option[String]]("cdSub0007", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column szDetail DBType(nchar), Length(128,false), Default(Some()) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szTelDetail DBType(nchar), Length(10,false), Default(Some()) */
    val szteldetail: Column[Option[String]] = column[Option[String]]("szTelDetail", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szFax DBType(nchar), Length(128,false), Default(Some()) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szMobile DBType(nchar), Length(128,false), Default(Some()) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szMail DBType(nchar), Length(128,false), Default(Some()) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(Some()) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column idStatus DBType(char), Length(1,false), Default(Some(1)) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column dtStrActive DBType(datetime) */
    val dtstractive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrActive")
    /** Database column dtEndActive DBType(datetime) */
    val dtendactive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndActive")
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column iCumPv DBType(bigint), Default(Some(0)) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv", O.Default(Some(0L)))
    /** Database column iCumUpPv DBType(bigint), Default(Some(0)) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv", O.Default(Some(0L)))
    /** Database column iCurrPv DBType(int), Default(Some(0)) */
    val icurrpv: Column[Option[Int]] = column[Option[Int]]("iCurrPv", O.Default(Some(0)))
    /** Database column iCurrUpPv DBType(int), Default(Some(0)) */
    val icurruppv: Column[Option[Int]] = column[Option[Int]]("iCurrUpPv", O.Default(Some(0)))
    /** Database column iMovePv DBType(int), Default(Some(0)) */
    val imovepv: Column[Option[Int]] = column[Option[Int]]("iMovePv", O.Default(Some(0)))
    /** Database column iChgSponser DBType(int), Default(Some(0)) */
    val ichgsponser: Column[Option[Int]] = column[Option[Int]]("iChgSponser", O.Default(Some(0)))
    /** Database column iChgBusiness DBType(int), Default(Some(0)) */
    val ichgbusiness: Column[Option[Int]] = column[Option[Int]]("iChgBusiness", O.Default(Some(0)))
    /** Database column isExtend DBType(bit), Default(Some(false)) */
    val isextend: Column[Option[Boolean]] = column[Option[Boolean]]("isExtend", O.Default(Some(false)))
    /** Database column isMail DBType(bit), Default(Some(false)) */
    val ismail: Column[Option[Boolean]] = column[Option[Boolean]]("isMail", O.Default(Some(false)))
    /** Database column isPaper DBType(bit), Default(Some(false)) */
    val ispaper: Column[Option[Boolean]] = column[Option[Boolean]]("isPaper", O.Default(Some(false)))
    /** Database column szPaperBe DBType(nchar), Length(128,false), Default(Some()) */
    val szpaperbe: Column[Option[String]] = column[Option[String]]("szPaperBe", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column isSuspend DBType(bit), Default(Some(false)) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend", O.Default(Some(false)))
    /** Database column szSuspendBe DBType(nchar), Length(128,false), Default(Some()) */
    val szsuspendbe: Column[Option[String]] = column[Option[String]]("szSuspendBe", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column isAct0003 DBType(bit), Default(Some(false)) */
    val isact0003: Column[Option[Boolean]] = column[Option[Boolean]]("isAct0003", O.Default(Some(false)))
    /** Database column isFlag1 DBType(bit), Default(Some(true)) */
    val isflag1: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag1", O.Default(Some(true)))
    /** Database column isFlag2 DBType(bit), Default(Some(true)) */
    val isflag2: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag2", O.Default(Some(true)))
    /** Database column isFlag3 DBType(bit), Default(Some(false)) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3", O.Default(Some(false)))
    /** Database column isFlag4 DBType(bit), Default(Some(false)) */
    val isflag4: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag4", O.Default(Some(false)))
    /** Database column isFlag5 DBType(bit), Default(Some(true)) */
    val isflag5: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag5", O.Default(Some(true)))
    /** Database column isFlag6 DBType(bit), Default(Some(false)) */
    val isflag6: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag6", O.Default(Some(false)))
    /** Database column isFlag7 DBType(bit), Default(Some(false)) */
    val isflag7: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag7", O.Default(Some(false)))
    /** Database column isFlag8 DBType(bit), Default(Some(true)) */
    val isflag8: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag8", O.Default(Some(true)))
    /** Database column isFlag9 DBType(bit), Default(Some(true)) */
    val isflag9: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag9", O.Default(Some(true)))
    /** Database column isFlag10 DBType(bit), Default(Some(true)) */
    val isflag10: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag10", O.Default(Some(true)))
    /** Database column isCard DBType(bit), Default(Some(false)) */
    val iscard: Column[Option[Boolean]] = column[Option[Boolean]]("isCard", O.Default(Some(false)))
    /** Database column iCardNo DBType(int), Default(Some(0)) */
    val icardno: Column[Option[Int]] = column[Option[Int]]("iCardNo", O.Default(Some(0)))
    /** Database column iPutNo DBType(int), Default(Some(0)) */
    val iputno: Column[Option[Int]] = column[Option[Int]]("iPutNo", O.Default(Some(0)))
    /** Database column szMemo DBType(nchar), Length(256,false), Default(Some()) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(256,varying=false), O.Default(Some("")))
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column iCardNo2 DBType(int), Default(Some(0)) */
    val icardno2: Column[Option[Int]] = column[Option[Int]]("iCardNo2", O.Default(Some(0)))
    /** Database column cdCidNumber DBType(char), Length(10,false), Default(Some()) */
    val cdcidnumber: Column[Option[String]] = column[Option[String]]("cdCidNumber", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdZip DBType(char), Length(6,false), Default(Some()) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(6,varying=false), O.Default(Some("")))
    /** Database column dtLastExtended DBType(datetime) */
    val dtlastextended: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastExtended")
    /** Database column cdIDTax DBType(char), Length(10,false) */
    val cdidtax: Column[Option[String]] = column[Option[String]]("cdIDTax", O.Length(10,varying=false))
    /** Database column iCumPvDSD DBType(bigint), Default(Some(0)) */
    val icumpvdsd: Column[Option[Long]] = column[Option[Long]]("iCumPvDSD", O.Default(Some(0L)))
    /** Database column iCumUpPvDSD DBType(bigint), Default(Some(0)) */
    val icumuppvdsd: Column[Option[Long]] = column[Option[Long]]("iCumUpPvDSD", O.Default(Some(0L)))
    /** Database column cdBonusType DBType(char), Length(1,false), Default(Some()) */
    val cdbonustype: Column[Option[String]] = column[Option[String]]("cdBonusType", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column szJapinMail DBType(varchar), Length(60,true), Default(Some()) */
    val szjapinmail: Column[Option[String]] = column[Option[String]]("szJapinMail", O.Length(60,varying=true), O.Default(Some("")))
    
    /** Index over (igeneration) (database name AK2_tblMember) */
    val index1 = index("AK2_tblMember", igeneration :: HNil)
    /** Index over (cdsponser) (database name AX4_tblMember) */
    val index2 = index("AX4_tblMember", cdsponser :: HNil)
    /** Index over (cdsub0003,cdid) (database name CD_tblMember) */
    val index3 = index("CD_tblMember", cdsub0003 :: cdid :: HNil)
    /** Uniqueness Index over (uid) (database name IX_tblMember) */
    val index4 = index("IX_tblMember", uid :: HNil, unique=true)
    /** Index over (cdpersg,cdmember) (database name IX_tblMember_1) */
    val index5 = index("IX_tblMember_1", cdpersg :: cdmember :: HNil)
  }
  /** Collection-like TableQuery object for table Tblmember */
  lazy val Tblmember = new TableQuery(tag => new Tblmember(tag))
  
  /** Row type of table Tblmember20101020 */
  type Tblmember20101020Row = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Long],HCons[Option[Long],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Long],HCons[Option[Long],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblmember20101020Row providing default values if available in the database schema. */
  def Tblmember20101020Row(uid: String, cdmember: String, cdapplyarea: String, cdpersa: String, cdpersb: String, cdpergp: String, cdpersg: String, cdsponser: Option[String], idservice: Option[String], cdseller: Option[String], cdspecial: Option[String], cdagency: Option[String], cdsuper: Option[String], cdsupervise: Option[String], cdsrvmember: Option[String], igeneration: Option[Int], cdcountry: Option[String], cdmemkind: Option[String], szfullname: Option[String], szename: Option[String], cdsex: Option[String], dtbirthday: Option[java.sql.Timestamp], cdcid: Option[String], uidcid: Option[String], cdsub0003: Option[String], cdid: Option[String], sz0005name: Option[String], sz0005cdid: Option[String], cdnotify: Option[String], cdsub0006: Option[String], szfulladdr: Option[String], szlocal: Option[String], cdsub0007: Option[String], szdetail: Option[String], szteldetail: Option[String], szfax: Option[String], szmobile: Option[String], szmail: Option[String], cdlanguage: Option[String], idstatus: Option[String], dtstractive: Option[java.sql.Timestamp], dtendactive: Option[java.sql.Timestamp], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], icumpv: Option[Long], icumuppv: Option[Long], icurrpv: Option[Int], icurruppv: Option[Int], imovepv: Option[Int], ichgsponser: Option[Int], ichgbusiness: Option[Int], isextend: Option[Boolean], ismail: Option[Boolean], ispaper: Option[Boolean], szpaperbe: Option[String], issuspend: Option[Boolean], szsuspendbe: Option[String], isact0003: Option[Boolean], isflag1: Option[Boolean], isflag2: Option[Boolean], isflag3: Option[Boolean], isflag4: Option[Boolean], isflag5: Option[Boolean], isflag6: Option[Boolean], isflag7: Option[Boolean], isflag8: Option[Boolean], isflag9: Option[Boolean], isflag10: Option[Boolean], iscard: Option[Boolean], icardno: Option[Int], iputno: Option[Int], szmemo: Option[String], cdpaymethod: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], icardno2: Option[Int], cdcidnumber: Option[String], cdzip: Option[String], dtlastextended: Option[java.sql.Timestamp], cdidtax: Option[String], icumpvdsd: Option[Long], icumuppvdsd: Option[Long], cdbonustype: Option[String], szjapinmail: Option[String]): Tblmember20101020Row = {
    uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: icumpvdsd :: icumuppvdsd :: cdbonustype :: szjapinmail :: HNil
  }
  /** GetResult implicit for fetching Tblmember20101020Row objects using plain SQL queries */
  implicit def GetResultTblmember20101020Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Long]], e5: GR[Option[Boolean]], e6: GR[Option[java.sql.Blob]]): GR[Tblmember20101020Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Long] :: <<?[Long] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Long] :: <<?[Long] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblmember_20101020. Objects of this class serve as prototypes for rows in queries. */
  class Tblmember20101020(_tableTag: Tag) extends Table[Tblmember20101020Row](_tableTag, Some("dbo"), "tblmember_20101020") {
    def * = uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: icumpvdsd :: icumuppvdsd :: cdbonustype :: szjapinmail :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdApplyArea DBType(char), Length(4,false) */
    val cdapplyarea: Column[String] = column[String]("cdApplyArea", O.Length(4,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSb DBType(char), Length(4,false) */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column idService DBType(char), Length(8,false) */
    val idservice: Column[Option[String]] = column[Option[String]]("idService", O.Length(8,varying=false))
    /** Database column cdSeller DBType(char), Length(10,false) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false))
    /** Database column cdSpecial DBType(char), Length(10,false) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false))
    /** Database column cdAgency DBType(char), Length(10,false) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false))
    /** Database column cdSuper DBType(char), Length(10,false) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false))
    /** Database column cdSupervise DBType(char), Length(10,false) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false))
    /** Database column cdSrvMember DBType(char), Length(10,false) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false))
    /** Database column iGeneration DBType(int) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration")
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column szEName DBType(nchar), Length(120,false) */
    val szename: Column[Option[String]] = column[Option[String]]("szEName", O.Length(120,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column uidCid DBType(uniqueidentifier), Length(36,false) */
    val uidcid: Column[Option[String]] = column[Option[String]]("uidCid", O.Length(36,varying=false))
    /** Database column cdSub0003 DBType(char), Length(2,false) */
    val cdsub0003: Column[Option[String]] = column[Option[String]]("cdSub0003", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column sz0005Name DBType(nchar), Length(120,false) */
    val sz0005name: Column[Option[String]] = column[Option[String]]("sz0005Name", O.Length(120,varying=false))
    /** Database column sz0005cdId DBType(char), Length(20,false) */
    val sz0005cdid: Column[Option[String]] = column[Option[String]]("sz0005cdId", O.Length(20,varying=false))
    /** Database column cdNotify DBType(char), Length(2,false) */
    val cdnotify: Column[Option[String]] = column[Option[String]]("cdNotify", O.Length(2,varying=false))
    /** Database column cdSub0006 DBType(char), Length(2,false) */
    val cdsub0006: Column[Option[String]] = column[Option[String]]("cdSub0006", O.Length(2,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(128,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=false))
    /** Database column szLocal DBType(nchar), Length(128,false) */
    val szlocal: Column[Option[String]] = column[Option[String]]("szLocal", O.Length(128,varying=false))
    /** Database column cdSub0007 DBType(char), Length(2,false) */
    val cdsub0007: Column[Option[String]] = column[Option[String]]("cdSub0007", O.Length(2,varying=false))
    /** Database column szDetail DBType(nchar), Length(128,false) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false))
    /** Database column szTelDetail DBType(nchar), Length(10,false) */
    val szteldetail: Column[Option[String]] = column[Option[String]]("szTelDetail", O.Length(10,varying=false))
    /** Database column szFax DBType(nchar), Length(128,false) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(128,varying=false))
    /** Database column szMobile DBType(nchar), Length(128,false) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false))
    /** Database column szMail DBType(nchar), Length(128,false) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false))
    /** Database column dtStrActive DBType(datetime) */
    val dtstractive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrActive")
    /** Database column dtEndActive DBType(datetime) */
    val dtendactive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndActive")
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column iCumPv DBType(bigint) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv")
    /** Database column iCumUpPv DBType(bigint) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv")
    /** Database column iCurrPv DBType(int) */
    val icurrpv: Column[Option[Int]] = column[Option[Int]]("iCurrPv")
    /** Database column iCurrUpPv DBType(int) */
    val icurruppv: Column[Option[Int]] = column[Option[Int]]("iCurrUpPv")
    /** Database column iMovePv DBType(int) */
    val imovepv: Column[Option[Int]] = column[Option[Int]]("iMovePv")
    /** Database column iChgSponser DBType(int) */
    val ichgsponser: Column[Option[Int]] = column[Option[Int]]("iChgSponser")
    /** Database column iChgBusiness DBType(int) */
    val ichgbusiness: Column[Option[Int]] = column[Option[Int]]("iChgBusiness")
    /** Database column isExtend DBType(bit) */
    val isextend: Column[Option[Boolean]] = column[Option[Boolean]]("isExtend")
    /** Database column isMail DBType(bit) */
    val ismail: Column[Option[Boolean]] = column[Option[Boolean]]("isMail")
    /** Database column isPaper DBType(bit) */
    val ispaper: Column[Option[Boolean]] = column[Option[Boolean]]("isPaper")
    /** Database column szPaperBe DBType(nchar), Length(128,false) */
    val szpaperbe: Column[Option[String]] = column[Option[String]]("szPaperBe", O.Length(128,varying=false))
    /** Database column isSuspend DBType(bit) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend")
    /** Database column szSuspendBe DBType(nchar), Length(128,false) */
    val szsuspendbe: Column[Option[String]] = column[Option[String]]("szSuspendBe", O.Length(128,varying=false))
    /** Database column isAct0003 DBType(bit) */
    val isact0003: Column[Option[Boolean]] = column[Option[Boolean]]("isAct0003")
    /** Database column isFlag1 DBType(bit) */
    val isflag1: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag1")
    /** Database column isFlag2 DBType(bit) */
    val isflag2: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag2")
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column isFlag4 DBType(bit) */
    val isflag4: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag4")
    /** Database column isFlag5 DBType(bit) */
    val isflag5: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag5")
    /** Database column isFlag6 DBType(bit) */
    val isflag6: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag6")
    /** Database column isFlag7 DBType(bit) */
    val isflag7: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag7")
    /** Database column isFlag8 DBType(bit) */
    val isflag8: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag8")
    /** Database column isFlag9 DBType(bit) */
    val isflag9: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag9")
    /** Database column isFlag10 DBType(bit) */
    val isflag10: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag10")
    /** Database column isCard DBType(bit) */
    val iscard: Column[Option[Boolean]] = column[Option[Boolean]]("isCard")
    /** Database column iCardNo DBType(int) */
    val icardno: Column[Option[Int]] = column[Option[Int]]("iCardNo")
    /** Database column iPutNo DBType(int) */
    val iputno: Column[Option[Int]] = column[Option[Int]]("iPutNo")
    /** Database column szMemo DBType(nchar), Length(256,false) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(256,varying=false))
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column iCardNo2 DBType(int) */
    val icardno2: Column[Option[Int]] = column[Option[Int]]("iCardNo2")
    /** Database column cdCidNumber DBType(char), Length(10,false) */
    val cdcidnumber: Column[Option[String]] = column[Option[String]]("cdCidNumber", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(6,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(6,varying=false))
    /** Database column dtLastExtended DBType(datetime) */
    val dtlastextended: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastExtended")
    /** Database column cdIDTax DBType(char), Length(10,false) */
    val cdidtax: Column[Option[String]] = column[Option[String]]("cdIDTax", O.Length(10,varying=false))
    /** Database column iCumPvDSD DBType(bigint) */
    val icumpvdsd: Column[Option[Long]] = column[Option[Long]]("iCumPvDSD")
    /** Database column iCumUpPvDSD DBType(bigint) */
    val icumuppvdsd: Column[Option[Long]] = column[Option[Long]]("iCumUpPvDSD")
    /** Database column cdBonusType DBType(char), Length(1,false) */
    val cdbonustype: Column[Option[String]] = column[Option[String]]("cdBonusType", O.Length(1,varying=false))
    /** Database column szJapinMail DBType(varchar), Length(60,true) */
    val szjapinmail: Column[Option[String]] = column[Option[String]]("szJapinMail", O.Length(60,varying=true))
  }
  /** Collection-like TableQuery object for table Tblmember20101020 */
  lazy val Tblmember20101020 = new TableQuery(tag => new Tblmember20101020(tag))
  
  /** Row type of table Tblmember20110107 */
  type Tblmember20110107Row = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Long],HCons[Option[Long],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Long],HCons[Option[Long],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblmember20110107Row providing default values if available in the database schema. */
  def Tblmember20110107Row(uid: String, cdmember: String, cdapplyarea: String, cdpersa: String, cdpersb: String, cdpergp: String, cdpersg: String, cdsponser: Option[String], idservice: Option[String], cdseller: Option[String], cdspecial: Option[String], cdagency: Option[String], cdsuper: Option[String], cdsupervise: Option[String], cdsrvmember: Option[String], igeneration: Option[Int], cdcountry: Option[String], cdmemkind: Option[String], szfullname: Option[String], szename: Option[String], cdsex: Option[String], dtbirthday: Option[java.sql.Timestamp], cdcid: Option[String], uidcid: Option[String], cdsub0003: Option[String], cdid: Option[String], sz0005name: Option[String], sz0005cdid: Option[String], cdnotify: Option[String], cdsub0006: Option[String], szfulladdr: Option[String], szlocal: Option[String], cdsub0007: Option[String], szdetail: Option[String], szteldetail: Option[String], szfax: Option[String], szmobile: Option[String], szmail: Option[String], cdlanguage: Option[String], idstatus: Option[String], dtstractive: Option[java.sql.Timestamp], dtendactive: Option[java.sql.Timestamp], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], icumpv: Option[Long], icumuppv: Option[Long], icurrpv: Option[Int], icurruppv: Option[Int], imovepv: Option[Int], ichgsponser: Option[Int], ichgbusiness: Option[Int], isextend: Option[Boolean], ismail: Option[Boolean], ispaper: Option[Boolean], szpaperbe: Option[String], issuspend: Option[Boolean], szsuspendbe: Option[String], isact0003: Option[Boolean], isflag1: Option[Boolean], isflag2: Option[Boolean], isflag3: Option[Boolean], isflag4: Option[Boolean], isflag5: Option[Boolean], isflag6: Option[Boolean], isflag7: Option[Boolean], isflag8: Option[Boolean], isflag9: Option[Boolean], isflag10: Option[Boolean], iscard: Option[Boolean], icardno: Option[Int], iputno: Option[Int], szmemo: Option[String], cdpaymethod: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], icardno2: Option[Int], cdcidnumber: Option[String], cdzip: Option[String], dtlastextended: Option[java.sql.Timestamp], cdidtax: Option[String], icumpvdsd: Option[Long], icumuppvdsd: Option[Long], cdbonustype: Option[String], szjapinmail: Option[String]): Tblmember20110107Row = {
    uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: icumpvdsd :: icumuppvdsd :: cdbonustype :: szjapinmail :: HNil
  }
  /** GetResult implicit for fetching Tblmember20110107Row objects using plain SQL queries */
  implicit def GetResultTblmember20110107Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Long]], e5: GR[Option[Boolean]], e6: GR[Option[java.sql.Blob]]): GR[Tblmember20110107Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Long] :: <<?[Long] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Long] :: <<?[Long] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblMember_20110107. Objects of this class serve as prototypes for rows in queries. */
  class Tblmember20110107(_tableTag: Tag) extends Table[Tblmember20110107Row](_tableTag, Some("dbo"), "tblMember_20110107") {
    def * = uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: icumpvdsd :: icumuppvdsd :: cdbonustype :: szjapinmail :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdApplyArea DBType(char), Length(4,false) */
    val cdapplyarea: Column[String] = column[String]("cdApplyArea", O.Length(4,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSb DBType(char), Length(4,false) */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column idService DBType(char), Length(8,false) */
    val idservice: Column[Option[String]] = column[Option[String]]("idService", O.Length(8,varying=false))
    /** Database column cdSeller DBType(char), Length(10,false) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false))
    /** Database column cdSpecial DBType(char), Length(10,false) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false))
    /** Database column cdAgency DBType(char), Length(10,false) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false))
    /** Database column cdSuper DBType(char), Length(10,false) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false))
    /** Database column cdSupervise DBType(char), Length(10,false) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false))
    /** Database column cdSrvMember DBType(char), Length(10,false) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false))
    /** Database column iGeneration DBType(int) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration")
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column szEName DBType(nchar), Length(120,false) */
    val szename: Column[Option[String]] = column[Option[String]]("szEName", O.Length(120,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column uidCid DBType(uniqueidentifier), Length(36,false) */
    val uidcid: Column[Option[String]] = column[Option[String]]("uidCid", O.Length(36,varying=false))
    /** Database column cdSub0003 DBType(char), Length(2,false) */
    val cdsub0003: Column[Option[String]] = column[Option[String]]("cdSub0003", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column sz0005Name DBType(nchar), Length(120,false) */
    val sz0005name: Column[Option[String]] = column[Option[String]]("sz0005Name", O.Length(120,varying=false))
    /** Database column sz0005cdId DBType(char), Length(20,false) */
    val sz0005cdid: Column[Option[String]] = column[Option[String]]("sz0005cdId", O.Length(20,varying=false))
    /** Database column cdNotify DBType(char), Length(2,false) */
    val cdnotify: Column[Option[String]] = column[Option[String]]("cdNotify", O.Length(2,varying=false))
    /** Database column cdSub0006 DBType(char), Length(2,false) */
    val cdsub0006: Column[Option[String]] = column[Option[String]]("cdSub0006", O.Length(2,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(128,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=false))
    /** Database column szLocal DBType(nchar), Length(128,false) */
    val szlocal: Column[Option[String]] = column[Option[String]]("szLocal", O.Length(128,varying=false))
    /** Database column cdSub0007 DBType(char), Length(2,false) */
    val cdsub0007: Column[Option[String]] = column[Option[String]]("cdSub0007", O.Length(2,varying=false))
    /** Database column szDetail DBType(nchar), Length(128,false) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false))
    /** Database column szTelDetail DBType(nchar), Length(10,false) */
    val szteldetail: Column[Option[String]] = column[Option[String]]("szTelDetail", O.Length(10,varying=false))
    /** Database column szFax DBType(nchar), Length(128,false) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(128,varying=false))
    /** Database column szMobile DBType(nchar), Length(128,false) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false))
    /** Database column szMail DBType(nchar), Length(128,false) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false))
    /** Database column dtStrActive DBType(datetime) */
    val dtstractive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrActive")
    /** Database column dtEndActive DBType(datetime) */
    val dtendactive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndActive")
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column iCumPv DBType(bigint) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv")
    /** Database column iCumUpPv DBType(bigint) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv")
    /** Database column iCurrPv DBType(int) */
    val icurrpv: Column[Option[Int]] = column[Option[Int]]("iCurrPv")
    /** Database column iCurrUpPv DBType(int) */
    val icurruppv: Column[Option[Int]] = column[Option[Int]]("iCurrUpPv")
    /** Database column iMovePv DBType(int) */
    val imovepv: Column[Option[Int]] = column[Option[Int]]("iMovePv")
    /** Database column iChgSponser DBType(int) */
    val ichgsponser: Column[Option[Int]] = column[Option[Int]]("iChgSponser")
    /** Database column iChgBusiness DBType(int) */
    val ichgbusiness: Column[Option[Int]] = column[Option[Int]]("iChgBusiness")
    /** Database column isExtend DBType(bit) */
    val isextend: Column[Option[Boolean]] = column[Option[Boolean]]("isExtend")
    /** Database column isMail DBType(bit) */
    val ismail: Column[Option[Boolean]] = column[Option[Boolean]]("isMail")
    /** Database column isPaper DBType(bit) */
    val ispaper: Column[Option[Boolean]] = column[Option[Boolean]]("isPaper")
    /** Database column szPaperBe DBType(nchar), Length(128,false) */
    val szpaperbe: Column[Option[String]] = column[Option[String]]("szPaperBe", O.Length(128,varying=false))
    /** Database column isSuspend DBType(bit) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend")
    /** Database column szSuspendBe DBType(nchar), Length(128,false) */
    val szsuspendbe: Column[Option[String]] = column[Option[String]]("szSuspendBe", O.Length(128,varying=false))
    /** Database column isAct0003 DBType(bit) */
    val isact0003: Column[Option[Boolean]] = column[Option[Boolean]]("isAct0003")
    /** Database column isFlag1 DBType(bit) */
    val isflag1: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag1")
    /** Database column isFlag2 DBType(bit) */
    val isflag2: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag2")
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column isFlag4 DBType(bit) */
    val isflag4: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag4")
    /** Database column isFlag5 DBType(bit) */
    val isflag5: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag5")
    /** Database column isFlag6 DBType(bit) */
    val isflag6: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag6")
    /** Database column isFlag7 DBType(bit) */
    val isflag7: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag7")
    /** Database column isFlag8 DBType(bit) */
    val isflag8: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag8")
    /** Database column isFlag9 DBType(bit) */
    val isflag9: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag9")
    /** Database column isFlag10 DBType(bit) */
    val isflag10: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag10")
    /** Database column isCard DBType(bit) */
    val iscard: Column[Option[Boolean]] = column[Option[Boolean]]("isCard")
    /** Database column iCardNo DBType(int) */
    val icardno: Column[Option[Int]] = column[Option[Int]]("iCardNo")
    /** Database column iPutNo DBType(int) */
    val iputno: Column[Option[Int]] = column[Option[Int]]("iPutNo")
    /** Database column szMemo DBType(nchar), Length(256,false) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(256,varying=false))
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column iCardNo2 DBType(int) */
    val icardno2: Column[Option[Int]] = column[Option[Int]]("iCardNo2")
    /** Database column cdCidNumber DBType(char), Length(10,false) */
    val cdcidnumber: Column[Option[String]] = column[Option[String]]("cdCidNumber", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(6,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(6,varying=false))
    /** Database column dtLastExtended DBType(datetime) */
    val dtlastextended: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastExtended")
    /** Database column cdIDTax DBType(char), Length(10,false) */
    val cdidtax: Column[Option[String]] = column[Option[String]]("cdIDTax", O.Length(10,varying=false))
    /** Database column iCumPvDSD DBType(bigint) */
    val icumpvdsd: Column[Option[Long]] = column[Option[Long]]("iCumPvDSD")
    /** Database column iCumUpPvDSD DBType(bigint) */
    val icumuppvdsd: Column[Option[Long]] = column[Option[Long]]("iCumUpPvDSD")
    /** Database column cdBonusType DBType(char), Length(1,false) */
    val cdbonustype: Column[Option[String]] = column[Option[String]]("cdBonusType", O.Length(1,varying=false))
    /** Database column szJapinMail DBType(varchar), Length(60,true) */
    val szjapinmail: Column[Option[String]] = column[Option[String]]("szJapinMail", O.Length(60,varying=true))
  }
  /** Collection-like TableQuery object for table Tblmember20110107 */
  lazy val Tblmember20110107 = new TableQuery(tag => new Tblmember20110107(tag))
  
  /** Row type of table Tblmember960402 */
  type Tblmember960402Row = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Long],HCons[Option[Long],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblmember960402Row providing default values if available in the database schema. */
  def Tblmember960402Row(uid: String, cdmember: String, cdapplyarea: String, cdpersa: String, cdpersb: String, cdpergp: String, cdpersg: String, cdsponser: Option[String], idservice: Option[String], cdseller: Option[String], cdspecial: Option[String], cdagency: Option[String], cdsuper: Option[String], cdsupervise: Option[String], cdsrvmember: Option[String], igeneration: Option[Int], cdcountry: Option[String], cdmemkind: Option[String], szfullname: Option[String], szename: Option[String], cdsex: Option[String], dtbirthday: Option[java.sql.Timestamp], cdcid: Option[String], uidcid: Option[String], cdsub0003: Option[String], cdid: Option[String], sz0005name: Option[String], sz0005cdid: Option[String], cdnotify: Option[String], cdsub0006: Option[String], szfulladdr: Option[String], szlocal: Option[String], cdsub0007: Option[String], szdetail: Option[String], szteldetail: Option[String], szfax: Option[String], szmobile: Option[String], szmail: Option[String], cdlanguage: Option[String], idstatus: Option[String], dtstractive: Option[java.sql.Timestamp], dtendactive: Option[java.sql.Timestamp], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], icumpv: Option[Long], icumuppv: Option[Long], icurrpv: Option[Int], icurruppv: Option[Int], imovepv: Option[Int], ichgsponser: Option[Int], ichgbusiness: Option[Int], isextend: Option[Boolean], ismail: Option[Boolean], ispaper: Option[Boolean], szpaperbe: Option[String], issuspend: Option[Boolean], szsuspendbe: Option[String], isact0003: Option[Boolean], isflag1: Option[Boolean], isflag2: Option[Boolean], isflag3: Option[Boolean], isflag4: Option[Boolean], isflag5: Option[Boolean], isflag6: Option[Boolean], isflag7: Option[Boolean], isflag8: Option[Boolean], isflag9: Option[Boolean], isflag10: Option[Boolean], iscard: Option[Boolean], icardno: Option[Int], iputno: Option[Int], szmemo: Option[String], cdpaymethod: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], icardno2: Option[Int], cdcidnumber: Option[String], cdzip: Option[String], dtlastextended: Option[java.sql.Timestamp], cdidtax: Option[String]): Tblmember960402Row = {
    uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: HNil
  }
  /** GetResult implicit for fetching Tblmember960402Row objects using plain SQL queries */
  implicit def GetResultTblmember960402Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Long]], e5: GR[Option[Boolean]], e6: GR[Option[java.sql.Blob]]): GR[Tblmember960402Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Long] :: <<?[Long] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: HNil
  }
  /** Table description of table tblMember960402. Objects of this class serve as prototypes for rows in queries. */
  class Tblmember960402(_tableTag: Tag) extends Table[Tblmember960402Row](_tableTag, Some("dbo"), "tblMember960402") {
    def * = uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdApplyArea DBType(char), Length(4,false) */
    val cdapplyarea: Column[String] = column[String]("cdApplyArea", O.Length(4,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSb DBType(char), Length(4,false) */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column idService DBType(char), Length(8,false) */
    val idservice: Column[Option[String]] = column[Option[String]]("idService", O.Length(8,varying=false))
    /** Database column cdSeller DBType(char), Length(10,false) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false))
    /** Database column cdSpecial DBType(char), Length(10,false) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false))
    /** Database column cdAgency DBType(char), Length(10,false) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false))
    /** Database column cdSuper DBType(char), Length(10,false) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false))
    /** Database column cdSupervise DBType(char), Length(10,false) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false))
    /** Database column cdSrvMember DBType(char), Length(10,false) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false))
    /** Database column iGeneration DBType(int) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration")
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column szEName DBType(nchar), Length(120,false) */
    val szename: Column[Option[String]] = column[Option[String]]("szEName", O.Length(120,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column uidCid DBType(uniqueidentifier), Length(36,false) */
    val uidcid: Column[Option[String]] = column[Option[String]]("uidCid", O.Length(36,varying=false))
    /** Database column cdSub0003 DBType(char), Length(2,false) */
    val cdsub0003: Column[Option[String]] = column[Option[String]]("cdSub0003", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column sz0005Name DBType(nchar), Length(120,false) */
    val sz0005name: Column[Option[String]] = column[Option[String]]("sz0005Name", O.Length(120,varying=false))
    /** Database column sz0005cdId DBType(char), Length(10,false) */
    val sz0005cdid: Column[Option[String]] = column[Option[String]]("sz0005cdId", O.Length(10,varying=false))
    /** Database column cdNotify DBType(char), Length(2,false) */
    val cdnotify: Column[Option[String]] = column[Option[String]]("cdNotify", O.Length(2,varying=false))
    /** Database column cdSub0006 DBType(char), Length(2,false) */
    val cdsub0006: Column[Option[String]] = column[Option[String]]("cdSub0006", O.Length(2,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(128,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=false))
    /** Database column szLocal DBType(nchar), Length(128,false) */
    val szlocal: Column[Option[String]] = column[Option[String]]("szLocal", O.Length(128,varying=false))
    /** Database column cdSub0007 DBType(char), Length(2,false) */
    val cdsub0007: Column[Option[String]] = column[Option[String]]("cdSub0007", O.Length(2,varying=false))
    /** Database column szDetail DBType(nchar), Length(128,false) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false))
    /** Database column szTelDetail DBType(nchar), Length(10,false) */
    val szteldetail: Column[Option[String]] = column[Option[String]]("szTelDetail", O.Length(10,varying=false))
    /** Database column szFax DBType(nchar), Length(128,false) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(128,varying=false))
    /** Database column szMobile DBType(nchar), Length(128,false) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false))
    /** Database column szMail DBType(nchar), Length(128,false) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false))
    /** Database column dtStrActive DBType(datetime) */
    val dtstractive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrActive")
    /** Database column dtEndActive DBType(datetime) */
    val dtendactive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndActive")
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column iCumPv DBType(bigint) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv")
    /** Database column iCumUpPv DBType(bigint) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv")
    /** Database column iCurrPv DBType(int) */
    val icurrpv: Column[Option[Int]] = column[Option[Int]]("iCurrPv")
    /** Database column iCurrUpPv DBType(int) */
    val icurruppv: Column[Option[Int]] = column[Option[Int]]("iCurrUpPv")
    /** Database column iMovePv DBType(int) */
    val imovepv: Column[Option[Int]] = column[Option[Int]]("iMovePv")
    /** Database column iChgSponser DBType(int) */
    val ichgsponser: Column[Option[Int]] = column[Option[Int]]("iChgSponser")
    /** Database column iChgBusiness DBType(int) */
    val ichgbusiness: Column[Option[Int]] = column[Option[Int]]("iChgBusiness")
    /** Database column isExtend DBType(bit) */
    val isextend: Column[Option[Boolean]] = column[Option[Boolean]]("isExtend")
    /** Database column isMail DBType(bit) */
    val ismail: Column[Option[Boolean]] = column[Option[Boolean]]("isMail")
    /** Database column isPaper DBType(bit) */
    val ispaper: Column[Option[Boolean]] = column[Option[Boolean]]("isPaper")
    /** Database column szPaperBe DBType(nchar), Length(128,false) */
    val szpaperbe: Column[Option[String]] = column[Option[String]]("szPaperBe", O.Length(128,varying=false))
    /** Database column isSuspend DBType(bit) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend")
    /** Database column szSuspendBe DBType(nchar), Length(128,false) */
    val szsuspendbe: Column[Option[String]] = column[Option[String]]("szSuspendBe", O.Length(128,varying=false))
    /** Database column isAct0003 DBType(bit) */
    val isact0003: Column[Option[Boolean]] = column[Option[Boolean]]("isAct0003")
    /** Database column isFlag1 DBType(bit) */
    val isflag1: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag1")
    /** Database column isFlag2 DBType(bit) */
    val isflag2: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag2")
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column isFlag4 DBType(bit) */
    val isflag4: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag4")
    /** Database column isFlag5 DBType(bit) */
    val isflag5: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag5")
    /** Database column isFlag6 DBType(bit) */
    val isflag6: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag6")
    /** Database column isFlag7 DBType(bit) */
    val isflag7: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag7")
    /** Database column isFlag8 DBType(bit) */
    val isflag8: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag8")
    /** Database column isFlag9 DBType(bit) */
    val isflag9: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag9")
    /** Database column isFlag10 DBType(bit) */
    val isflag10: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag10")
    /** Database column isCard DBType(bit) */
    val iscard: Column[Option[Boolean]] = column[Option[Boolean]]("isCard")
    /** Database column iCardNo DBType(int) */
    val icardno: Column[Option[Int]] = column[Option[Int]]("iCardNo")
    /** Database column iPutNo DBType(int) */
    val iputno: Column[Option[Int]] = column[Option[Int]]("iPutNo")
    /** Database column szMemo DBType(nchar), Length(256,false) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(256,varying=false))
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column iCardNo2 DBType(int) */
    val icardno2: Column[Option[Int]] = column[Option[Int]]("iCardNo2")
    /** Database column cdCidNumber DBType(char), Length(10,false) */
    val cdcidnumber: Column[Option[String]] = column[Option[String]]("cdCidNumber", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(6,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(6,varying=false))
    /** Database column dtLastExtended DBType(datetime) */
    val dtlastextended: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastExtended")
    /** Database column cdIDTax DBType(char), Length(10,false) */
    val cdidtax: Column[Option[String]] = column[Option[String]]("cdIDTax", O.Length(10,varying=false))
  }
  /** Collection-like TableQuery object for table Tblmember960402 */
  lazy val Tblmember960402 = new TableQuery(tag => new Tblmember960402(tag))
  
  /** Row type of table Tblmemberhis */
  type TblmemberhisRow = HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Long],HCons[Option[Long],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblmemberhisRow providing default values if available in the database schema. */
  def TblmemberhisRow(szdatayear: String, szdatamonth: String, cdmember: String, cdpersa: Option[String] = Some(""), dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], cdmemkind: Option[String] = Some(""), cdcid: Option[String], cdid: Option[String] = Some(""), dtcreate: Option[java.sql.Timestamp], cdsrvmember: Option[String] = Some(""), icumpv: Option[Long] = Some(0L), icumuppv: Option[Long] = Some(0L), idstatus: Option[String] = Some("1"), szfullname: Option[String] = Some(""), cdpersg: Option[String] = Some(""), cdsponser: Option[String] = Some("0000000001"), cdzip: Option[String] = Some(""), szfulladdr: Option[String] = Some(""), uid: Option[String], cdpergp: Option[String] = Some(""), szdetail: Option[String] = Some(""), szmobile: Option[String] = Some(""), isflag3: Option[Boolean] = Some(false), cdpaymethod: Option[String], issuspend: Option[Boolean] = Some(false), cdbank: Option[String] = Some(""), cdbranch: Option[String] = Some(""), szaccountno: Option[String] = Some(""), szholder: Option[String] = Some(""), szbank: Option[String] = Some(""), cdpid: Option[String] = Some(""), icumpvdsd: Option[Int] = Some(0), icumuppvdsd: Option[Int] = Some(0)): TblmemberhisRow = {
    szdatayear :: szdatamonth :: cdmember :: cdpersa :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: dtcreate :: cdsrvmember :: icumpv :: icumuppv :: idstatus :: szfullname :: cdpersg :: cdsponser :: cdzip :: szfulladdr :: uid :: cdpergp :: szdetail :: szmobile :: isflag3 :: cdpaymethod :: issuspend :: cdbank :: cdbranch :: szaccountno :: szholder :: szbank :: cdpid :: icumpvdsd :: icumuppvdsd :: HNil
  }
  /** GetResult implicit for fetching TblmemberhisRow objects using plain SQL queries */
  implicit def GetResultTblmemberhisRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Long]], e4: GR[Option[Boolean]], e5: GR[Option[Int]]): GR[TblmemberhisRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Long] :: <<?[Long] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: HNil
  }
  /** Table description of table tblMemberHis. Objects of this class serve as prototypes for rows in queries. */
  class Tblmemberhis(_tableTag: Tag) extends Table[TblmemberhisRow](_tableTag, Some("dbo"), "tblMemberHis") {
    def * = szdatayear :: szdatamonth :: cdmember :: cdpersa :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: dtcreate :: cdsrvmember :: icumpv :: icumuppv :: idstatus :: szfullname :: cdpersg :: cdsponser :: cdzip :: szfulladdr :: uid :: cdpergp :: szdetail :: szmobile :: isflag3 :: cdpaymethod :: issuspend :: cdbank :: cdbranch :: szaccountno :: szholder :: szbank :: cdpid :: icumpvdsd :: icumuppvdsd :: HNil
    
    /** Database column szDataYear DBType(char), Length(4,false) */
    val szdatayear: Column[String] = column[String]("szDataYear", O.Length(4,varying=false))
    /** Database column szDataMonth DBType(char), Length(2,false) */
    val szdatamonth: Column[String] = column[String]("szDataMonth", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false), Default(Some()) */
    val cdpersa: Column[Option[String]] = column[Option[String]]("cdPerSa", O.Length(4,varying=false), O.Default(Some("")))
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column cdMemKind DBType(char), Length(1,false), Default(Some()) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false), Default(Some()) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column cdSrvMember DBType(char), Length(10,false), Default(Some()) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column iCumPv DBType(bigint), Default(Some(0)) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv", O.Default(Some(0L)))
    /** Database column iCumUpPv DBType(bigint), Default(Some(0)) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv", O.Default(Some(0L)))
    /** Database column idStatus DBType(char), Length(1,false), Default(Some(1)) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column szFullName DBType(nvarchar), Length(120,true), Default(Some()) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true), O.Default(Some("")))
    /** Database column cdPerSg DBType(char), Length(2,false), Default(Some()) */
    val cdpersg: Column[Option[String]] = column[Option[String]]("cdPerSg", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column cdSponser DBType(char), Length(10,false), Default(Some(0000000001)) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false), O.Default(Some("0000000001")))
    /** Database column cdZip DBType(char), Length(10,false), Default(Some()) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szFullAddr DBType(nvarchar), Length(256,true), Default(Some()) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(256,varying=true), O.Default(Some("")))
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false), Default(Some()) */
    val cdpergp: Column[Option[String]] = column[Option[String]]("cdPerGp", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column szDetail DBType(nvarchar), Length(128,true), Default(Some()) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szMobile DBType(nvarchar), Length(128,true), Default(Some()) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column isFlag3 DBType(bit), Default(Some(false)) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3", O.Default(Some(false)))
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column isSuspend DBType(bit), Default(Some(false)) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend", O.Default(Some(false)))
    /** Database column cdBank DBType(nvarchar), Length(60,true), Default(Some()) */
    val cdbank: Column[Option[String]] = column[Option[String]]("cdBank", O.Length(60,varying=true), O.Default(Some("")))
    /** Database column cdBranch DBType(nvarchar), Length(60,true), Default(Some()) */
    val cdbranch: Column[Option[String]] = column[Option[String]]("cdBranch", O.Length(60,varying=true), O.Default(Some("")))
    /** Database column szAccountNo DBType(nvarchar), Length(30,true), Default(Some()) */
    val szaccountno: Column[Option[String]] = column[Option[String]]("szAccountNo", O.Length(30,varying=true), O.Default(Some("")))
    /** Database column szHolder DBType(nvarchar), Length(120,true), Default(Some()) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=true), O.Default(Some("")))
    /** Database column szBank DBType(nvarchar), Length(128,true), Default(Some()) */
    val szbank: Column[Option[String]] = column[Option[String]]("szBank", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column cdPID DBType(varchar), Length(20,true), Default(Some()) */
    val cdpid: Column[Option[String]] = column[Option[String]]("cdPID", O.Length(20,varying=true), O.Default(Some("")))
    /** Database column iCumPvDSD DBType(int), Default(Some(0)) */
    val icumpvdsd: Column[Option[Int]] = column[Option[Int]]("iCumPvDSD", O.Default(Some(0)))
    /** Database column iCumUpPvDSD DBType(int), Default(Some(0)) */
    val icumuppvdsd: Column[Option[Int]] = column[Option[Int]]("iCumUpPvDSD", O.Default(Some(0)))
    
    /** Primary key of Tblmemberhis (database name PK_tblMemberHis) */
    val pk = primaryKey("PK_tblMemberHis", szdatayear :: szdatamonth :: cdmember :: HNil)
  }
  /** Collection-like TableQuery object for table Tblmemberhis */
  lazy val Tblmemberhis = new TableQuery(tag => new Tblmemberhis(tag))
  
  /** Entity class storing rows of table Tblmemberhis200707
   *  @param cdmember Database column cdmember DBType(char), Length(10,false)
   *  @param szfulladdr Database column szfulladdr DBType(nvarchar), Length(256,true) */
  case class Tblmemberhis200707Row(cdmember: String, szfulladdr: Option[String])
  /** GetResult implicit for fetching Tblmemberhis200707Row objects using plain SQL queries */
  implicit def GetResultTblmemberhis200707Row(implicit e0: GR[String], e1: GR[Option[String]]): GR[Tblmemberhis200707Row] = GR{
    prs => import prs._
    Tblmemberhis200707Row.tupled((<<[String], <<?[String]))
  }
  /** Table description of table tblMemberhis200707. Objects of this class serve as prototypes for rows in queries. */
  class Tblmemberhis200707(_tableTag: Tag) extends Table[Tblmemberhis200707Row](_tableTag, Some("dbo"), "tblMemberhis200707") {
    def * = (cdmember, szfulladdr) <> (Tblmemberhis200707Row.tupled, Tblmemberhis200707Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdmember.?, szfulladdr).shaped.<>({r=>import r._; _1.map(_=> Tblmemberhis200707Row.tupled((_1.get, _2)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdmember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdmember", O.Length(10,varying=false))
    /** Database column szfulladdr DBType(nvarchar), Length(256,true) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szfulladdr", O.Length(256,varying=true))
  }
  /** Collection-like TableQuery object for table Tblmemberhis200707 */
  lazy val Tblmemberhis200707 = new TableQuery(tag => new Tblmemberhis200707(tag))
  
  /** Row type of table Tblmemberhis20110110 */
  type Tblmemberhis20110110Row = HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Long],HCons[Option[Long],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblmemberhis20110110Row providing default values if available in the database schema. */
  def Tblmemberhis20110110Row(szdatayear: String, szdatamonth: String, cdmember: String, cdpersa: Option[String], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], cdmemkind: Option[String], cdcid: Option[String], cdid: Option[String], dtcreate: Option[java.sql.Timestamp], cdsrvmember: Option[String], icumpv: Option[Long], icumuppv: Option[Long], idstatus: Option[String], szfullname: Option[String], cdpersg: Option[String], cdsponser: Option[String], cdzip: Option[String], szfulladdr: Option[String], uid: Option[String], cdpergp: Option[String], szdetail: Option[String], szmobile: Option[String], isflag3: Option[Boolean], cdpaymethod: Option[String], issuspend: Option[Boolean], cdbank: Option[String], cdbranch: Option[String], szaccountno: Option[String], szholder: Option[String], szbank: Option[String], cdpid: Option[String], icumpvdsd: Option[Int], icumuppvdsd: Option[Int]): Tblmemberhis20110110Row = {
    szdatayear :: szdatamonth :: cdmember :: cdpersa :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: dtcreate :: cdsrvmember :: icumpv :: icumuppv :: idstatus :: szfullname :: cdpersg :: cdsponser :: cdzip :: szfulladdr :: uid :: cdpergp :: szdetail :: szmobile :: isflag3 :: cdpaymethod :: issuspend :: cdbank :: cdbranch :: szaccountno :: szholder :: szbank :: cdpid :: icumpvdsd :: icumuppvdsd :: HNil
  }
  /** GetResult implicit for fetching Tblmemberhis20110110Row objects using plain SQL queries */
  implicit def GetResultTblmemberhis20110110Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Long]], e4: GR[Option[Boolean]], e5: GR[Option[Int]]): GR[Tblmemberhis20110110Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Long] :: <<?[Long] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: HNil
  }
  /** Table description of table tblmemberhis_20110110. Objects of this class serve as prototypes for rows in queries. */
  class Tblmemberhis20110110(_tableTag: Tag) extends Table[Tblmemberhis20110110Row](_tableTag, Some("dbo"), "tblmemberhis_20110110") {
    def * = szdatayear :: szdatamonth :: cdmember :: cdpersa :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: dtcreate :: cdsrvmember :: icumpv :: icumuppv :: idstatus :: szfullname :: cdpersg :: cdsponser :: cdzip :: szfulladdr :: uid :: cdpergp :: szdetail :: szmobile :: isflag3 :: cdpaymethod :: issuspend :: cdbank :: cdbranch :: szaccountno :: szholder :: szbank :: cdpid :: icumpvdsd :: icumuppvdsd :: HNil
    
    /** Database column szDataYear DBType(char), Length(4,false) */
    val szdatayear: Column[String] = column[String]("szDataYear", O.Length(4,varying=false))
    /** Database column szDataMonth DBType(char), Length(2,false) */
    val szdatamonth: Column[String] = column[String]("szDataMonth", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[Option[String]] = column[Option[String]]("cdPerSa", O.Length(4,varying=false))
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column cdSrvMember DBType(char), Length(10,false) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false))
    /** Database column iCumPv DBType(bigint) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv")
    /** Database column iCumUpPv DBType(bigint) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv")
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false))
    /** Database column szFullName DBType(nvarchar), Length(120,true) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[Option[String]] = column[Option[String]]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szFullAddr DBType(nvarchar), Length(256,true) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(256,varying=true))
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[Option[String]] = column[Option[String]]("cdPerGp", O.Length(2,varying=false))
    /** Database column szDetail DBType(nvarchar), Length(128,true) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=true))
    /** Database column szMobile DBType(nvarchar), Length(128,true) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=true))
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column isSuspend DBType(bit) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend")
    /** Database column cdBank DBType(nvarchar), Length(60,true) */
    val cdbank: Column[Option[String]] = column[Option[String]]("cdBank", O.Length(60,varying=true))
    /** Database column cdBranch DBType(nvarchar), Length(60,true) */
    val cdbranch: Column[Option[String]] = column[Option[String]]("cdBranch", O.Length(60,varying=true))
    /** Database column szAccountNo DBType(nvarchar), Length(30,true) */
    val szaccountno: Column[Option[String]] = column[Option[String]]("szAccountNo", O.Length(30,varying=true))
    /** Database column szHolder DBType(nvarchar), Length(120,true) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=true))
    /** Database column szBank DBType(nvarchar), Length(128,true) */
    val szbank: Column[Option[String]] = column[Option[String]]("szBank", O.Length(128,varying=true))
    /** Database column cdPID DBType(varchar), Length(20,true) */
    val cdpid: Column[Option[String]] = column[Option[String]]("cdPID", O.Length(20,varying=true))
    /** Database column iCumPvDSD DBType(int) */
    val icumpvdsd: Column[Option[Int]] = column[Option[Int]]("iCumPvDSD")
    /** Database column iCumUpPvDSD DBType(int) */
    val icumuppvdsd: Column[Option[Int]] = column[Option[Int]]("iCumUpPvDSD")
  }
  /** Collection-like TableQuery object for table Tblmemberhis20110110 */
  lazy val Tblmemberhis20110110 = new TableQuery(tag => new Tblmemberhis20110110(tag))
  
  /** Row type of table TblmemberhisBak */
  type TblmemberhisBakRow = HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Long],HCons[Option[Long],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblmemberhisBakRow providing default values if available in the database schema. */
  def TblmemberhisBakRow(szdatayear: String, szdatamonth: String, cdmember: String, cdpersa: Option[String], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], cdmemkind: Option[String], cdcid: Option[String], cdid: Option[String], dtcreate: Option[java.sql.Timestamp], cdsrvmember: Option[String], icumpv: Option[Long], icumuppv: Option[Long], idstatus: Option[String], szfullname: Option[String], cdpersg: Option[String], cdsponser: Option[String], cdzip: Option[String], szfulladdr: Option[String], uid: Option[String], cdpergp: Option[String], szdetail: Option[String], szmobile: Option[String], isflag3: Option[Boolean], cdpaymethod: Option[String], issuspend: Option[Boolean], cdbank: Option[String], cdbranch: Option[String], szaccountno: Option[String], szholder: Option[String], szbank: Option[String]): TblmemberhisBakRow = {
    szdatayear :: szdatamonth :: cdmember :: cdpersa :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: dtcreate :: cdsrvmember :: icumpv :: icumuppv :: idstatus :: szfullname :: cdpersg :: cdsponser :: cdzip :: szfulladdr :: uid :: cdpergp :: szdetail :: szmobile :: isflag3 :: cdpaymethod :: issuspend :: cdbank :: cdbranch :: szaccountno :: szholder :: szbank :: HNil
  }
  /** GetResult implicit for fetching TblmemberhisBakRow objects using plain SQL queries */
  implicit def GetResultTblmemberhisBakRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Long]], e4: GR[Option[Boolean]]): GR[TblmemberhisBakRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Long] :: <<?[Long] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblMemberHis_bak. Objects of this class serve as prototypes for rows in queries. */
  class TblmemberhisBak(_tableTag: Tag) extends Table[TblmemberhisBakRow](_tableTag, Some("dbo"), "tblMemberHis_bak") {
    def * = szdatayear :: szdatamonth :: cdmember :: cdpersa :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: dtcreate :: cdsrvmember :: icumpv :: icumuppv :: idstatus :: szfullname :: cdpersg :: cdsponser :: cdzip :: szfulladdr :: uid :: cdpergp :: szdetail :: szmobile :: isflag3 :: cdpaymethod :: issuspend :: cdbank :: cdbranch :: szaccountno :: szholder :: szbank :: HNil
    
    /** Database column szDataYear DBType(char), Length(4,false) */
    val szdatayear: Column[String] = column[String]("szDataYear", O.Length(4,varying=false))
    /** Database column szDataMonth DBType(char), Length(2,false) */
    val szdatamonth: Column[String] = column[String]("szDataMonth", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[Option[String]] = column[Option[String]]("cdPerSa", O.Length(4,varying=false))
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column cdSrvMember DBType(char), Length(10,false) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false))
    /** Database column iCumPv DBType(bigint) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv")
    /** Database column iCumUpPv DBType(bigint) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv")
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false))
    /** Database column szFullName DBType(nvarchar), Length(120,true) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[Option[String]] = column[Option[String]]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szFullAddr DBType(nvarchar), Length(256,true) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(256,varying=true))
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[Option[String]] = column[Option[String]]("cdPerGp", O.Length(2,varying=false))
    /** Database column szDetail DBType(nvarchar), Length(128,true) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=true))
    /** Database column szMobile DBType(nvarchar), Length(128,true) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=true))
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column isSuspend DBType(bit) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend")
    /** Database column cdBank DBType(nvarchar), Length(60,true) */
    val cdbank: Column[Option[String]] = column[Option[String]]("cdBank", O.Length(60,varying=true))
    /** Database column cdBranch DBType(nvarchar), Length(60,true) */
    val cdbranch: Column[Option[String]] = column[Option[String]]("cdBranch", O.Length(60,varying=true))
    /** Database column szAccountNo DBType(nvarchar), Length(30,true) */
    val szaccountno: Column[Option[String]] = column[Option[String]]("szAccountNo", O.Length(30,varying=true))
    /** Database column szHolder DBType(nvarchar), Length(120,true) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=true))
    /** Database column szBank DBType(nvarchar), Length(128,true) */
    val szbank: Column[Option[String]] = column[Option[String]]("szBank", O.Length(128,varying=true))
  }
  /** Collection-like TableQuery object for table TblmemberhisBak */
  lazy val TblmemberhisBak = new TableQuery(tag => new TblmemberhisBak(tag))
  
  /** Entity class storing rows of table Tblmembertrx
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param cdkey Database column cdKey DBType(char), Length(50,false)
   *  @param szvalue Database column szValue DBType(char), Length(256,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
  case class TblmembertrxRow(uid: String, cdmember: String, dtstrdate: java.sql.Timestamp, cdkey: Option[String], szvalue: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String])
  /** GetResult implicit for fetching TblmembertrxRow objects using plain SQL queries */
  implicit def GetResultTblmembertrxRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblmembertrxRow] = GR{
    prs => import prs._
    TblmembertrxRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblMemberTRX. Objects of this class serve as prototypes for rows in queries. */
  class Tblmembertrx(_tableTag: Tag) extends Table[TblmembertrxRow](_tableTag, Some("dbo"), "tblMemberTRX") {
    def * = (uid, cdmember, dtstrdate, cdkey, szvalue, uidcreator, dtcreate, uidmodifier) <> (TblmembertrxRow.tupled, TblmembertrxRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember.?, dtstrdate.?, cdkey, szvalue, uidcreator, dtcreate, uidmodifier).shaped.<>({r=>import r._; _1.map(_=> TblmembertrxRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column cdKey DBType(char), Length(50,false) */
    val cdkey: Column[Option[String]] = column[Option[String]]("cdKey", O.Length(50,varying=false))
    /** Database column szValue DBType(char), Length(256,false) */
    val szvalue: Column[Option[String]] = column[Option[String]]("szValue", O.Length(256,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
  }
  /** Collection-like TableQuery object for table Tblmembertrx */
  lazy val Tblmembertrx = new TableQuery(tag => new Tblmembertrx(tag))
  
  /** Entity class storing rows of table Tblmemcard
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdpergp Database column cdPerGp DBType(char), Length(10,false)
   *  @param iprint Database column iPrint DBType(int)
   *  @param dtprint Database column dtPrint DBType(datetime)
   *  @param iprint2 Database column iPrint2 DBType(int), Default(Some(0))
   *  @param dtprint2 Database column dtPrint2 DBType(datetime)
   *  @param sztext3 Database column szText3 DBType(char), Length(20,false)
   *  @param sztext4 Database column szText4 DBType(char), Length(20,false)
   *  @param sztext5 Database column szText5 DBType(char), Length(20,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblmemcardRow(uid: String, cdmember: String, cdpergp: String, iprint: Option[Int], dtprint: Option[java.sql.Timestamp], iprint2: Option[Int] = Some(0), dtprint2: Option[java.sql.Timestamp], sztext3: Option[String], sztext4: Option[String], sztext5: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblmemcardRow objects using plain SQL queries */
  implicit def GetResultTblmemcardRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[String]], e4: GR[Option[java.sql.Blob]]): GR[TblmemcardRow] = GR{
    prs => import prs._
    TblmemcardRow.tupled((<<[String], <<[String], <<[String], <<?[Int], <<?[java.sql.Timestamp], <<?[Int], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblMemCard. Objects of this class serve as prototypes for rows in queries. */
  class Tblmemcard(_tableTag: Tag) extends Table[TblmemcardRow](_tableTag, Some("dbo"), "tblMemCard") {
    def * = (uid, cdmember, cdpergp, iprint, dtprint, iprint2, dtprint2, sztext3, sztext4, sztext5, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblmemcardRow.tupled, TblmemcardRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember.?, cdpergp.?, iprint, dtprint, iprint2, dtprint2, sztext3, sztext4, sztext5, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblmemcardRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerGp DBType(char), Length(10,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(10,varying=false))
    /** Database column iPrint DBType(int) */
    val iprint: Column[Option[Int]] = column[Option[Int]]("iPrint")
    /** Database column dtPrint DBType(datetime) */
    val dtprint: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPrint")
    /** Database column iPrint2 DBType(int), Default(Some(0)) */
    val iprint2: Column[Option[Int]] = column[Option[Int]]("iPrint2", O.Default(Some(0)))
    /** Database column dtPrint2 DBType(datetime) */
    val dtprint2: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPrint2")
    /** Database column szText3 DBType(char), Length(20,false) */
    val sztext3: Column[Option[String]] = column[Option[String]]("szText3", O.Length(20,varying=false))
    /** Database column szText4 DBType(char), Length(20,false) */
    val sztext4: Column[Option[String]] = column[Option[String]]("szText4", O.Length(20,varying=false))
    /** Database column szText5 DBType(char), Length(20,false) */
    val sztext5: Column[Option[String]] = column[Option[String]]("szText5", O.Length(20,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblmemcard (database name PK_tblMemCard) */
    val pk = primaryKey("PK_tblMemCard", (cdmember, cdpergp))
  }
  /** Collection-like TableQuery object for table Tblmemcard */
  lazy val Tblmemcard = new TableQuery(tag => new Tblmemcard(tag))
  
  /** Entity class storing rows of table Tblmemmove
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param cdcenterfrom Database column cdCenterFrom DBType(char), Length(10,false)
   *  @param cdcenterto Database column cdCenterTo DBType(char), Length(10,false)
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false), Default(Some(0))
   *  @param dtimport Database column dtImport DBType(datetime)
   *  @param szremark Database column szRemark DBType(nvarchar), Length(200,true), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byts DBType(timestamp)
   *  @param cdtype Database column cdType DBType(varchar), Length(20,true), Default(Some()) */
  case class TblmemmoveRow(uid: String, cdmember: String, cdcenterfrom: Option[String], cdcenterto: Option[String], isinvalid: Option[Boolean] = Some(false), cdstatus: Option[String] = Some("0"), dtimport: Option[java.sql.Timestamp], szremark: Option[String] = Some(""), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdtype: Option[String] = Some(""))
  /** GetResult implicit for fetching TblmemmoveRow objects using plain SQL queries */
  implicit def GetResultTblmemmoveRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Boolean]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblmemmoveRow] = GR{
    prs => import prs._
    TblmemmoveRow.tupled((<<[String], <<[String], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String]))
  }
  /** Table description of table tblMemMove. Objects of this class serve as prototypes for rows in queries. */
  class Tblmemmove(_tableTag: Tag) extends Table[TblmemmoveRow](_tableTag, Some("dbo"), "tblMemMove") {
    def * = (uid, cdmember, cdcenterfrom, cdcenterto, isinvalid, cdstatus, dtimport, szremark, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdtype) <> (TblmemmoveRow.tupled, TblmemmoveRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember.?, cdcenterfrom, cdcenterto, isinvalid, cdstatus, dtimport, szremark, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdtype).shaped.<>({r=>import r._; _1.map(_=> TblmemmoveRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdCenterFrom DBType(char), Length(10,false) */
    val cdcenterfrom: Column[Option[String]] = column[Option[String]]("cdCenterFrom", O.Length(10,varying=false))
    /** Database column cdCenterTo DBType(char), Length(10,false) */
    val cdcenterto: Column[Option[String]] = column[Option[String]]("cdCenterTo", O.Length(10,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column cdStatus DBType(char), Length(1,false), Default(Some(0)) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column dtImport DBType(datetime) */
    val dtimport: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtImport")
    /** Database column szRemark DBType(nvarchar), Length(200,true), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(200,varying=true), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column cdType DBType(varchar), Length(20,true), Default(Some()) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(20,varying=true), O.Default(Some("")))
    
    /** Index over (cdmember,cdcenterfrom) (database name IX_tblMemMove) */
    val index1 = index("IX_tblMemMove", (cdmember, cdcenterfrom))
  }
  /** Collection-like TableQuery object for table Tblmemmove */
  lazy val Tblmemmove = new TableQuery(tag => new Tblmemmove(tag))
  
  /** Entity class storing rows of table Tblmemrelation
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmembera Database column cdMemberA DBType(char), Length(10,false)
   *  @param szfullnamea Database column szFullNameA DBType(char), Length(80,false)
   *  @param cdmemberb Database column cdMemberB DBType(char), Length(10,false)
   *  @param szfullnameb Database column szFullNameB DBType(char), Length(80,false)
   *  @param szmemo Database column szMemo DBType(char), Length(120,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblmemrelationRow(uid: String, cdmembera: String, szfullnamea: Option[String], cdmemberb: String, szfullnameb: Option[String], szmemo: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblmemrelationRow objects using plain SQL queries */
  implicit def GetResultTblmemrelationRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblmemrelationRow] = GR{
    prs => import prs._
    TblmemrelationRow.tupled((<<[String], <<[String], <<?[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblMemRelation. Objects of this class serve as prototypes for rows in queries. */
  class Tblmemrelation(_tableTag: Tag) extends Table[TblmemrelationRow](_tableTag, Some("dbo"), "tblMemRelation") {
    def * = (uid, cdmembera, szfullnamea, cdmemberb, szfullnameb, szmemo, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblmemrelationRow.tupled, TblmemrelationRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmembera.?, szfullnamea, cdmemberb.?, szfullnameb, szmemo, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblmemrelationRow.tupled((_1.get, _2.get, _3, _4.get, _5, _6, _7, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMemberA DBType(char), Length(10,false) */
    val cdmembera: Column[String] = column[String]("cdMemberA", O.Length(10,varying=false))
    /** Database column szFullNameA DBType(char), Length(80,false) */
    val szfullnamea: Column[Option[String]] = column[Option[String]]("szFullNameA", O.Length(80,varying=false))
    /** Database column cdMemberB DBType(char), Length(10,false) */
    val cdmemberb: Column[String] = column[String]("cdMemberB", O.Length(10,varying=false))
    /** Database column szFullNameB DBType(char), Length(80,false) */
    val szfullnameb: Column[Option[String]] = column[Option[String]]("szFullNameB", O.Length(80,varying=false))
    /** Database column szMemo DBType(char), Length(120,false) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(120,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblmemrelation (database name PK_tblMemRelation) */
    val pk = primaryKey("PK_tblMemRelation", (cdmembera, cdmemberb))
  }
  /** Collection-like TableQuery object for table Tblmemrelation */
  lazy val Tblmemrelation = new TableQuery(tag => new Tblmemrelation(tag))
  
  /** Entity class storing rows of table Tblmessage
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param cdprogram Database column cdProgram DBType(char), Length(20,false), Default()
   *  @param cdcode Database column cdCode DBType(char), Length(10,false)
   *  @param idicon Database column idIcon DBType(smallint), Default(Some(16))
   *  @param idbtntype Database column idBtnType DBType(smallint), Default(Some(0))
   *  @param idbtndef Database column idBtnDef DBType(smallint), Default(Some(0))
   *  @param sztitle Database column szTitle DBType(nvarchar), Length(50,true), Default(Some())
   *  @param szmessage Database column szMessage DBType(nvarchar), Length(256,true), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblmessageRow(uid: String, cdlanguage: String = "zh-CHT", cdprogram: String = "", cdcode: String, idicon: Option[Short] = Some(16), idbtntype: Option[Short] = Some(0), idbtndef: Option[Short] = Some(0), sztitle: Option[String] = Some(""), szmessage: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblmessageRow objects using plain SQL queries */
  implicit def GetResultTblmessageRow(implicit e0: GR[String], e1: GR[Option[Short]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblmessageRow] = GR{
    prs => import prs._
    TblmessageRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[Short], <<?[Short], <<?[Short], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblMessage. Objects of this class serve as prototypes for rows in queries. */
  class Tblmessage(_tableTag: Tag) extends Table[TblmessageRow](_tableTag, Some("dbo"), "tblMessage") {
    def * = (uid, cdlanguage, cdprogram, cdcode, idicon, idbtntype, idbtndef, sztitle, szmessage, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblmessageRow.tupled, TblmessageRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdlanguage.?, cdprogram.?, cdcode.?, idicon, idbtntype, idbtndef, sztitle, szmessage, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblmessageRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column cdProgram DBType(char), Length(20,false), Default() */
    val cdprogram: Column[String] = column[String]("cdProgram", O.Length(20,varying=false), O.Default(""))
    /** Database column cdCode DBType(char), Length(10,false) */
    val cdcode: Column[String] = column[String]("cdCode", O.Length(10,varying=false))
    /** Database column idIcon DBType(smallint), Default(Some(16)) */
    val idicon: Column[Option[Short]] = column[Option[Short]]("idIcon", O.Default(Some(16)))
    /** Database column idBtnType DBType(smallint), Default(Some(0)) */
    val idbtntype: Column[Option[Short]] = column[Option[Short]]("idBtnType", O.Default(Some(0)))
    /** Database column idBtnDef DBType(smallint), Default(Some(0)) */
    val idbtndef: Column[Option[Short]] = column[Option[Short]]("idBtnDef", O.Default(Some(0)))
    /** Database column szTitle DBType(nvarchar), Length(50,true), Default(Some()) */
    val sztitle: Column[Option[String]] = column[Option[String]]("szTitle", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column szMessage DBType(nvarchar), Length(256,true), Default(Some()) */
    val szmessage: Column[Option[String]] = column[Option[String]]("szMessage", O.Length(256,varying=true), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblmessage (database name PK_tblMessage) */
    val pk = primaryKey("PK_tblMessage", (cdlanguage, cdprogram, cdcode))
  }
  /** Collection-like TableQuery object for table Tblmessage */
  lazy val Tblmessage = new TableQuery(tag => new Tblmessage(tag))
  
  /** Entity class storing rows of table Tblmonthbank
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(10,false)
   *  @param cdyear Database column cdYear DBType(char), Length(4,false)
   *  @param cdmonth Database column cdMonth DBType(char), Length(2,false)
   *  @param dtpaydate Database column dtPaydate DBType(datetime)
   *  @param iseq Database column iSeq DBType(int identity), AutoInc
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param dtworkdate Database column dtWorkDate DBType(datetime)
   *  @param dtworkdate2 Database column dtWorkDate2 DBType(datetime)
   *  @param famount Database column fAmount DBType(float)
   *  @param irecordcount Database column iRecordCount DBType(int)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(50,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblmonthbankRow(uid: String, cdcenter: String, cdyear: String, cdmonth: String, dtpaydate: java.sql.Timestamp, iseq: Int, iserialno: Option[Int], dtworkdate: Option[java.sql.Timestamp], dtworkdate2: Option[java.sql.Timestamp], famount: Option[Double], irecordcount: Option[Int], cdstatus: Option[String], szremark: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblmonthbankRow objects using plain SQL queries */
  implicit def GetResultTblmonthbankRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Int], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[Double]], e6: GR[Option[String]]): GR[TblmonthbankRow] = GR{
    prs => import prs._
    TblmonthbankRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[java.sql.Timestamp], <<[Int], <<?[Int], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[Double], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblMonthBank. Objects of this class serve as prototypes for rows in queries. */
  class Tblmonthbank(_tableTag: Tag) extends Table[TblmonthbankRow](_tableTag, Some("dbo"), "tblMonthBank") {
    def * = (uid, cdcenter, cdyear, cdmonth, dtpaydate, iseq, iserialno, dtworkdate, dtworkdate2, famount, irecordcount, cdstatus, szremark, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblmonthbankRow.tupled, TblmonthbankRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdyear.?, cdmonth.?, dtpaydate.?, iseq.?, iserialno, dtworkdate, dtworkdate2, famount, irecordcount, cdstatus, szremark, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblmonthbankRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(10,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(10,varying=false))
    /** Database column cdYear DBType(char), Length(4,false) */
    val cdyear: Column[String] = column[String]("cdYear", O.Length(4,varying=false))
    /** Database column cdMonth DBType(char), Length(2,false) */
    val cdmonth: Column[String] = column[String]("cdMonth", O.Length(2,varying=false))
    /** Database column dtPaydate DBType(datetime) */
    val dtpaydate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtPaydate")
    /** Database column iSeq DBType(int identity), AutoInc */
    val iseq: Column[Int] = column[Int]("iSeq", O.AutoInc)
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Option[Int]] = column[Option[Int]]("iSerialNo")
    /** Database column dtWorkDate DBType(datetime) */
    val dtworkdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtWorkDate")
    /** Database column dtWorkDate2 DBType(datetime) */
    val dtworkdate2: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtWorkDate2")
    /** Database column fAmount DBType(float) */
    val famount: Column[Option[Double]] = column[Option[Double]]("fAmount")
    /** Database column iRecordCount DBType(int) */
    val irecordcount: Column[Option[Int]] = column[Option[Int]]("iRecordCount")
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column szRemark DBType(nchar), Length(50,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(50,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblmonthbank */
  lazy val Tblmonthbank = new TableQuery(tag => new Tblmonthbank(tag))
  
  /** Row type of table Tblmonthbankd */
  type TblmonthbankdRow = HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblmonthbankdRow providing default values if available in the database schema. */
  def TblmonthbankdRow(uid: String, cdcenter: String, iseq: Int, iserialno: Int, cdyear: String, cdmonth: String, dtpaydate: java.sql.Timestamp, cdmember: String, dtworkdate: Option[java.sql.Timestamp], cdbank: Option[String], cdbranch: Option[String], szaccountno: Option[String], szholder: Option[String], famount: Option[Double], cdstatus: Option[String], szmemo: Option[String], cdid: Option[String], sztext2: Option[String], sztext3: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): TblmonthbankdRow = {
    uid :: cdcenter :: iseq :: iserialno :: cdyear :: cdmonth :: dtpaydate :: cdmember :: dtworkdate :: cdbank :: cdbranch :: szaccountno :: szholder :: famount :: cdstatus :: szmemo :: cdid :: sztext2 :: sztext3 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching TblmonthbankdRow objects using plain SQL queries */
  implicit def GetResultTblmonthbankdRow(implicit e0: GR[String], e1: GR[Int], e2: GR[java.sql.Timestamp], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[String]], e5: GR[Option[Double]]): GR[TblmonthbankdRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblMonthBankD. Objects of this class serve as prototypes for rows in queries. */
  class Tblmonthbankd(_tableTag: Tag) extends Table[TblmonthbankdRow](_tableTag, Some("dbo"), "tblMonthBankD") {
    def * = uid :: cdcenter :: iseq :: iserialno :: cdyear :: cdmonth :: dtpaydate :: cdmember :: dtworkdate :: cdbank :: cdbranch :: szaccountno :: szholder :: famount :: cdstatus :: szmemo :: cdid :: sztext2 :: sztext3 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(10,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(10,varying=false))
    /** Database column iSeq DBType(int identity), AutoInc */
    val iseq: Column[Int] = column[Int]("iSeq", O.AutoInc)
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column cdYear DBType(char), Length(4,false) */
    val cdyear: Column[String] = column[String]("cdYear", O.Length(4,varying=false))
    /** Database column cdMonth DBType(char), Length(2,false) */
    val cdmonth: Column[String] = column[String]("cdMonth", O.Length(2,varying=false))
    /** Database column dtPaydate DBType(datetime) */
    val dtpaydate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtPaydate")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column dtWorkDate DBType(datetime) */
    val dtworkdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtWorkDate")
    /** Database column cdBank DBType(char), Length(60,false) */
    val cdbank: Column[Option[String]] = column[Option[String]]("cdBank", O.Length(60,varying=false))
    /** Database column cdBranch DBType(char), Length(60,false) */
    val cdbranch: Column[Option[String]] = column[Option[String]]("cdBranch", O.Length(60,varying=false))
    /** Database column szAccountNo DBType(char), Length(30,false) */
    val szaccountno: Column[Option[String]] = column[Option[String]]("szAccountNo", O.Length(30,varying=false))
    /** Database column szHolder DBType(nchar), Length(120,false) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=false))
    /** Database column fAmount DBType(float) */
    val famount: Column[Option[Double]] = column[Option[Double]]("fAmount")
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column szMemo DBType(nchar), Length(128,false) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(128,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column szText2 DBType(char), Length(10,false) */
    val sztext2: Column[Option[String]] = column[Option[String]]("szText2", O.Length(10,varying=false))
    /** Database column szText3 DBType(char), Length(10,false) */
    val sztext3: Column[Option[String]] = column[Option[String]]("szText3", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblmonthbankd */
  lazy val Tblmonthbankd = new TableQuery(tag => new Tblmonthbankd(tag))
  
  /** Entity class storing rows of table Tblmonthlyfunds
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdkind Database column cdKind DBType(char), Length(1,false), Default()
   *  @param cdcenter Database column cdCenter DBType(char), Length(10,false), Default()
   *  @param cdyear Database column cdYear DBType(char), Length(4,false), Default()
   *  @param cdmonth Database column cdMonth DBType(char), Length(2,false), Default()
   *  @param cdaccounttype Database column cdAccountType DBType(char), Length(1,false), Default()
   *  @param iseq Database column iSeq DBType(int identity), AutoInc
   *  @param iserialno Database column iSerialNo DBType(int), Default(Some(0))
   *  @param dtworkdate Database column dtWorkDate DBType(datetime)
   *  @param dtworkdate2 Database column dtWorkDate2 DBType(datetime)
   *  @param famount Database column fAmount DBType(float), Default(Some(0.0))
   *  @param irecordcount Database column iRecordCount DBType(int), Default(Some(0))
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false), Default(Some(0))
   *  @param szremark Database column szRemark DBType(nchar), Length(50,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param cdtime Database column cdTime DBType(char), Length(10,false) */
  case class TblmonthlyfundsRow(uid: Option[String], cdkind: String = "", cdcenter: String = "", cdyear: String = "", cdmonth: String = "", cdaccounttype: String = "", iseq: Int, iserialno: Option[Int] = Some(0), dtworkdate: Option[java.sql.Timestamp], dtworkdate2: Option[java.sql.Timestamp], famount: Option[Double] = Some(0.0), irecordcount: Option[Int] = Some(0), cdstatus: Option[String] = Some("0"), szremark: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], cdtime: Option[String])
  /** GetResult implicit for fetching TblmonthlyfundsRow objects using plain SQL queries */
  implicit def GetResultTblmonthlyfundsRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Int], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[Double]]): GR[TblmonthlyfundsRow] = GR{
    prs => import prs._
    TblmonthlyfundsRow.tupled((<<?[String], <<[String], <<[String], <<[String], <<[String], <<[String], <<[Int], <<?[Int], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[Double], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblMonthlyFunds. Objects of this class serve as prototypes for rows in queries. */
  class Tblmonthlyfunds(_tableTag: Tag) extends Table[TblmonthlyfundsRow](_tableTag, Some("dbo"), "tblMonthlyFunds") {
    def * = (uid, cdkind, cdcenter, cdyear, cdmonth, cdaccounttype, iseq, iserialno, dtworkdate, dtworkdate2, famount, irecordcount, cdstatus, szremark, uidcreator, dtcreate, uidmodifier, dtmodify, cdtime) <> (TblmonthlyfundsRow.tupled, TblmonthlyfundsRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdkind.?, cdcenter.?, cdyear.?, cdmonth.?, cdaccounttype.?, iseq.?, iserialno, dtworkdate, dtworkdate2, famount, irecordcount, cdstatus, szremark, uidcreator, dtcreate, uidmodifier, dtmodify, cdtime).shaped.<>({r=>import r._; _2.map(_=> TblmonthlyfundsRow.tupled((_1, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdKind DBType(char), Length(1,false), Default() */
    val cdkind: Column[String] = column[String]("cdKind", O.Length(1,varying=false), O.Default(""))
    /** Database column cdCenter DBType(char), Length(10,false), Default() */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(10,varying=false), O.Default(""))
    /** Database column cdYear DBType(char), Length(4,false), Default() */
    val cdyear: Column[String] = column[String]("cdYear", O.Length(4,varying=false), O.Default(""))
    /** Database column cdMonth DBType(char), Length(2,false), Default() */
    val cdmonth: Column[String] = column[String]("cdMonth", O.Length(2,varying=false), O.Default(""))
    /** Database column cdAccountType DBType(char), Length(1,false), Default() */
    val cdaccounttype: Column[String] = column[String]("cdAccountType", O.Length(1,varying=false), O.Default(""))
    /** Database column iSeq DBType(int identity), AutoInc */
    val iseq: Column[Int] = column[Int]("iSeq", O.AutoInc)
    /** Database column iSerialNo DBType(int), Default(Some(0)) */
    val iserialno: Column[Option[Int]] = column[Option[Int]]("iSerialNo", O.Default(Some(0)))
    /** Database column dtWorkDate DBType(datetime) */
    val dtworkdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtWorkDate")
    /** Database column dtWorkDate2 DBType(datetime) */
    val dtworkdate2: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtWorkDate2")
    /** Database column fAmount DBType(float), Default(Some(0.0)) */
    val famount: Column[Option[Double]] = column[Option[Double]]("fAmount", O.Default(Some(0.0)))
    /** Database column iRecordCount DBType(int), Default(Some(0)) */
    val irecordcount: Column[Option[Int]] = column[Option[Int]]("iRecordCount", O.Default(Some(0)))
    /** Database column cdStatus DBType(char), Length(1,false), Default(Some(0)) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column szRemark DBType(nchar), Length(50,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(50,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdTime DBType(char), Length(10,false) */
    val cdtime: Column[Option[String]] = column[Option[String]]("cdTime", O.Length(10,varying=false))
    
    /** Primary key of Tblmonthlyfunds (database name PK_tblMonthlyFunds) */
    val pk = primaryKey("PK_tblMonthlyFunds", (cdkind, cdcenter, cdyear, cdmonth, cdaccounttype, iseq))
  }
  /** Collection-like TableQuery object for table Tblmonthlyfunds */
  lazy val Tblmonthlyfunds = new TableQuery(tag => new Tblmonthlyfunds(tag))
  
  /** Row type of table Tblmonthlyfundsd */
  type TblmonthlyfundsdRow = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[String,HCons[String,HCons[Int,HCons[String,HCons[Int,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblmonthlyfundsdRow providing default values if available in the database schema. */
  def TblmonthlyfundsdRow(uid: String, cdkind: String = "", cdcenter: String, iseq: Int, cdyear: String, cdmonth: String, iserialno: Int, cdmember: String, icardno: Int, cdaccounttype: Option[String], dtworkdate: Option[java.sql.Timestamp], dtworkdate2: Option[java.sql.Timestamp], cdbank: Option[String], cdbranch: Option[String], cdaccount: Option[String], cdid: Option[String], cdtype: Option[String], famount: Option[Double], szdatano: Option[String] = Some(""), szreserve: Option[String] = Some(""), cdstatus: Option[String] = Some(""), cdexpirationdate: Option[String], cdresponse: Option[String] = Some("-"), cdapproval: Option[String], szapplyname: Option[String] = Some(""), szreceiver: Option[String] = Some(""), sztel: Option[String] = Some(""), cdreceivetime: Option[String] = Some(""), cdprodcombination: Option[String] = Some(""), cdflag1: Option[String] = Some(""), cdflag2: Option[String] = Some(""), cdflag3: Option[String] = Some(""), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], cdorderno: Option[String], cdinvoiceno: Option[String], cdtime: Option[String]): TblmonthlyfundsdRow = {
    uid :: cdkind :: cdcenter :: iseq :: cdyear :: cdmonth :: iserialno :: cdmember :: icardno :: cdaccounttype :: dtworkdate :: dtworkdate2 :: cdbank :: cdbranch :: cdaccount :: cdid :: cdtype :: famount :: szdatano :: szreserve :: cdstatus :: cdexpirationdate :: cdresponse :: cdapproval :: szapplyname :: szreceiver :: sztel :: cdreceivetime :: cdprodcombination :: cdflag1 :: cdflag2 :: cdflag3 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: cdorderno :: cdinvoiceno :: cdtime :: HNil
  }
  /** GetResult implicit for fetching TblmonthlyfundsdRow objects using plain SQL queries */
  implicit def GetResultTblmonthlyfundsdRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Double]]): GR[TblmonthlyfundsdRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<[String] :: <<[String] :: <<[Int] :: <<[String] :: <<[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblMonthlyFundsD. Objects of this class serve as prototypes for rows in queries. */
  class Tblmonthlyfundsd(_tableTag: Tag) extends Table[TblmonthlyfundsdRow](_tableTag, Some("dbo"), "tblMonthlyFundsD") {
    def * = uid :: cdkind :: cdcenter :: iseq :: cdyear :: cdmonth :: iserialno :: cdmember :: icardno :: cdaccounttype :: dtworkdate :: dtworkdate2 :: cdbank :: cdbranch :: cdaccount :: cdid :: cdtype :: famount :: szdatano :: szreserve :: cdstatus :: cdexpirationdate :: cdresponse :: cdapproval :: szapplyname :: szreceiver :: sztel :: cdreceivetime :: cdprodcombination :: cdflag1 :: cdflag2 :: cdflag3 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: cdorderno :: cdinvoiceno :: cdtime :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdKind DBType(char), Length(1,false), Default() */
    val cdkind: Column[String] = column[String]("cdKind", O.Length(1,varying=false), O.Default(""))
    /** Database column cdCenter DBType(char), Length(10,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(10,varying=false))
    /** Database column iSeq DBType(int identity), AutoInc */
    val iseq: Column[Int] = column[Int]("iSeq", O.AutoInc)
    /** Database column cdYear DBType(char), Length(4,false) */
    val cdyear: Column[String] = column[String]("cdYear", O.Length(4,varying=false))
    /** Database column cdMonth DBType(char), Length(2,false) */
    val cdmonth: Column[String] = column[String]("cdMonth", O.Length(2,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column iCardNo DBType(int) */
    val icardno: Column[Int] = column[Int]("iCardNo")
    /** Database column cdAccountType DBType(char), Length(1,false) */
    val cdaccounttype: Column[Option[String]] = column[Option[String]]("cdAccountType", O.Length(1,varying=false))
    /** Database column dtWorkDate DBType(datetime) */
    val dtworkdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtWorkDate")
    /** Database column dtWorkDate2 DBType(datetime) */
    val dtworkdate2: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtWorkDate2")
    /** Database column cdBank DBType(char), Length(10,false) */
    val cdbank: Column[Option[String]] = column[Option[String]]("cdBank", O.Length(10,varying=false))
    /** Database column cdBranch DBType(char), Length(10,false) */
    val cdbranch: Column[Option[String]] = column[Option[String]]("cdBranch", O.Length(10,varying=false))
    /** Database column cdAccount DBType(char), Length(20,false) */
    val cdaccount: Column[Option[String]] = column[Option[String]]("cdAccount", O.Length(20,varying=false))
    /** Database column cdId DBType(char), Length(10,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(10,varying=false))
    /** Database column cdType DBType(char), Length(3,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(3,varying=false))
    /** Database column fAmount DBType(float) */
    val famount: Column[Option[Double]] = column[Option[Double]]("fAmount")
    /** Database column szDataNo DBType(char), Length(20,false), Default(Some()) */
    val szdatano: Column[Option[String]] = column[Option[String]]("szDataNo", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column szReserve DBType(char), Length(20,false), Default(Some()) */
    val szreserve: Column[Option[String]] = column[Option[String]]("szReserve", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column cdStatus DBType(char), Length(1,false), Default(Some()) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdExpirationDate DBType(char), Length(4,false) */
    val cdexpirationdate: Column[Option[String]] = column[Option[String]]("cdExpirationDate", O.Length(4,varying=false))
    /** Database column cdResponse DBType(char), Length(3,false), Default(Some(-)) */
    val cdresponse: Column[Option[String]] = column[Option[String]]("cdResponse", O.Length(3,varying=false), O.Default(Some("-")))
    /** Database column cdApproval DBType(char), Length(6,false) */
    val cdapproval: Column[Option[String]] = column[Option[String]]("cdApproval", O.Length(6,varying=false))
    /** Database column szApplyName DBType(nchar), Length(50,false), Default(Some()) */
    val szapplyname: Column[Option[String]] = column[Option[String]]("szApplyName", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szReceiver DBType(nchar), Length(50,false), Default(Some()) */
    val szreceiver: Column[Option[String]] = column[Option[String]]("szReceiver", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szTel DBType(char), Length(20,false), Default(Some()) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column cdReceiveTime DBType(char), Length(1,false), Default(Some()) */
    val cdreceivetime: Column[Option[String]] = column[Option[String]]("cdReceiveTime", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdProdCombination DBType(char), Length(10,false), Default(Some()) */
    val cdprodcombination: Column[Option[String]] = column[Option[String]]("cdProdCombination", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdFlag1 DBType(char), Length(1,false), Default(Some()) */
    val cdflag1: Column[Option[String]] = column[Option[String]]("cdFlag1", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdFlag2 DBType(char), Length(1,false), Default(Some()) */
    val cdflag2: Column[Option[String]] = column[Option[String]]("cdFlag2", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column cdFlag3 DBType(char), Length(1,false), Default(Some()) */
    val cdflag3: Column[Option[String]] = column[Option[String]]("cdFlag3", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdOrderNo DBType(char), Length(20,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(20,varying=false))
    /** Database column cdInvoiceNo DBType(char), Length(20,false) */
    val cdinvoiceno: Column[Option[String]] = column[Option[String]]("cdInvoiceNo", O.Length(20,varying=false))
    /** Database column cdTime DBType(char), Length(10,false) */
    val cdtime: Column[Option[String]] = column[Option[String]]("cdTime", O.Length(10,varying=false))
    
    /** Primary key of Tblmonthlyfundsd (database name PK_tblMonthlyFundsD) */
    val pk = primaryKey("PK_tblMonthlyFundsD", cdkind :: cdcenter :: cdyear :: cdmonth :: iserialno :: cdmember :: HNil)
  }
  /** Collection-like TableQuery object for table Tblmonthlyfundsd */
  lazy val Tblmonthlyfundsd = new TableQuery(tag => new Tblmonthlyfundsd(tag))
  
  /** Entity class storing rows of table Tblmsgcenter
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdmsgtype Database column cdMsgType DBType(char), Length(1,false)
   *  @param szcontent Database column szContent DBType(nchar), Length(512,false)
   *  @param dtdeadline Database column dtDeadline DBType(datetime)
   *  @param dtalarm Database column dtAlarm DBType(datetime)
   *  @param dtvalidend Database column dtValidEnd DBType(datetime)
   *  @param isprivate Database column isPrivate DBType(char), Length(10,false)
   *  @param cdtarget Database column cdTarget DBType(uniqueidentifier), Length(36,false)
   *  @param isattach Database column isAttach DBType(char), Length(10,false)
   *  @param szattachfile Database column szAttachFile DBType(char), Length(50,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param cdisdept Database column cdIsDept DBType(char), Length(1,false) */
  case class TblmsgcenterRow(uid: String, cdmsgtype: String, szcontent: Option[String], dtdeadline: Option[java.sql.Timestamp], dtalarm: Option[java.sql.Timestamp], dtvalidend: Option[java.sql.Timestamp], isprivate: Option[String], cdtarget: Option[String], isattach: Option[String], szattachfile: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], cdisdept: Option[String])
  /** GetResult implicit for fetching TblmsgcenterRow objects using plain SQL queries */
  implicit def GetResultTblmsgcenterRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblmsgcenterRow] = GR{
    prs => import prs._
    TblmsgcenterRow.tupled((<<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblMsgCenter. Objects of this class serve as prototypes for rows in queries. */
  class Tblmsgcenter(_tableTag: Tag) extends Table[TblmsgcenterRow](_tableTag, Some("dbo"), "tblMsgCenter") {
    def * = (uid, cdmsgtype, szcontent, dtdeadline, dtalarm, dtvalidend, isprivate, cdtarget, isattach, szattachfile, uidcreator, dtcreate, uidmodifier, dtmodify, cdisdept) <> (TblmsgcenterRow.tupled, TblmsgcenterRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmsgtype.?, szcontent, dtdeadline, dtalarm, dtvalidend, isprivate, cdtarget, isattach, szattachfile, uidcreator, dtcreate, uidmodifier, dtmodify, cdisdept).shaped.<>({r=>import r._; _1.map(_=> TblmsgcenterRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdMsgType DBType(char), Length(1,false) */
    val cdmsgtype: Column[String] = column[String]("cdMsgType", O.Length(1,varying=false))
    /** Database column szContent DBType(nchar), Length(512,false) */
    val szcontent: Column[Option[String]] = column[Option[String]]("szContent", O.Length(512,varying=false))
    /** Database column dtDeadline DBType(datetime) */
    val dtdeadline: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtDeadline")
    /** Database column dtAlarm DBType(datetime) */
    val dtalarm: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtAlarm")
    /** Database column dtValidEnd DBType(datetime) */
    val dtvalidend: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtValidEnd")
    /** Database column isPrivate DBType(char), Length(10,false) */
    val isprivate: Column[Option[String]] = column[Option[String]]("isPrivate", O.Length(10,varying=false))
    /** Database column cdTarget DBType(uniqueidentifier), Length(36,false) */
    val cdtarget: Column[Option[String]] = column[Option[String]]("cdTarget", O.Length(36,varying=false))
    /** Database column isAttach DBType(char), Length(10,false) */
    val isattach: Column[Option[String]] = column[Option[String]]("isAttach", O.Length(10,varying=false))
    /** Database column szAttachFile DBType(char), Length(50,false) */
    val szattachfile: Column[Option[String]] = column[Option[String]]("szAttachFile", O.Length(50,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdIsDept DBType(char), Length(1,false) */
    val cdisdept: Column[Option[String]] = column[Option[String]]("cdIsDept", O.Length(1,varying=false))
  }
  /** Collection-like TableQuery object for table Tblmsgcenter */
  lazy val Tblmsgcenter = new TableQuery(tag => new Tblmsgcenter(tag))
  
  /** Entity class storing rows of table Tblmsgcenterm
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param cdempcode Database column cdEmpCode DBType(char), Length(10,false)
   *  @param cdempname Database column cdEmpName DBType(char), Length(50,false)
   *  @param isshow Database column isShow DBType(char), Length(1,false)
   *  @param cdcondition Database column cdCondition DBType(char), Length(10,false) */
  case class TblmsgcentermRow(uid: String, uidrelation: Option[String], cdempcode: Option[String], cdempname: Option[String], isshow: Option[String], cdcondition: Option[String])
  /** GetResult implicit for fetching TblmsgcentermRow objects using plain SQL queries */
  implicit def GetResultTblmsgcentermRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[TblmsgcentermRow] = GR{
    prs => import prs._
    TblmsgcentermRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblMsgCenterM. Objects of this class serve as prototypes for rows in queries. */
  class Tblmsgcenterm(_tableTag: Tag) extends Table[TblmsgcentermRow](_tableTag, Some("dbo"), "tblMsgCenterM") {
    def * = (uid, uidrelation, cdempcode, cdempname, isshow, cdcondition) <> (TblmsgcentermRow.tupled, TblmsgcentermRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation, cdempcode, cdempname, isshow, cdcondition).shaped.<>({r=>import r._; _1.map(_=> TblmsgcentermRow.tupled((_1.get, _2, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false))
    /** Database column cdEmpCode DBType(char), Length(10,false) */
    val cdempcode: Column[Option[String]] = column[Option[String]]("cdEmpCode", O.Length(10,varying=false))
    /** Database column cdEmpName DBType(char), Length(50,false) */
    val cdempname: Column[Option[String]] = column[Option[String]]("cdEmpName", O.Length(50,varying=false))
    /** Database column isShow DBType(char), Length(1,false) */
    val isshow: Column[Option[String]] = column[Option[String]]("isShow", O.Length(1,varying=false))
    /** Database column cdCondition DBType(char), Length(10,false) */
    val cdcondition: Column[Option[String]] = column[Option[String]]("cdCondition", O.Length(10,varying=false))
  }
  /** Collection-like TableQuery object for table Tblmsgcenterm */
  lazy val Tblmsgcenterm = new TableQuery(tag => new Tblmsgcenterm(tag))
  
  /** Entity class storing rows of table Tblnetdata
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdnetno Database column cdNetNo DBType(char), PrimaryKey, Length(14,false)
   *  @param dtnetdate Database column dtNetDate DBType(datetime)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false)
   *  @param szstatus Database column szStatus DBType(nchar), Length(20,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param szmembername Database column szMemberName DBType(nchar), Length(50,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param cdinvno Database column cdInvNo DBType(char), Length(10,false)
   *  @param szbillyear Database column szBillYear DBType(char), Length(4,false)
   *  @param szbillmonth Database column szBillMonth DBType(char), Length(2,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp)
   *  @param cdsendstatus Database column cdSendStatus DBType(char), Length(1,false), Default(Some(0))
   *  @param dtdelete Database column dtDelete DBType(datetime) */
  case class TblnetdataRow(uid: String, cdnetno: String, dtnetdate: Option[java.sql.Timestamp], cdstatus: Option[String], szstatus: Option[String], cdmember: Option[String], szmembername: Option[String], cdorderno: Option[String], cdinvno: Option[String], szbillyear: Option[String], szbillmonth: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdsendstatus: Option[String] = Some("0"), dtdelete: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblnetdataRow objects using plain SQL queries */
  implicit def GetResultTblnetdataRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]], e3: GR[Option[java.sql.Blob]]): GR[TblnetdataRow] = GR{
    prs => import prs._
    TblnetdataRow.tupled((<<[String], <<[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblNetData. Objects of this class serve as prototypes for rows in queries. */
  class Tblnetdata(_tableTag: Tag) extends Table[TblnetdataRow](_tableTag, Some("dbo"), "tblNetData") {
    def * = (uid, cdnetno, dtnetdate, cdstatus, szstatus, cdmember, szmembername, cdorderno, cdinvno, szbillyear, szbillmonth, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdsendstatus, dtdelete) <> (TblnetdataRow.tupled, TblnetdataRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdnetno.?, dtnetdate, cdstatus, szstatus, cdmember, szmembername, cdorderno, cdinvno, szbillyear, szbillmonth, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdsendstatus, dtdelete).shaped.<>({r=>import r._; _1.map(_=> TblnetdataRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdNetNo DBType(char), PrimaryKey, Length(14,false) */
    val cdnetno: Column[String] = column[String]("cdNetNo", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column dtNetDate DBType(datetime) */
    val dtnetdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtNetDate")
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column szStatus DBType(nchar), Length(20,false) */
    val szstatus: Column[Option[String]] = column[Option[String]]("szStatus", O.Length(20,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szMemberName DBType(nchar), Length(50,false) */
    val szmembername: Column[Option[String]] = column[Option[String]]("szMemberName", O.Length(50,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[Option[String]] = column[Option[String]]("cdInvNo", O.Length(10,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[Option[String]] = column[Option[String]]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[Option[String]] = column[Option[String]]("szBillMonth", O.Length(2,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdSendStatus DBType(char), Length(1,false), Default(Some(0)) */
    val cdsendstatus: Column[Option[String]] = column[Option[String]]("cdSendStatus", O.Length(1,varying=false), O.Default(Some("0")))
    /** Database column dtDelete DBType(datetime) */
    val dtdelete: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtDelete")
  }
  /** Collection-like TableQuery object for table Tblnetdata */
  lazy val Tblnetdata = new TableQuery(tag => new Tblnetdata(tag))
  
  /** Entity class storing rows of table Tblnetmaillog
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false), Default(Some())
   *  @param szmailserver Database column szMailServer DBType(nvarchar), Length(25,true), Default()
   *  @param szfrom Database column szFrom DBType(nvarchar), Length(100,true), Default()
   *  @param szto Database column szTo DBType(nvarchar), Length(150,true), Default()
   *  @param szcc Database column szCc DBType(nvarchar), Length(200,true), Default()
   *  @param szbcc Database column szBcc DBType(nvarchar), Length(100,true), Default(Some())
   *  @param szsubject Database column szSubject DBType(nvarchar), Length(256,true), Default(Some())
   *  @param szmailbody Database column szMailBody DBType(nvarchar), Length(2000,true), Default(Some())
   *  @param cdbodyformat Database column cdBodyFormat DBType(nvarchar), Length(20,true), Default(Some(MailFormat.Html))
   *  @param cdpriority Database column cdPriority DBType(nvarchar), Length(25,true), Default(Some(MailPriority.Normal))
   *  @param issend Database column isSend DBType(bit), Default(Some(true))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param szexception Database column szException DBType(nvarchar), Length(500,true), Default(Some()) */
  case class TblnetmaillogRow(uid: String, cdmember: Option[String] = Some(""), szmailserver: String = "", szfrom: String = "", szto: String = "", szcc: String = "", szbcc: Option[String] = Some(""), szsubject: Option[String] = Some(""), szmailbody: Option[String] = Some(""), cdbodyformat: Option[String] = Some("MailFormat.Html"), cdpriority: Option[String] = Some("MailPriority.Normal"), issend: Option[Boolean] = Some(true), dtcreate: Option[java.sql.Timestamp], szexception: Option[String] = Some(""))
  /** GetResult implicit for fetching TblnetmaillogRow objects using plain SQL queries */
  implicit def GetResultTblnetmaillogRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Boolean]], e3: GR[Option[java.sql.Timestamp]]): GR[TblnetmaillogRow] = GR{
    prs => import prs._
    TblnetmaillogRow.tupled((<<[String], <<?[String], <<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblNetMailLog. Objects of this class serve as prototypes for rows in queries. */
  class Tblnetmaillog(_tableTag: Tag) extends Table[TblnetmaillogRow](_tableTag, Some("dbo"), "tblNetMailLog") {
    def * = (uid, cdmember, szmailserver, szfrom, szto, szcc, szbcc, szsubject, szmailbody, cdbodyformat, cdpriority, issend, dtcreate, szexception) <> (TblnetmaillogRow.tupled, TblnetmaillogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember, szmailserver.?, szfrom.?, szto.?, szcc.?, szbcc, szsubject, szmailbody, cdbodyformat, cdpriority, issend, dtcreate, szexception).shaped.<>({r=>import r._; _1.map(_=> TblnetmaillogRow.tupled((_1.get, _2, _3.get, _4.get, _5.get, _6.get, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false), Default(Some()) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szMailServer DBType(nvarchar), Length(25,true), Default() */
    val szmailserver: Column[String] = column[String]("szMailServer", O.Length(25,varying=true), O.Default(""))
    /** Database column szFrom DBType(nvarchar), Length(100,true), Default() */
    val szfrom: Column[String] = column[String]("szFrom", O.Length(100,varying=true), O.Default(""))
    /** Database column szTo DBType(nvarchar), Length(150,true), Default() */
    val szto: Column[String] = column[String]("szTo", O.Length(150,varying=true), O.Default(""))
    /** Database column szCc DBType(nvarchar), Length(200,true), Default() */
    val szcc: Column[String] = column[String]("szCc", O.Length(200,varying=true), O.Default(""))
    /** Database column szBcc DBType(nvarchar), Length(100,true), Default(Some()) */
    val szbcc: Column[Option[String]] = column[Option[String]]("szBcc", O.Length(100,varying=true), O.Default(Some("")))
    /** Database column szSubject DBType(nvarchar), Length(256,true), Default(Some()) */
    val szsubject: Column[Option[String]] = column[Option[String]]("szSubject", O.Length(256,varying=true), O.Default(Some("")))
    /** Database column szMailBody DBType(nvarchar), Length(2000,true), Default(Some()) */
    val szmailbody: Column[Option[String]] = column[Option[String]]("szMailBody", O.Length(2000,varying=true), O.Default(Some("")))
    /** Database column cdBodyFormat DBType(nvarchar), Length(20,true), Default(Some(MailFormat.Html)) */
    val cdbodyformat: Column[Option[String]] = column[Option[String]]("cdBodyFormat", O.Length(20,varying=true), O.Default(Some("MailFormat.Html")))
    /** Database column cdPriority DBType(nvarchar), Length(25,true), Default(Some(MailPriority.Normal)) */
    val cdpriority: Column[Option[String]] = column[Option[String]]("cdPriority", O.Length(25,varying=true), O.Default(Some("MailPriority.Normal")))
    /** Database column isSend DBType(bit), Default(Some(true)) */
    val issend: Column[Option[Boolean]] = column[Option[Boolean]]("isSend", O.Default(Some(true)))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column szException DBType(nvarchar), Length(500,true), Default(Some()) */
    val szexception: Column[Option[String]] = column[Option[String]]("szException", O.Length(500,varying=true), O.Default(Some("")))
  }
  /** Collection-like TableQuery object for table Tblnetmaillog */
  lazy val Tblnetmaillog = new TableQuery(tag => new Tblnetmaillog(tag))
  
  /** Entity class storing rows of table Tblnetordercheck
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param cdpayment Database column cdPayment DBType(char), Length(1,false)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param fmoney Database column fMoney DBType(float)
   *  @param szcountno Database column szCountNo DBType(char), Length(128,false)
   *  @param szvailddate Database column szVaildDate DBType(char), Length(20,false)
   *  @param cdauthorization Database column cdAuthorization DBType(char), Length(20,false)
   *  @param fauthorizationmoney Database column fAuthorizationMoney DBType(float)
   *  @param sznote Database column szNote DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(binary) */
  case class TblnetordercheckRow(uid: String, cdcenter: String, cdorderno: String, iserialno: Int, cdpayment: String, cdcurrency: String, fmoney: Double, szcountno: Option[String], szvailddate: Option[String], cdauthorization: Option[String], fauthorizationmoney: Option[Double], sznote: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblnetordercheckRow objects using plain SQL queries */
  implicit def GetResultTblnetordercheckRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Double], e3: GR[Option[String]], e4: GR[Option[Double]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblnetordercheckRow] = GR{
    prs => import prs._
    TblnetordercheckRow.tupled((<<[String], <<[String], <<[String], <<[Int], <<[String], <<[String], <<[Double], <<?[String], <<?[String], <<?[String], <<?[Double], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblNetOrderCheck. Objects of this class serve as prototypes for rows in queries. */
  class Tblnetordercheck(_tableTag: Tag) extends Table[TblnetordercheckRow](_tableTag, Some("dbo"), "tblNetOrderCheck") {
    def * = (uid, cdcenter, cdorderno, iserialno, cdpayment, cdcurrency, fmoney, szcountno, szvailddate, cdauthorization, fauthorizationmoney, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblnetordercheckRow.tupled, TblnetordercheckRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdorderno.?, iserialno.?, cdpayment.?, cdcurrency.?, fmoney.?, szcountno, szvailddate, cdauthorization, fauthorizationmoney, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblnetordercheckRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column cdPayment DBType(char), Length(1,false) */
    val cdpayment: Column[String] = column[String]("cdPayment", O.Length(1,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fMoney DBType(float) */
    val fmoney: Column[Double] = column[Double]("fMoney")
    /** Database column szCountNo DBType(char), Length(128,false) */
    val szcountno: Column[Option[String]] = column[Option[String]]("szCountNo", O.Length(128,varying=false))
    /** Database column szVaildDate DBType(char), Length(20,false) */
    val szvailddate: Column[Option[String]] = column[Option[String]]("szVaildDate", O.Length(20,varying=false))
    /** Database column cdAuthorization DBType(char), Length(20,false) */
    val cdauthorization: Column[Option[String]] = column[Option[String]]("cdAuthorization", O.Length(20,varying=false))
    /** Database column fAuthorizationMoney DBType(float) */
    val fauthorizationmoney: Column[Option[Double]] = column[Option[Double]]("fAuthorizationMoney")
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(binary) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblnetordercheck (database name PK_tblNetOrderCheck) */
    val pk = primaryKey("PK_tblNetOrderCheck", (cdorderno, iserialno))
  }
  /** Collection-like TableQuery object for table Tblnetordercheck */
  lazy val Tblnetordercheck = new TableQuery(tag => new Tblnetordercheck(tag))
  
  /** Entity class storing rows of table Tblnetorderdetail
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param iprodqty Database column iProdQty DBType(int)
   *  @param cdunitsale Database column cdUnitSale DBType(char), Length(3,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(255,false)
   *  @param fsaleprice Database column fSalePrice DBType(float)
   *  @param fdiscountprice Database column fDiscountPrice DBType(float)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param fmoney Database column fMoney DBType(float)
   *  @param ipvpoint Database column iPvPoint DBType(int)
   *  @param ipvpointtotal Database column iPvPointTotal DBType(int)
   *  @param ipvpointup Database column iPvPointUp DBType(int)
   *  @param ipvpointuptotal Database column iPvPointUpTotal DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(binary) */
  case class TblnetorderdetailRow(uid: String, cdcenter: String, cdorderno: String, iserialno: Int, szprodid: String, iprodqty: Int, cdunitsale: String, szprodname: String, fsaleprice: Double, fdiscountprice: Double, cdcurrency: String, fmoney: Double, ipvpoint: Int, ipvpointtotal: Int, ipvpointup: Int, ipvpointuptotal: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblnetorderdetailRow objects using plain SQL queries */
  implicit def GetResultTblnetorderdetailRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Double], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblnetorderdetailRow] = GR{
    prs => import prs._
    TblnetorderdetailRow.tupled((<<[String], <<[String], <<[String], <<[Int], <<[String], <<[Int], <<[String], <<[String], <<[Double], <<[Double], <<[String], <<[Double], <<[Int], <<[Int], <<[Int], <<[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblNetOrderDetail. Objects of this class serve as prototypes for rows in queries. */
  class Tblnetorderdetail(_tableTag: Tag) extends Table[TblnetorderdetailRow](_tableTag, Some("dbo"), "tblNetOrderDetail") {
    def * = (uid, cdcenter, cdorderno, iserialno, szprodid, iprodqty, cdunitsale, szprodname, fsaleprice, fdiscountprice, cdcurrency, fmoney, ipvpoint, ipvpointtotal, ipvpointup, ipvpointuptotal, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblnetorderdetailRow.tupled, TblnetorderdetailRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdorderno.?, iserialno.?, szprodid.?, iprodqty.?, cdunitsale.?, szprodname.?, fsaleprice.?, fdiscountprice.?, cdcurrency.?, fmoney.?, ipvpoint.?, ipvpointtotal.?, ipvpointup.?, ipvpointuptotal.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblnetorderdetailRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10.get, _11.get, _12.get, _13.get, _14.get, _15.get, _16.get, _17, _18, _19, _20, _21)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column cdUnitSale DBType(char), Length(3,false) */
    val cdunitsale: Column[String] = column[String]("cdUnitSale", O.Length(3,varying=false))
    /** Database column szProdName DBType(nchar), Length(255,false) */
    val szprodname: Column[String] = column[String]("szProdName", O.Length(255,varying=false))
    /** Database column fSalePrice DBType(float) */
    val fsaleprice: Column[Double] = column[Double]("fSalePrice")
    /** Database column fDiscountPrice DBType(float) */
    val fdiscountprice: Column[Double] = column[Double]("fDiscountPrice")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fMoney DBType(float) */
    val fmoney: Column[Double] = column[Double]("fMoney")
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointTotal DBType(int) */
    val ipvpointtotal: Column[Int] = column[Int]("iPvPointTotal")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointUpTotal DBType(int) */
    val ipvpointuptotal: Column[Int] = column[Int]("iPvPointUpTotal")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(binary) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblnetorderdetail (database name PK_tblNetOrderDetail) */
    val pk = primaryKey("PK_tblNetOrderDetail", (cdorderno, iserialno))
  }
  /** Collection-like TableQuery object for table Tblnetorderdetail */
  lazy val Tblnetorderdetail = new TableQuery(tag => new Tblnetorderdetail(tag))
  
  /** Row type of table Tblnetordermaster */
  type TblnetordermasterRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[Boolean,HCons[String,HCons[Int,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Double],HCons[Option[Double],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblnetordermasterRow providing default values if available in the database schema. */
  def TblnetordermasterRow(uid: String, cdcenter: String, cdorderno: String, cdprefix: String, isvaild: Boolean = true, cdordernoRoot: String, iordernoseq: Int, cdordernoFather: String, cdmember: String, szjoinbelone: Option[String], szname: Option[String], szcontroler: Option[String], szservicename: Option[String], szsrevicelevel: Option[String], cdcid: Option[String] = Some(""), dtbusinessdate: Option[java.sql.Timestamp], cdbonuscode: Option[String], szbonusyear: Option[String], szbonusmonth: Option[String], cdorderby: Option[String], cdemergency: Option[String], cdtakeby: Option[String], istakedetail: Option[Boolean] = Some(false), szaddressee: Option[String], sztel: Option[String], szext: Option[String], szcell: Option[String], cdcountry: Option[String], cdarea: Option[String], cdcity: Option[String], cdzip: Option[String], szaddress: Option[String], szfulladdr: Option[String], cdtakelist: Option[String], islistdetail: Option[Boolean] = Some(false), dtgoodout: Option[java.sql.Timestamp], cdouttime: Option[String], cdwarehouse: Option[String], isprintbill: Option[Boolean], isprintnote: Option[Boolean], intprintbillcount: Option[Int], cdinvno: Option[String], szbillyear: Option[String], szbillmonth: Option[String], issavemanifest: Option[Boolean], cdmfid: Option[String], cdsaleoff: Option[String], cdcurrency: Option[String], ftransmoney: Option[Double] = Some(0.0), ftotalmoney: Option[Double] = Some(0.0), ipvpointtotal: Option[Int], ipvpointuptotal: Option[Int], sznote: Option[String], cdcashdesk: Option[String], cdmachine: Option[String], cdemployee: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob]): TblnetordermasterRow = {
    uid :: cdcenter :: cdorderno :: cdprefix :: isvaild :: cdordernoRoot :: iordernoseq :: cdordernoFather :: cdmember :: szjoinbelone :: szname :: szcontroler :: szservicename :: szsrevicelevel :: cdcid :: dtbusinessdate :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdorderby :: cdemergency :: cdtakeby :: istakedetail :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdarea :: cdcity :: cdzip :: szaddress :: szfulladdr :: cdtakelist :: islistdetail :: dtgoodout :: cdouttime :: cdwarehouse :: isprintbill :: isprintnote :: intprintbillcount :: cdinvno :: szbillyear :: szbillmonth :: issavemanifest :: cdmfid :: cdsaleoff :: cdcurrency :: ftransmoney :: ftotalmoney :: ipvpointtotal :: ipvpointuptotal :: sznote :: cdcashdesk :: cdmachine :: cdemployee :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
  }
  /** GetResult implicit for fetching TblnetordermasterRow objects using plain SQL queries */
  implicit def GetResultTblnetordermasterRow(implicit e0: GR[String], e1: GR[Boolean], e2: GR[Int], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[Boolean]], e6: GR[Option[Int]], e7: GR[Option[Double]], e8: GR[Option[java.sql.Blob]]): GR[TblnetordermasterRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[Boolean] :: <<[String] :: <<[Int] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Double] :: <<?[Double] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: HNil
  }
  /** Table description of table tblNetOrderMaster. Objects of this class serve as prototypes for rows in queries. */
  class Tblnetordermaster(_tableTag: Tag) extends Table[TblnetordermasterRow](_tableTag, Some("dbo"), "tblNetOrderMaster") {
    def * = uid :: cdcenter :: cdorderno :: cdprefix :: isvaild :: cdordernoRoot :: iordernoseq :: cdordernoFather :: cdmember :: szjoinbelone :: szname :: szcontroler :: szservicename :: szsrevicelevel :: cdcid :: dtbusinessdate :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdorderby :: cdemergency :: cdtakeby :: istakedetail :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdarea :: cdcity :: cdzip :: szaddress :: szfulladdr :: cdtakelist :: islistdetail :: dtgoodout :: cdouttime :: cdwarehouse :: isprintbill :: isprintnote :: intprintbillcount :: cdinvno :: szbillyear :: szbillmonth :: issavemanifest :: cdmfid :: cdsaleoff :: cdcurrency :: ftransmoney :: ftotalmoney :: ipvpointtotal :: ipvpointuptotal :: sznote :: cdcashdesk :: cdmachine :: cdemployee :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), PrimaryKey, Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column cdPrefix DBType(char), Length(2,false) */
    val cdprefix: Column[String] = column[String]("cdPrefix", O.Length(2,varying=false))
    /** Database column isVaild DBType(bit), Default(true) */
    val isvaild: Column[Boolean] = column[Boolean]("isVaild", O.Default(true))
    /** Database column cdOrderNo_Root DBType(char), Length(14,false) */
    val cdordernoRoot: Column[String] = column[String]("cdOrderNo_Root", O.Length(14,varying=false))
    /** Database column iOrderNoSeq DBType(int) */
    val iordernoseq: Column[Int] = column[Int]("iOrderNoSeq")
    /** Database column cdOrderNo_Father DBType(char), Length(14,false) */
    val cdordernoFather: Column[String] = column[String]("cdOrderNo_Father", O.Length(14,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column szJoinBelone DBType(nchar), Length(128,false) */
    val szjoinbelone: Column[Option[String]] = column[Option[String]]("szJoinBelone", O.Length(128,varying=false))
    /** Database column szName DBType(nchar), Length(128,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(128,varying=false))
    /** Database column szControler DBType(nchar), Length(128,false) */
    val szcontroler: Column[Option[String]] = column[Option[String]]("szControler", O.Length(128,varying=false))
    /** Database column szServiceName DBType(nchar), Length(128,false) */
    val szservicename: Column[Option[String]] = column[Option[String]]("szServiceName", O.Length(128,varying=false))
    /** Database column szSreviceLevel DBType(nchar), Length(128,false) */
    val szsrevicelevel: Column[Option[String]] = column[Option[String]]("szSreviceLevel", O.Length(128,varying=false))
    /** Database column cdCid DBType(char), Length(10,false), Default(Some()) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[Option[String]] = column[Option[String]]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[Option[String]] = column[Option[String]]("szBonusMonth", O.Length(2,varying=false))
    /** Database column cdOrderBy DBType(char), Length(1,false) */
    val cdorderby: Column[Option[String]] = column[Option[String]]("cdOrderBy", O.Length(1,varying=false))
    /** Database column cdEmergency DBType(char), Length(1,false) */
    val cdemergency: Column[Option[String]] = column[Option[String]]("cdEmergency", O.Length(1,varying=false))
    /** Database column cdTakeBy DBType(char), Length(1,false) */
    val cdtakeby: Column[Option[String]] = column[Option[String]]("cdTakeBy", O.Length(1,varying=false))
    /** Database column isTakeDetail DBType(bit), Default(Some(false)) */
    val istakedetail: Column[Option[Boolean]] = column[Option[Boolean]]("isTakeDetail", O.Default(Some(false)))
    /** Database column szAddressee DBType(nchar), Length(80,false) */
    val szaddressee: Column[Option[String]] = column[Option[String]]("szAddressee", O.Length(80,varying=false))
    /** Database column szTel DBType(nchar), Length(128,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(128,varying=false))
    /** Database column szExt DBType(nchar), Length(10,false) */
    val szext: Column[Option[String]] = column[Option[String]]("szExt", O.Length(10,varying=false))
    /** Database column szCell DBType(nchar), Length(128,false) */
    val szcell: Column[Option[String]] = column[Option[String]]("szCell", O.Length(128,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(10,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szAddress DBType(nchar), Length(128,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column cdTakeList DBType(char), Length(1,false) */
    val cdtakelist: Column[Option[String]] = column[Option[String]]("cdTakeList", O.Length(1,varying=false))
    /** Database column isListDetail DBType(bit), Default(Some(false)) */
    val islistdetail: Column[Option[Boolean]] = column[Option[Boolean]]("isListDetail", O.Default(Some(false)))
    /** Database column dtGoodOut DBType(datetime) */
    val dtgoodout: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtGoodOut")
    /** Database column cdOutTime DBType(char), Length(1,false) */
    val cdouttime: Column[Option[String]] = column[Option[String]]("cdOutTime", O.Length(1,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[Option[String]] = column[Option[String]]("cdWareHouse", O.Length(4,varying=false))
    /** Database column isPrintBill DBType(bit) */
    val isprintbill: Column[Option[Boolean]] = column[Option[Boolean]]("isPrintBill")
    /** Database column isPrintNote DBType(bit) */
    val isprintnote: Column[Option[Boolean]] = column[Option[Boolean]]("isPrintNote")
    /** Database column intPrintBillCount DBType(int) */
    val intprintbillcount: Column[Option[Int]] = column[Option[Int]]("intPrintBillCount")
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[Option[String]] = column[Option[String]]("cdInvNo", O.Length(10,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[Option[String]] = column[Option[String]]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[Option[String]] = column[Option[String]]("szBillMonth", O.Length(2,varying=false))
    /** Database column isSaveManifest DBType(bit) */
    val issavemanifest: Column[Option[Boolean]] = column[Option[Boolean]]("isSaveManifest")
    /** Database column cdMfId DBType(char), Length(14,false) */
    val cdmfid: Column[Option[String]] = column[Option[String]]("cdMfId", O.Length(14,varying=false))
    /** Database column cdSaleOff DBType(char), Length(2,false) */
    val cdsaleoff: Column[Option[String]] = column[Option[String]]("cdSaleOff", O.Length(2,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column fTransMoney DBType(float), Default(Some(0.0)) */
    val ftransmoney: Column[Option[Double]] = column[Option[Double]]("fTransMoney", O.Default(Some(0.0)))
    /** Database column fTotalMoney DBType(float), Default(Some(0.0)) */
    val ftotalmoney: Column[Option[Double]] = column[Option[Double]]("fTotalMoney", O.Default(Some(0.0)))
    /** Database column iPvPointTotal DBType(int) */
    val ipvpointtotal: Column[Option[Int]] = column[Option[Int]]("iPvPointTotal")
    /** Database column iPvPointUpTotal DBType(int) */
    val ipvpointuptotal: Column[Option[Int]] = column[Option[Int]]("iPvPointUpTotal")
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column cdCashDesk DBType(char), Length(2,false) */
    val cdcashdesk: Column[Option[String]] = column[Option[String]]("cdCashDesk", O.Length(2,varying=false))
    /** Database column cdMachine DBType(char), Length(50,false) */
    val cdmachine: Column[Option[String]] = column[Option[String]]("cdMachine", O.Length(50,varying=false))
    /** Database column cdEmployee DBType(char), Length(8,false) */
    val cdemployee: Column[Option[String]] = column[Option[String]]("cdEmployee", O.Length(8,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(binary) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblnetordermaster */
  lazy val Tblnetordermaster = new TableQuery(tag => new Tblnetordermaster(tag))
  
  /** Entity class storing rows of table Tblnolistpartsexgfrom
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param dtbusinessdate Database column dtBusinessDate DBType(datetime)
   *  @param iseq Database column iSeq DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(120,false)
   *  @param iqty Database column iQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblnolistpartsexgfromRow(uid: String, cdmember: String, dtbusinessdate: java.sql.Timestamp, iseq: Int, szprodid: Option[String], szprodname: Option[String], iqty: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblnolistpartsexgfromRow objects using plain SQL queries */
  implicit def GetResultTblnolistpartsexgfromRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Int], e3: GR[Option[String]], e4: GR[Option[Int]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblnolistpartsexgfromRow] = GR{
    prs => import prs._
    TblnolistpartsexgfromRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[Int], <<?[String], <<?[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblNoListPartsExgFrom. Objects of this class serve as prototypes for rows in queries. */
  class Tblnolistpartsexgfrom(_tableTag: Tag) extends Table[TblnolistpartsexgfromRow](_tableTag, Some("dbo"), "tblNoListPartsExgFrom") {
    def * = (uid, cdmember, dtbusinessdate, iseq, szprodid, szprodname, iqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblnolistpartsexgfromRow.tupled, TblnolistpartsexgfromRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember.?, dtbusinessdate.?, iseq.?, szprodid, szprodname, iqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblnolistpartsexgfromRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusinessDate")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[Option[String]] = column[Option[String]]("szProdID", O.Length(15,varying=false))
    /** Database column szProdName DBType(nchar), Length(120,false) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(120,varying=false))
    /** Database column iQty DBType(int) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblnolistpartsexgfrom (database name PK_tblNoListExgFrom) */
    val pk = primaryKey("PK_tblNoListExgFrom", (cdmember, dtbusinessdate, iseq))
  }
  /** Collection-like TableQuery object for table Tblnolistpartsexgfrom */
  lazy val Tblnolistpartsexgfrom = new TableQuery(tag => new Tblnolistpartsexgfrom(tag))
  
  /** Entity class storing rows of table Tblnolistpartsexgmaster
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param dtbusinessdate Database column dtBusinessDate DBType(datetime)
   *  @param szjoinbelone Database column szJoinBelone DBType(nchar), Length(128,false), Default(Some())
   *  @param szname Database column szName DBType(nchar), Length(128,false), Default(Some())
   *  @param szcontroler Database column szControler DBType(nchar), Length(128,false), Default(Some())
   *  @param szservicename Database column szServiceName DBType(nchar), Length(128,false), Default(Some())
   *  @param szsrevicelevel Database column szSreviceLevel DBType(nchar), Length(128,false), Default(Some())
   *  @param cdcid Database column cdCid DBType(char), Length(10,false), Default(Some())
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblnolistpartsexgmasterRow(uid: String, cdmember: String, dtbusinessdate: java.sql.Timestamp, szjoinbelone: Option[String] = Some(""), szname: Option[String] = Some(""), szcontroler: Option[String] = Some(""), szservicename: Option[String] = Some(""), szsrevicelevel: Option[String] = Some(""), cdcid: Option[String] = Some(""), cdwarehouse: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblnolistpartsexgmasterRow objects using plain SQL queries */
  implicit def GetResultTblnolistpartsexgmasterRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblnolistpartsexgmasterRow] = GR{
    prs => import prs._
    TblnolistpartsexgmasterRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblNoListPartsExgMaster. Objects of this class serve as prototypes for rows in queries. */
  class Tblnolistpartsexgmaster(_tableTag: Tag) extends Table[TblnolistpartsexgmasterRow](_tableTag, Some("dbo"), "tblNoListPartsExgMaster") {
    def * = (uid, cdmember, dtbusinessdate, szjoinbelone, szname, szcontroler, szservicename, szsrevicelevel, cdcid, cdwarehouse, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblnolistpartsexgmasterRow.tupled, TblnolistpartsexgmasterRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember.?, dtbusinessdate.?, szjoinbelone, szname, szcontroler, szservicename, szsrevicelevel, cdcid, cdwarehouse, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblnolistpartsexgmasterRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusinessDate")
    /** Database column szJoinBelone DBType(nchar), Length(128,false), Default(Some()) */
    val szjoinbelone: Column[Option[String]] = column[Option[String]]("szJoinBelone", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szName DBType(nchar), Length(128,false), Default(Some()) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szControler DBType(nchar), Length(128,false), Default(Some()) */
    val szcontroler: Column[Option[String]] = column[Option[String]]("szControler", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szServiceName DBType(nchar), Length(128,false), Default(Some()) */
    val szservicename: Column[Option[String]] = column[Option[String]]("szServiceName", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szSreviceLevel DBType(nchar), Length(128,false), Default(Some()) */
    val szsrevicelevel: Column[Option[String]] = column[Option[String]]("szSreviceLevel", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column cdCid DBType(char), Length(10,false), Default(Some()) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[Option[String]] = column[Option[String]]("cdWareHouse", O.Length(4,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblnolistpartsexgmaster (database name PK_tblNoListExgMaster) */
    val pk = primaryKey("PK_tblNoListExgMaster", (cdmember, dtbusinessdate))
  }
  /** Collection-like TableQuery object for table Tblnolistpartsexgmaster */
  lazy val Tblnolistpartsexgmaster = new TableQuery(tag => new Tblnolistpartsexgmaster(tag))
  
  /** Entity class storing rows of table Tblnolistpartsexgto
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param dtbusinessdate Database column dtBusinessDate DBType(datetime)
   *  @param iseq Database column iSeq DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(120,false)
   *  @param iqty Database column iQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblnolistpartsexgtoRow(uid: String, cdmember: String, dtbusinessdate: java.sql.Timestamp, iseq: Int, szprodid: Option[String], szprodname: Option[String], iqty: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblnolistpartsexgtoRow objects using plain SQL queries */
  implicit def GetResultTblnolistpartsexgtoRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Int], e3: GR[Option[String]], e4: GR[Option[Int]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblnolistpartsexgtoRow] = GR{
    prs => import prs._
    TblnolistpartsexgtoRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[Int], <<?[String], <<?[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblNoListPartsExgTo. Objects of this class serve as prototypes for rows in queries. */
  class Tblnolistpartsexgto(_tableTag: Tag) extends Table[TblnolistpartsexgtoRow](_tableTag, Some("dbo"), "tblNoListPartsExgTo") {
    def * = (uid, cdmember, dtbusinessdate, iseq, szprodid, szprodname, iqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblnolistpartsexgtoRow.tupled, TblnolistpartsexgtoRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember.?, dtbusinessdate.?, iseq.?, szprodid, szprodname, iqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblnolistpartsexgtoRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtBusinessDate")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[Option[String]] = column[Option[String]]("szProdID", O.Length(15,varying=false))
    /** Database column szProdName DBType(nchar), Length(120,false) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(120,varying=false))
    /** Database column iQty DBType(int) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblnolistpartsexgto (database name PK_tblNoListExgTo) */
    val pk = primaryKey("PK_tblNoListExgTo", (cdmember, dtbusinessdate, iseq))
  }
  /** Collection-like TableQuery object for table Tblnolistpartsexgto */
  lazy val Tblnolistpartsexgto = new TableQuery(tag => new Tblnolistpartsexgto(tag))
  
  /** Row type of table Tblnumber */
  type TblnumberRow = HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblnumberRow providing default values if available in the database schema. */
  def TblnumberRow(uid: String, cdarea: String = "", cdtype: String = "", szprofix: Option[String] = Some(""), lseq: Option[Int] = Some(0), isincreasetel: Option[Boolean] = Some(true), iseqlength: Option[Int] = Some(4), szformat: Option[String] = Some(""), iyear: Option[Int] = Some(0), imonth: Option[Int] = Some(0), lseqmax: Option[Int] = Some(999999), szsample: Option[String] = Some(""), szdesc: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], iday: Option[Int], ilastyear: Option[Int], ilastmonth: Option[Int], ilastday: Option[Int], ilastseq: Option[Int], cdzeromethod: Option[String]): TblnumberRow = {
    uid :: cdarea :: cdtype :: szprofix :: lseq :: isincreasetel :: iseqlength :: szformat :: iyear :: imonth :: lseqmax :: szsample :: szdesc :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: iday :: ilastyear :: ilastmonth :: ilastday :: ilastseq :: cdzeromethod :: HNil
  }
  /** GetResult implicit for fetching TblnumberRow objects using plain SQL queries */
  implicit def GetResultTblnumberRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]]): GR[TblnumberRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[Int] :: <<?[Boolean] :: <<?[Int] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[String] :: HNil
  }
  /** Table description of table tblNumber. Objects of this class serve as prototypes for rows in queries. */
  class Tblnumber(_tableTag: Tag) extends Table[TblnumberRow](_tableTag, Some("dbo"), "tblNumber") {
    def * = uid :: cdarea :: cdtype :: szprofix :: lseq :: isincreasetel :: iseqlength :: szformat :: iyear :: imonth :: lseqmax :: szsample :: szdesc :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: iday :: ilastyear :: ilastmonth :: ilastday :: ilastseq :: cdzeromethod :: HNil
    
    /** Database column Uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("Uid", O.Length(36,varying=false))
    /** Database column cdArea DBType(char), Length(8,false), Default() */
    val cdarea: Column[String] = column[String]("cdArea", O.Length(8,varying=false), O.Default(""))
    /** Database column cdType DBType(char), Length(10,false), Default() */
    val cdtype: Column[String] = column[String]("cdType", O.Length(10,varying=false), O.Default(""))
    /** Database column szProfix DBType(char), Length(10,false), Default(Some()) */
    val szprofix: Column[Option[String]] = column[Option[String]]("szProfix", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column lSeq DBType(int), Default(Some(0)) */
    val lseq: Column[Option[Int]] = column[Option[Int]]("lSeq", O.Default(Some(0)))
    /** Database column isIncreasetel DBType(bit), Default(Some(true)) */
    val isincreasetel: Column[Option[Boolean]] = column[Option[Boolean]]("isIncreasetel", O.Default(Some(true)))
    /** Database column iSeqLength DBType(int), Default(Some(4)) */
    val iseqlength: Column[Option[Int]] = column[Option[Int]]("iSeqLength", O.Default(Some(4)))
    /** Database column szFormat DBType(char), Length(2,false), Default(Some()) */
    val szformat: Column[Option[String]] = column[Option[String]]("szFormat", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column iYear DBType(int), Default(Some(0)) */
    val iyear: Column[Option[Int]] = column[Option[Int]]("iYear", O.Default(Some(0)))
    /** Database column iMonth DBType(int), Default(Some(0)) */
    val imonth: Column[Option[Int]] = column[Option[Int]]("iMonth", O.Default(Some(0)))
    /** Database column lSeqMax DBType(int), Default(Some(999999)) */
    val lseqmax: Column[Option[Int]] = column[Option[Int]]("lSeqMax", O.Default(Some(999999)))
    /** Database column szSample DBType(nchar), Length(100,false), Default(Some()) */
    val szsample: Column[Option[String]] = column[Option[String]]("szSample", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column szDesc DBType(nchar), Length(100,false) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(100,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column iDay DBType(int) */
    val iday: Column[Option[Int]] = column[Option[Int]]("iDay")
    /** Database column iLastYear DBType(int) */
    val ilastyear: Column[Option[Int]] = column[Option[Int]]("iLastYear")
    /** Database column iLastMonth DBType(int) */
    val ilastmonth: Column[Option[Int]] = column[Option[Int]]("iLastMonth")
    /** Database column iLastDay DBType(int) */
    val ilastday: Column[Option[Int]] = column[Option[Int]]("iLastDay")
    /** Database column iLastSeq DBType(int) */
    val ilastseq: Column[Option[Int]] = column[Option[Int]]("iLastSeq")
    /** Database column cdZeroMethod DBType(char), Length(1,false) */
    val cdzeromethod: Column[Option[String]] = column[Option[String]]("cdZeroMethod", O.Length(1,varying=false))
    
    /** Primary key of Tblnumber (database name PK_tblNumber) */
    val pk = primaryKey("PK_tblNumber", cdarea :: cdtype :: HNil)
  }
  /** Collection-like TableQuery object for table Tblnumber */
  lazy val Tblnumber = new TableQuery(tag => new Tblnumber(tag))
  
  /** Entity class storing rows of table Tblordercheck
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param cdpayment Database column cdPayment DBType(char), Length(1,false)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param fmoney Database column fMoney DBType(float)
   *  @param szcountno Database column szCountNo DBType(char), Length(128,false)
   *  @param szvailddate Database column szVaildDate DBType(char), Length(20,false)
   *  @param cdauthorization Database column cdAuthorization DBType(char), Length(20,false)
   *  @param fauthorizationmoney Database column fAuthorizationMoney DBType(float)
   *  @param sznote Database column szNote DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp)
   *  @param cdbillcollection Database column cdBillCollection DBType(varchar), Length(6,true), Default(Some()) */
  case class TblordercheckRow(uid: String, cdcenter: String, cdorderno: String, iserialno: Int, cdpayment: String, cdcurrency: String, fmoney: Double, szcountno: Option[String], szvailddate: Option[String], cdauthorization: Option[String], fauthorizationmoney: Option[Double], sznote: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdbillcollection: Option[String] = Some(""))
  /** GetResult implicit for fetching TblordercheckRow objects using plain SQL queries */
  implicit def GetResultTblordercheckRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Double], e3: GR[Option[String]], e4: GR[Option[Double]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblordercheckRow] = GR{
    prs => import prs._
    TblordercheckRow.tupled((<<[String], <<[String], <<[String], <<[Int], <<[String], <<[String], <<[Double], <<?[String], <<?[String], <<?[String], <<?[Double], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String]))
  }
  /** Table description of table tblOrderCheck. Objects of this class serve as prototypes for rows in queries. */
  class Tblordercheck(_tableTag: Tag) extends Table[TblordercheckRow](_tableTag, Some("dbo"), "tblOrderCheck") {
    def * = (uid, cdcenter, cdorderno, iserialno, cdpayment, cdcurrency, fmoney, szcountno, szvailddate, cdauthorization, fauthorizationmoney, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdbillcollection) <> (TblordercheckRow.tupled, TblordercheckRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdorderno.?, iserialno.?, cdpayment.?, cdcurrency.?, fmoney.?, szcountno, szvailddate, cdauthorization, fauthorizationmoney, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdbillcollection).shaped.<>({r=>import r._; _1.map(_=> TblordercheckRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column cdPayment DBType(char), Length(1,false) */
    val cdpayment: Column[String] = column[String]("cdPayment", O.Length(1,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fMoney DBType(float) */
    val fmoney: Column[Double] = column[Double]("fMoney")
    /** Database column szCountNo DBType(char), Length(128,false) */
    val szcountno: Column[Option[String]] = column[Option[String]]("szCountNo", O.Length(128,varying=false))
    /** Database column szVaildDate DBType(char), Length(20,false) */
    val szvailddate: Column[Option[String]] = column[Option[String]]("szVaildDate", O.Length(20,varying=false))
    /** Database column cdAuthorization DBType(char), Length(20,false) */
    val cdauthorization: Column[Option[String]] = column[Option[String]]("cdAuthorization", O.Length(20,varying=false))
    /** Database column fAuthorizationMoney DBType(float) */
    val fauthorizationmoney: Column[Option[Double]] = column[Option[Double]]("fAuthorizationMoney")
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdBillCollection DBType(varchar), Length(6,true), Default(Some()) */
    val cdbillcollection: Column[Option[String]] = column[Option[String]]("cdBillCollection", O.Length(6,varying=true), O.Default(Some("")))
    
    /** Primary key of Tblordercheck (database name PK_tblOrderCheck) */
    val pk = primaryKey("PK_tblOrderCheck", (cdorderno, iserialno))
  }
  /** Collection-like TableQuery object for table Tblordercheck */
  lazy val Tblordercheck = new TableQuery(tag => new Tblordercheck(tag))
  
  /** Entity class storing rows of table Tblordercheckreturn
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(14,false)
   *  @param iserialno Database column iSerialNo DBType(int)
   *  @param cdpayment Database column cdPayment DBType(char), Length(1,false)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param fmoney Database column fMoney DBType(float)
   *  @param szcountno Database column szCountNo DBType(char), Length(128,false)
   *  @param szvailddate Database column szVaildDate DBType(char), Length(20,false)
   *  @param cdauthorization Database column cdAuthorization DBType(char), Length(20,false)
   *  @param fauthorizationmoney Database column fAuthorizationMoney DBType(float)
   *  @param sznote Database column szNote DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp)
   *  @param cdbillcollection Database column cdBillCollection DBType(varchar), Length(6,true), Default(Some()) */
  case class TblordercheckreturnRow(uid: String, cdcenter: String, cdorderno: String, iserialno: Int, cdpayment: String, cdcurrency: String, fmoney: Double, szcountno: Option[String], szvailddate: Option[String], cdauthorization: Option[String], fauthorizationmoney: Option[Double], sznote: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdbillcollection: Option[String] = Some(""))
  /** GetResult implicit for fetching TblordercheckreturnRow objects using plain SQL queries */
  implicit def GetResultTblordercheckreturnRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Double], e3: GR[Option[String]], e4: GR[Option[Double]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblordercheckreturnRow] = GR{
    prs => import prs._
    TblordercheckreturnRow.tupled((<<[String], <<[String], <<[String], <<[Int], <<[String], <<[String], <<[Double], <<?[String], <<?[String], <<?[String], <<?[Double], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String]))
  }
  /** Table description of table tblOrderCheckReturn. Objects of this class serve as prototypes for rows in queries. */
  class Tblordercheckreturn(_tableTag: Tag) extends Table[TblordercheckreturnRow](_tableTag, Some("dbo"), "tblOrderCheckReturn") {
    def * = (uid, cdcenter, cdorderno, iserialno, cdpayment, cdcurrency, fmoney, szcountno, szvailddate, cdauthorization, fauthorizationmoney, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdbillcollection) <> (TblordercheckreturnRow.tupled, TblordercheckreturnRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdorderno.?, iserialno.?, cdpayment.?, cdcurrency.?, fmoney.?, szcountno, szvailddate, cdauthorization, fauthorizationmoney, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts, cdbillcollection).shaped.<>({r=>import r._; _1.map(_=> TblordercheckreturnRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column cdPayment DBType(char), Length(1,false) */
    val cdpayment: Column[String] = column[String]("cdPayment", O.Length(1,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fMoney DBType(float) */
    val fmoney: Column[Double] = column[Double]("fMoney")
    /** Database column szCountNo DBType(char), Length(128,false) */
    val szcountno: Column[Option[String]] = column[Option[String]]("szCountNo", O.Length(128,varying=false))
    /** Database column szVaildDate DBType(char), Length(20,false) */
    val szvailddate: Column[Option[String]] = column[Option[String]]("szVaildDate", O.Length(20,varying=false))
    /** Database column cdAuthorization DBType(char), Length(20,false) */
    val cdauthorization: Column[Option[String]] = column[Option[String]]("cdAuthorization", O.Length(20,varying=false))
    /** Database column fAuthorizationMoney DBType(float) */
    val fauthorizationmoney: Column[Option[Double]] = column[Option[Double]]("fAuthorizationMoney")
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdBillCollection DBType(varchar), Length(6,true), Default(Some()) */
    val cdbillcollection: Column[Option[String]] = column[Option[String]]("cdBillCollection", O.Length(6,varying=true), O.Default(Some("")))
    
    /** Primary key of Tblordercheckreturn (database name PK_tblOrderCheckReturn) */
    val pk = primaryKey("PK_tblOrderCheckReturn", (cdorderno, iserialno))
  }
  /** Collection-like TableQuery object for table Tblordercheckreturn */
  lazy val Tblordercheckreturn = new TableQuery(tag => new Tblordercheckreturn(tag))
  
  /** Row type of table Tblorderdetail */
  type TblorderdetailRow = HCons[String,HCons[String,HCons[String,HCons[Int,HCons[String,HCons[Int,HCons[String,HCons[String,HCons[Double,HCons[Double,HCons[String,HCons[Double,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HNil]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblorderdetailRow providing default values if available in the database schema. */
  def TblorderdetailRow(uid: String, cdcenter: String, cdorderno: String, iserialno: Int, szprodid: String, iprodqty: Int, cdunitsale: String, szprodname: String, fsaleprice: Double, fdiscountprice: Double, cdcurrency: String, fmoney: Double, ipvpoint: Int, ipvpointtotal: Int, ipvpointup: Int, ipvpointuptotal: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdproject: Option[String], iusedqty: Option[Int] = Some(0), inousedqty: Option[Int] = Some(0)): TblorderdetailRow = {
    uid :: cdcenter :: cdorderno :: iserialno :: szprodid :: iprodqty :: cdunitsale :: szprodname :: fsaleprice :: fdiscountprice :: cdcurrency :: fmoney :: ipvpoint :: ipvpointtotal :: ipvpointup :: ipvpointuptotal :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdproject :: iusedqty :: inousedqty :: HNil
  }
  /** GetResult implicit for fetching TblorderdetailRow objects using plain SQL queries */
  implicit def GetResultTblorderdetailRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Double], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]], e6: GR[Option[Int]]): GR[TblorderdetailRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[Int] :: <<[String] :: <<[Int] :: <<[String] :: <<[String] :: <<[Double] :: <<[Double] :: <<[String] :: <<[Double] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[Int] :: <<?[Int] :: HNil
  }
  /** Table description of table tblOrderDetail. Objects of this class serve as prototypes for rows in queries. */
  class Tblorderdetail(_tableTag: Tag) extends Table[TblorderdetailRow](_tableTag, Some("dbo"), "tblOrderDetail") {
    def * = uid :: cdcenter :: cdorderno :: iserialno :: szprodid :: iprodqty :: cdunitsale :: szprodname :: fsaleprice :: fdiscountprice :: cdcurrency :: fmoney :: ipvpoint :: ipvpointtotal :: ipvpointup :: ipvpointuptotal :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: cdproject :: iusedqty :: inousedqty :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column cdUnitSale DBType(char), Length(3,false) */
    val cdunitsale: Column[String] = column[String]("cdUnitSale", O.Length(3,varying=false))
    /** Database column szProdName DBType(nchar), Length(255,false) */
    val szprodname: Column[String] = column[String]("szProdName", O.Length(255,varying=false))
    /** Database column fSalePrice DBType(float) */
    val fsaleprice: Column[Double] = column[Double]("fSalePrice")
    /** Database column fDiscountPrice DBType(float) */
    val fdiscountprice: Column[Double] = column[Double]("fDiscountPrice")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fMoney DBType(float) */
    val fmoney: Column[Double] = column[Double]("fMoney")
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointTotal DBType(int) */
    val ipvpointtotal: Column[Int] = column[Int]("iPvPointTotal")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointUpTotal DBType(int) */
    val ipvpointuptotal: Column[Int] = column[Int]("iPvPointUpTotal")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
    /** Database column iUsedQty DBType(int), Default(Some(0)) */
    val iusedqty: Column[Option[Int]] = column[Option[Int]]("iUsedQty", O.Default(Some(0)))
    /** Database column iNoUsedQty DBType(int), Default(Some(0)) */
    val inousedqty: Column[Option[Int]] = column[Option[Int]]("iNoUsedQty", O.Default(Some(0)))
    
    /** Primary key of Tblorderdetail (database name PK_tblOrderDetail) */
    val pk = primaryKey("PK_tblOrderDetail", cdorderno :: iserialno :: HNil)
  }
  /** Collection-like TableQuery object for table Tblorderdetail */
  lazy val Tblorderdetail = new TableQuery(tag => new Tblorderdetail(tag))
  
  /** Entity class storing rows of table Tblorderinvdetail
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdorderno Database column cdOrderNo DBType(char), PrimaryKey, Length(14,false)
   *  @param cdinvno Database column cdInvNo DBType(char), Length(10,false)
   *  @param szbillyear Database column szBillYear DBType(char), Length(4,false)
   *  @param szbillmonth Database column szBillMonth DBType(char), Length(2,false)
   *  @param szaddressee Database column szAddressee DBType(nchar), Length(80,false)
   *  @param sztel Database column szTel DBType(nchar), Length(128,false)
   *  @param szext Database column szExt DBType(nchar), Length(10,false)
   *  @param szcell Database column szCell DBType(nchar), Length(128,false)
   *  @param cdcountry Database column cdCountry DBType(char), Length(10,false)
   *  @param cdarea Database column cdArea DBType(char), Length(10,false)
   *  @param cdcity Database column cdCity DBType(char), Length(10,false)
   *  @param cdzip Database column cdZip DBType(char), Length(10,false)
   *  @param szaddress Database column szAddress DBType(nchar), Length(128,false)
   *  @param szfulladdr Database column szFullAddr DBType(nchar), Length(255,false)
   *  @param sznote Database column szNote DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblorderinvdetailRow(uid: String, cdcenter: String, cdorderno: String, cdinvno: String, szbillyear: String, szbillmonth: String, szaddressee: Option[String], sztel: Option[String], szext: Option[String], szcell: Option[String], cdcountry: Option[String], cdarea: Option[String], cdcity: Option[String], cdzip: Option[String], szaddress: Option[String], szfulladdr: Option[String], sznote: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblorderinvdetailRow objects using plain SQL queries */
  implicit def GetResultTblorderinvdetailRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblorderinvdetailRow] = GR{
    prs => import prs._
    TblorderinvdetailRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblOrderInvDetail. Objects of this class serve as prototypes for rows in queries. */
  class Tblorderinvdetail(_tableTag: Tag) extends Table[TblorderinvdetailRow](_tableTag, Some("dbo"), "tblOrderInvDetail") {
    def * = (uid, cdcenter, cdorderno, cdinvno, szbillyear, szbillmonth, szaddressee, sztel, szext, szcell, cdcountry, cdarea, cdcity, cdzip, szaddress, szfulladdr, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblorderinvdetailRow.tupled, TblorderinvdetailRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdorderno.?, cdinvno.?, szbillyear.?, szbillmonth.?, szaddressee, sztel, szext, szcell, cdcountry, cdarea, cdcity, cdzip, szaddress, szfulladdr, sznote, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblorderinvdetailRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), PrimaryKey, Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[String] = column[String]("cdInvNo", O.Length(10,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[String] = column[String]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[String] = column[String]("szBillMonth", O.Length(2,varying=false))
    /** Database column szAddressee DBType(nchar), Length(80,false) */
    val szaddressee: Column[Option[String]] = column[Option[String]]("szAddressee", O.Length(80,varying=false))
    /** Database column szTel DBType(nchar), Length(128,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(128,varying=false))
    /** Database column szExt DBType(nchar), Length(10,false) */
    val szext: Column[Option[String]] = column[Option[String]]("szExt", O.Length(10,varying=false))
    /** Database column szCell DBType(nchar), Length(128,false) */
    val szcell: Column[Option[String]] = column[Option[String]]("szCell", O.Length(128,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(10,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szAddress DBType(nchar), Length(128,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblorderinvdetail */
  lazy val Tblorderinvdetail = new TableQuery(tag => new Tblorderinvdetail(tag))
  
  /** Row type of table Tblordermaster */
  type TblordermasterRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[Boolean,HCons[String,HCons[Int,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Double],HCons[Option[Double],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[String],HCons[Option[Boolean],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblordermasterRow providing default values if available in the database schema. */
  def TblordermasterRow(uid: String, cdcenter: String, cdorderno: String, cdprefix: String, isvaild: Boolean = true, cdordernoRoot: String, iordernoseq: Int, cdordernoFather: String, cdmember: String, szjoinbelone: Option[String], szname: Option[String], szcontroler: Option[String], szservicename: Option[String], szsrevicelevel: Option[String], cdcid: Option[String] = Some(""), dtbusinessdate: Option[java.sql.Timestamp], cdbonuscode: Option[String], szbonusyear: Option[String], szbonusmonth: Option[String], cdorderby: Option[String], cdemergency: Option[String], cdtakeby: Option[String], istakedetail: Option[Boolean] = Some(false), szaddressee: Option[String], sztel: Option[String], szext: Option[String], szcell: Option[String], cdcountry: Option[String], cdarea: Option[String], cdcity: Option[String], cdzip: Option[String], szaddress: Option[String], szfulladdr: Option[String], cdtakelist: Option[String], islistdetail: Option[Boolean] = Some(false), dtgoodout: Option[java.sql.Timestamp], cdouttime: Option[String], cdwarehouse: Option[String], isprintbill: Option[Boolean], isprintnote: Option[Boolean], intprintbillcount: Option[Int], cdinvno: Option[String], szbillyear: Option[String], szbillmonth: Option[String], issavemanifest: Option[Boolean], cdmfid: Option[String], cdsaleoff: Option[String], cdcurrency: Option[String], ftransmoney: Option[Double] = Some(0.0), ftotalmoney: Option[Double] = Some(0.0), ipvpointtotal: Option[Int], ipvpointuptotal: Option[Int], sznote: Option[String], cdcashdesk: Option[String], cdmachine: Option[String], cdemployee: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], ffee1: Option[Double] = Some(0.0), ffee2: Option[Double] = Some(0.0), ffee3: Option[Double] = Some(0.0), cdinvchk: Option[String], isInvoicePrinted: Option[Boolean]): TblordermasterRow = {
    uid :: cdcenter :: cdorderno :: cdprefix :: isvaild :: cdordernoRoot :: iordernoseq :: cdordernoFather :: cdmember :: szjoinbelone :: szname :: szcontroler :: szservicename :: szsrevicelevel :: cdcid :: dtbusinessdate :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdorderby :: cdemergency :: cdtakeby :: istakedetail :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdarea :: cdcity :: cdzip :: szaddress :: szfulladdr :: cdtakelist :: islistdetail :: dtgoodout :: cdouttime :: cdwarehouse :: isprintbill :: isprintnote :: intprintbillcount :: cdinvno :: szbillyear :: szbillmonth :: issavemanifest :: cdmfid :: cdsaleoff :: cdcurrency :: ftransmoney :: ftotalmoney :: ipvpointtotal :: ipvpointuptotal :: sznote :: cdcashdesk :: cdmachine :: cdemployee :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: ffee1 :: ffee2 :: ffee3 :: cdinvchk :: isInvoicePrinted :: HNil
  }
  /** GetResult implicit for fetching TblordermasterRow objects using plain SQL queries */
  implicit def GetResultTblordermasterRow(implicit e0: GR[String], e1: GR[Boolean], e2: GR[Int], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[Boolean]], e6: GR[Option[Int]], e7: GR[Option[Double]], e8: GR[Option[java.sql.Blob]]): GR[TblordermasterRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[Boolean] :: <<[String] :: <<[Int] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Double] :: <<?[Double] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[String] :: <<?[Boolean] :: HNil
  }
  /** Table description of table tblOrderMaster. Objects of this class serve as prototypes for rows in queries. */
  class Tblordermaster(_tableTag: Tag) extends Table[TblordermasterRow](_tableTag, Some("dbo"), "tblOrderMaster") {
    def * = uid :: cdcenter :: cdorderno :: cdprefix :: isvaild :: cdordernoRoot :: iordernoseq :: cdordernoFather :: cdmember :: szjoinbelone :: szname :: szcontroler :: szservicename :: szsrevicelevel :: cdcid :: dtbusinessdate :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdorderby :: cdemergency :: cdtakeby :: istakedetail :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdarea :: cdcity :: cdzip :: szaddress :: szfulladdr :: cdtakelist :: islistdetail :: dtgoodout :: cdouttime :: cdwarehouse :: isprintbill :: isprintnote :: intprintbillcount :: cdinvno :: szbillyear :: szbillmonth :: issavemanifest :: cdmfid :: cdsaleoff :: cdcurrency :: ftransmoney :: ftotalmoney :: ipvpointtotal :: ipvpointuptotal :: sznote :: cdcashdesk :: cdmachine :: cdemployee :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: ffee1 :: ffee2 :: ffee3 :: cdinvchk :: isInvoicePrinted :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), PrimaryKey, Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column cdPrefix DBType(char), Length(2,false) */
    val cdprefix: Column[String] = column[String]("cdPrefix", O.Length(2,varying=false))
    /** Database column isVaild DBType(bit), Default(true) */
    val isvaild: Column[Boolean] = column[Boolean]("isVaild", O.Default(true))
    /** Database column cdOrderNo_Root DBType(char), Length(14,false) */
    val cdordernoRoot: Column[String] = column[String]("cdOrderNo_Root", O.Length(14,varying=false))
    /** Database column iOrderNoSeq DBType(int) */
    val iordernoseq: Column[Int] = column[Int]("iOrderNoSeq")
    /** Database column cdOrderNo_Father DBType(char), Length(14,false) */
    val cdordernoFather: Column[String] = column[String]("cdOrderNo_Father", O.Length(14,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column szJoinBelone DBType(nchar), Length(128,false) */
    val szjoinbelone: Column[Option[String]] = column[Option[String]]("szJoinBelone", O.Length(128,varying=false))
    /** Database column szName DBType(nchar), Length(128,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(128,varying=false))
    /** Database column szControler DBType(nchar), Length(128,false) */
    val szcontroler: Column[Option[String]] = column[Option[String]]("szControler", O.Length(128,varying=false))
    /** Database column szServiceName DBType(nchar), Length(128,false) */
    val szservicename: Column[Option[String]] = column[Option[String]]("szServiceName", O.Length(128,varying=false))
    /** Database column szSreviceLevel DBType(nchar), Length(128,false) */
    val szsrevicelevel: Column[Option[String]] = column[Option[String]]("szSreviceLevel", O.Length(128,varying=false))
    /** Database column cdCid DBType(char), Length(10,false), Default(Some()) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[Option[String]] = column[Option[String]]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[Option[String]] = column[Option[String]]("szBonusMonth", O.Length(2,varying=false))
    /** Database column cdOrderBy DBType(char), Length(1,false) */
    val cdorderby: Column[Option[String]] = column[Option[String]]("cdOrderBy", O.Length(1,varying=false))
    /** Database column cdEmergency DBType(char), Length(1,false) */
    val cdemergency: Column[Option[String]] = column[Option[String]]("cdEmergency", O.Length(1,varying=false))
    /** Database column cdTakeBy DBType(char), Length(1,false) */
    val cdtakeby: Column[Option[String]] = column[Option[String]]("cdTakeBy", O.Length(1,varying=false))
    /** Database column isTakeDetail DBType(bit), Default(Some(false)) */
    val istakedetail: Column[Option[Boolean]] = column[Option[Boolean]]("isTakeDetail", O.Default(Some(false)))
    /** Database column szAddressee DBType(nchar), Length(80,false) */
    val szaddressee: Column[Option[String]] = column[Option[String]]("szAddressee", O.Length(80,varying=false))
    /** Database column szTel DBType(nchar), Length(128,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(128,varying=false))
    /** Database column szExt DBType(nchar), Length(10,false) */
    val szext: Column[Option[String]] = column[Option[String]]("szExt", O.Length(10,varying=false))
    /** Database column szCell DBType(nchar), Length(128,false) */
    val szcell: Column[Option[String]] = column[Option[String]]("szCell", O.Length(128,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(10,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szAddress DBType(nchar), Length(128,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column cdTakeList DBType(char), Length(1,false) */
    val cdtakelist: Column[Option[String]] = column[Option[String]]("cdTakeList", O.Length(1,varying=false))
    /** Database column isListDetail DBType(bit), Default(Some(false)) */
    val islistdetail: Column[Option[Boolean]] = column[Option[Boolean]]("isListDetail", O.Default(Some(false)))
    /** Database column dtGoodOut DBType(datetime) */
    val dtgoodout: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtGoodOut")
    /** Database column cdOutTime DBType(char), Length(1,false) */
    val cdouttime: Column[Option[String]] = column[Option[String]]("cdOutTime", O.Length(1,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[Option[String]] = column[Option[String]]("cdWareHouse", O.Length(4,varying=false))
    /** Database column isPrintBill DBType(bit) */
    val isprintbill: Column[Option[Boolean]] = column[Option[Boolean]]("isPrintBill")
    /** Database column isPrintNote DBType(bit) */
    val isprintnote: Column[Option[Boolean]] = column[Option[Boolean]]("isPrintNote")
    /** Database column intPrintBillCount DBType(int) */
    val intprintbillcount: Column[Option[Int]] = column[Option[Int]]("intPrintBillCount")
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[Option[String]] = column[Option[String]]("cdInvNo", O.Length(10,varying=false))
    /** Database column szBillYear DBType(char), Length(4,false) */
    val szbillyear: Column[Option[String]] = column[Option[String]]("szBillYear", O.Length(4,varying=false))
    /** Database column szBillMonth DBType(char), Length(2,false) */
    val szbillmonth: Column[Option[String]] = column[Option[String]]("szBillMonth", O.Length(2,varying=false))
    /** Database column isSaveManifest DBType(bit) */
    val issavemanifest: Column[Option[Boolean]] = column[Option[Boolean]]("isSaveManifest")
    /** Database column cdMfId DBType(char), Length(14,false) */
    val cdmfid: Column[Option[String]] = column[Option[String]]("cdMfId", O.Length(14,varying=false))
    /** Database column cdSaleOff DBType(char), Length(2,false) */
    val cdsaleoff: Column[Option[String]] = column[Option[String]]("cdSaleOff", O.Length(2,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column fTransMoney DBType(float), Default(Some(0.0)) */
    val ftransmoney: Column[Option[Double]] = column[Option[Double]]("fTransMoney", O.Default(Some(0.0)))
    /** Database column fTotalMoney DBType(float), Default(Some(0.0)) */
    val ftotalmoney: Column[Option[Double]] = column[Option[Double]]("fTotalMoney", O.Default(Some(0.0)))
    /** Database column iPvPointTotal DBType(int) */
    val ipvpointtotal: Column[Option[Int]] = column[Option[Int]]("iPvPointTotal")
    /** Database column iPvPointUpTotal DBType(int) */
    val ipvpointuptotal: Column[Option[Int]] = column[Option[Int]]("iPvPointUpTotal")
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column cdCashDesk DBType(char), Length(2,false) */
    val cdcashdesk: Column[Option[String]] = column[Option[String]]("cdCashDesk", O.Length(2,varying=false))
    /** Database column cdMachine DBType(char), Length(50,false) */
    val cdmachine: Column[Option[String]] = column[Option[String]]("cdMachine", O.Length(50,varying=false))
    /** Database column cdEmployee DBType(char), Length(8,false) */
    val cdemployee: Column[Option[String]] = column[Option[String]]("cdEmployee", O.Length(8,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column fFee1 DBType(float), Default(Some(0.0)) */
    val ffee1: Column[Option[Double]] = column[Option[Double]]("fFee1", O.Default(Some(0.0)))
    /** Database column fFee2 DBType(float), Default(Some(0.0)) */
    val ffee2: Column[Option[Double]] = column[Option[Double]]("fFee2", O.Default(Some(0.0)))
    /** Database column fFee3 DBType(float), Default(Some(0.0)) */
    val ffee3: Column[Option[Double]] = column[Option[Double]]("fFee3", O.Default(Some(0.0)))
    /** Database column cdInvChk DBType(char), Length(1,false) */
    val cdinvchk: Column[Option[String]] = column[Option[String]]("cdInvChk", O.Length(1,varying=false))
    /** Database column is_invoice_printed DBType(bit) */
    val isInvoicePrinted: Column[Option[Boolean]] = column[Option[Boolean]]("is_invoice_printed")
    
    /** Index over (dtbusinessdate) (database name IX_tblOrderMaster) */
    val index1 = index("IX_tblOrderMaster", dtbusinessdate :: HNil)
    /** Index over (cdbonuscode) (database name IX_tblOrderMaster_1) */
    val index2 = index("IX_tblOrderMaster_1", cdbonuscode :: HNil)
    /** Index over (cdinvno) (database name cdInvNo) */
    val index3 = index("cdInvNo", cdinvno :: HNil)
    /** Index over (cdmember) (database name cdMember) */
    val index4 = index("cdMember", cdmember :: HNil)
    /** Index over (cdordernoRoot) (database name cdOrderNo_Root) */
    val index5 = index("cdOrderNo_Root", cdordernoRoot :: HNil)
  }
  /** Collection-like TableQuery object for table Tblordermaster */
  lazy val Tblordermaster = new TableQuery(tag => new Tblordermaster(tag))
  
  /** Row type of table TblordermasterTh */
  type TblordermasterThRow = HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Double],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblordermasterThRow providing default values if available in the database schema. */
  def TblordermasterThRow(cdorderno: Option[String], cdprefix: Option[String], cdmember: Option[String], szname: Option[String], cdcid: Option[String], dtbusinessdate: Option[String], szbonusyear: Option[String], szbonusmonth: Option[String], cdorderby: Option[String], cdemergency: Option[String], cdtakeby: Option[String], istakedetail: Option[Boolean], szaddressee: Option[String], sztel: Option[String], szext: Option[String], szcell: Option[String], cdcountry: Option[String], cdzip: Option[String], szaddress: Option[String], szfulladdr: Option[String], cdtakelist: Option[String], dtgoodout: Option[String], cdinvno: Option[String], cdcurrency: Option[String], ftotalmoney: Option[Double], ipvpointtotal: Option[Int], ipvpointuptotal: Option[Int], sznote: Option[String]): TblordermasterThRow = {
    cdorderno :: cdprefix :: cdmember :: szname :: cdcid :: dtbusinessdate :: szbonusyear :: szbonusmonth :: cdorderby :: cdemergency :: cdtakeby :: istakedetail :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdzip :: szaddress :: szfulladdr :: cdtakelist :: dtgoodout :: cdinvno :: cdcurrency :: ftotalmoney :: ipvpointtotal :: ipvpointuptotal :: sznote :: HNil
  }
  /** GetResult implicit for fetching TblordermasterThRow objects using plain SQL queries */
  implicit def GetResultTblordermasterThRow(implicit e0: GR[Option[String]], e1: GR[Option[Boolean]], e2: GR[Option[Double]], e3: GR[Option[Int]]): GR[TblordermasterThRow] = GR{
    prs => import prs._
    <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Double] :: <<?[Int] :: <<?[Int] :: <<?[String] :: HNil
  }
  /** Table description of table tblOrderMaster_th. Objects of this class serve as prototypes for rows in queries. */
  class TblordermasterTh(_tableTag: Tag) extends Table[TblordermasterThRow](_tableTag, Some("dbo"), "tblOrderMaster_th") {
    def * = cdorderno :: cdprefix :: cdmember :: szname :: cdcid :: dtbusinessdate :: szbonusyear :: szbonusmonth :: cdorderby :: cdemergency :: cdtakeby :: istakedetail :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdzip :: szaddress :: szfulladdr :: cdtakelist :: dtgoodout :: cdinvno :: cdcurrency :: ftotalmoney :: ipvpointtotal :: ipvpointuptotal :: sznote :: HNil
    
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(14,varying=false))
    /** Database column cdPrefix DBType(char), Length(2,false) */
    val cdprefix: Column[Option[String]] = column[Option[String]]("cdPrefix", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szName DBType(nchar), Length(128,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(128,varying=false))
    /** Database column cdCid DBType(char), Length(10,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(char), Length(10,false) */
    val dtbusinessdate: Column[Option[String]] = column[Option[String]]("dtBusinessDate", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(char), Length(4,false) */
    val szbonusyear: Column[Option[String]] = column[Option[String]]("szBonusYear", O.Length(4,varying=false))
    /** Database column szBonusMonth DBType(char), Length(2,false) */
    val szbonusmonth: Column[Option[String]] = column[Option[String]]("szBonusMonth", O.Length(2,varying=false))
    /** Database column cdOrderBy DBType(char), Length(1,false) */
    val cdorderby: Column[Option[String]] = column[Option[String]]("cdOrderBy", O.Length(1,varying=false))
    /** Database column cdEmergency DBType(char), Length(1,false) */
    val cdemergency: Column[Option[String]] = column[Option[String]]("cdEmergency", O.Length(1,varying=false))
    /** Database column cdTakeBy DBType(char), Length(1,false) */
    val cdtakeby: Column[Option[String]] = column[Option[String]]("cdTakeBy", O.Length(1,varying=false))
    /** Database column isTakeDetail DBType(bit) */
    val istakedetail: Column[Option[Boolean]] = column[Option[Boolean]]("isTakeDetail")
    /** Database column szAddressee DBType(nchar), Length(80,false) */
    val szaddressee: Column[Option[String]] = column[Option[String]]("szAddressee", O.Length(80,varying=false))
    /** Database column szTel DBType(nchar), Length(128,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(128,varying=false))
    /** Database column szExt DBType(nchar), Length(10,false) */
    val szext: Column[Option[String]] = column[Option[String]]("szExt", O.Length(10,varying=false))
    /** Database column szCell DBType(nchar), Length(128,false) */
    val szcell: Column[Option[String]] = column[Option[String]]("szCell", O.Length(128,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szAddress DBType(nchar), Length(128,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column cdTakeList DBType(char), Length(1,false) */
    val cdtakelist: Column[Option[String]] = column[Option[String]]("cdTakeList", O.Length(1,varying=false))
    /** Database column dtGoodOut DBType(char), Length(10,false) */
    val dtgoodout: Column[Option[String]] = column[Option[String]]("dtGoodOut", O.Length(10,varying=false))
    /** Database column cdInvNo DBType(char), Length(10,false) */
    val cdinvno: Column[Option[String]] = column[Option[String]]("cdInvNo", O.Length(10,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column fTotalMoney DBType(float) */
    val ftotalmoney: Column[Option[Double]] = column[Option[Double]]("fTotalMoney")
    /** Database column iPvPointTotal DBType(int) */
    val ipvpointtotal: Column[Option[Int]] = column[Option[Int]]("iPvPointTotal")
    /** Database column iPvPointUpTotal DBType(int) */
    val ipvpointuptotal: Column[Option[Int]] = column[Option[Int]]("iPvPointUpTotal")
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
  }
  /** Collection-like TableQuery object for table TblordermasterTh */
  lazy val TblordermasterTh = new TableQuery(tag => new TblordermasterTh(tag))
  
  /** Entity class storing rows of table Tblorganization
   *  @param cdcompany Database column cdCompany DBType(char), Length(4,false)
   *  @param cdtype Database column cdType DBType(char), Length(1,false)
   *  @param cdorgcode Database column cdOrgCode DBType(char), Length(8,false)
   *  @param cdkind Database column cdKind DBType(char), Length(1,false)
   *  @param cdorgtype Database column cdOrgType DBType(char), Length(3,false)
   *  @param cdattribute Database column cdAttribute DBType(char), Length(1,false)
   *  @param cdorgcoderelation Database column cdOrgCodeRelation DBType(char), Length(8,false)
   *  @param dtactivatestart Database column dtActivateStart DBType(datetime)
   *  @param dtactivateend Database column dtActivateEnd DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblorganizationRow(cdcompany: Option[String], cdtype: String, cdorgcode: String, cdkind: String, cdorgtype: String, cdattribute: String, cdorgcoderelation: String, dtactivatestart: java.sql.Timestamp, dtactivateend: java.sql.Timestamp, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblorganizationRow objects using plain SQL queries */
  implicit def GetResultTblorganizationRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[java.sql.Timestamp], e3: GR[Option[java.sql.Timestamp]]): GR[TblorganizationRow] = GR{
    prs => import prs._
    TblorganizationRow.tupled((<<?[String], <<[String], <<[String], <<[String], <<[String], <<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblOrganization. Objects of this class serve as prototypes for rows in queries. */
  class Tblorganization(_tableTag: Tag) extends Table[TblorganizationRow](_tableTag, Some("dbo"), "tblOrganization") {
    def * = (cdcompany, cdtype, cdorgcode, cdkind, cdorgtype, cdattribute, cdorgcoderelation, dtactivatestart, dtactivateend, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblorganizationRow.tupled, TblorganizationRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdcompany, cdtype.?, cdorgcode.?, cdkind.?, cdorgtype.?, cdattribute.?, cdorgcoderelation.?, dtactivatestart.?, dtactivateend.?, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _2.map(_=> TblorganizationRow.tupled((_1, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8.get, _9.get, _10, _11, _12, _13)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdCompany DBType(char), Length(4,false) */
    val cdcompany: Column[Option[String]] = column[Option[String]]("cdCompany", O.Length(4,varying=false))
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(1,varying=false))
    /** Database column cdOrgCode DBType(char), Length(8,false) */
    val cdorgcode: Column[String] = column[String]("cdOrgCode", O.Length(8,varying=false))
    /** Database column cdKind DBType(char), Length(1,false) */
    val cdkind: Column[String] = column[String]("cdKind", O.Length(1,varying=false))
    /** Database column cdOrgType DBType(char), Length(3,false) */
    val cdorgtype: Column[String] = column[String]("cdOrgType", O.Length(3,varying=false))
    /** Database column cdAttribute DBType(char), Length(1,false) */
    val cdattribute: Column[String] = column[String]("cdAttribute", O.Length(1,varying=false))
    /** Database column cdOrgCodeRelation DBType(char), Length(8,false) */
    val cdorgcoderelation: Column[String] = column[String]("cdOrgCodeRelation", O.Length(8,varying=false))
    /** Database column dtActivateStart DBType(datetime) */
    val dtactivatestart: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtActivateStart")
    /** Database column dtActivateEnd DBType(datetime) */
    val dtactivateend: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtActivateEnd")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblorganization (database name PK_tblOrganization_1) */
    val pk = primaryKey("PK_tblOrganization_1", (cdtype, cdorgcode, cdkind, cdorgtype, cdattribute, cdorgcoderelation, dtactivatestart, dtactivateend))
    
    /** Uniqueness Index over (cdcompany,cdtype,cdorgcode,cdkind,cdorgtype,cdattribute,cdorgcoderelation) (database name PK_tblOrganization) */
    val index1 = index("PK_tblOrganization", (cdcompany, cdtype, cdorgcode, cdkind, cdorgtype, cdattribute, cdorgcoderelation), unique=true)
  }
  /** Collection-like TableQuery object for table Tblorganization */
  lazy val Tblorganization = new TableQuery(tag => new Tblorganization(tag))
  
  /** Entity class storing rows of table Tblorganizationdef
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcompany Database column cdCompany DBType(char), Length(4,false)
   *  @param cdtype Database column cdType DBType(char), Length(1,false)
   *  @param cdcode Database column cdCode DBType(char), Length(8,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblorganizationdefRow(uid: String, cdcompany: String, cdtype: String, cdcode: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblorganizationdefRow objects using plain SQL queries */
  implicit def GetResultTblorganizationdefRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblorganizationdefRow] = GR{
    prs => import prs._
    TblorganizationdefRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblOrganizationDef. Objects of this class serve as prototypes for rows in queries. */
  class Tblorganizationdef(_tableTag: Tag) extends Table[TblorganizationdefRow](_tableTag, Some("dbo"), "tblOrganizationDef") {
    def * = (uid, cdcompany, cdtype, cdcode, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblorganizationdefRow.tupled, TblorganizationdefRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcompany.?, cdtype.?, cdcode.?, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblorganizationdefRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCompany DBType(char), Length(4,false) */
    val cdcompany: Column[String] = column[String]("cdCompany", O.Length(4,varying=false))
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(1,varying=false))
    /** Database column cdCode DBType(char), Length(8,false) */
    val cdcode: Column[String] = column[String]("cdCode", O.Length(8,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblorganizationdef (database name PK_tblOrganizationDef) */
    val pk = primaryKey("PK_tblOrganizationDef", (cdcompany, cdtype, cdcode))
  }
  /** Collection-like TableQuery object for table Tblorganizationdef */
  lazy val Tblorganizationdef = new TableQuery(tag => new Tblorganizationdef(tag))
  
  /** Entity class storing rows of table Tblorganizationdefd
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidorganizationdef Database column uidOrganizationDef DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szname Database column szName DBType(nchar), Length(20,false)
   *  @param szdesc Database column szDesc DBType(nchar), Length(40,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblorganizationdefdRow(uid: String, uidorganizationdef: Option[String], cdlanguage: Option[String], szname: Option[String], szdesc: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblorganizationdefdRow objects using plain SQL queries */
  implicit def GetResultTblorganizationdefdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblorganizationdefdRow] = GR{
    prs => import prs._
    TblorganizationdefdRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblOrganizationDefD. Objects of this class serve as prototypes for rows in queries. */
  class Tblorganizationdefd(_tableTag: Tag) extends Table[TblorganizationdefdRow](_tableTag, Some("dbo"), "tblOrganizationDefD") {
    def * = (uid, uidorganizationdef, cdlanguage, szname, szdesc, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblorganizationdefdRow.tupled, TblorganizationdefdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidorganizationdef, cdlanguage, szname, szdesc, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblorganizationdefdRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidOrganizationDef DBType(uniqueidentifier), Length(36,false) */
    val uidorganizationdef: Column[Option[String]] = column[Option[String]]("uidOrganizationDef", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column szName DBType(nchar), Length(20,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(20,varying=false))
    /** Database column szDesc DBType(nchar), Length(40,false) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(40,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblorganizationdefd */
  lazy val Tblorganizationdefd = new TableQuery(tag => new Tblorganizationdefd(tag))
  
  /** Row type of table Tblorgchart */
  type TblorgchartRow = HCons[String,HCons[String,HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HNil]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblorgchartRow providing default values if available in the database schema. */
  def TblorgchartRow(cdbonuscode: String, cdmember: String, ipvbonustw: Option[Int] = Some(0), ipvilifebonustw: Option[Int] = Some(0), ipvbonusus: Option[Int] = Some(0), ipvilifebonusus: Option[Int] = Some(0), ipvbonusth: Option[Int] = Some(0), ipvilifebonusth: Option[Int] = Some(0), ipvtw: Option[Int] = Some(0), iuppvtw: Option[Int] = Some(0), ipvilifetw: Option[Int] = Some(0), ipvus: Option[Int] = Some(0), iuppvus: Option[Int] = Some(0), ipvilifeus: Option[Int] = Some(0), ipvth: Option[Int] = Some(0), iuppvth: Option[Int] = Some(0), ipvilifeth: Option[Int] = Some(0), imoveinouttw: Option[Short] = Some(0), imoveinoutus: Option[Short] = Some(0), imoveinoutth: Option[Short] = Some(0), irecommandtw: Option[Short] = Some(0), irecommandus: Option[Short] = Some(0), irecommandth: Option[Short] = Some(0)): TblorgchartRow = {
    cdbonuscode :: cdmember :: ipvbonustw :: ipvilifebonustw :: ipvbonusus :: ipvilifebonusus :: ipvbonusth :: ipvilifebonusth :: ipvtw :: iuppvtw :: ipvilifetw :: ipvus :: iuppvus :: ipvilifeus :: ipvth :: iuppvth :: ipvilifeth :: imoveinouttw :: imoveinoutus :: imoveinoutth :: irecommandtw :: irecommandus :: irecommandth :: HNil
  }
  /** GetResult implicit for fetching TblorgchartRow objects using plain SQL queries */
  implicit def GetResultTblorgchartRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[Short]]): GR[TblorgchartRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: HNil
  }
  /** Table description of table tblOrgChart. Objects of this class serve as prototypes for rows in queries. */
  class Tblorgchart(_tableTag: Tag) extends Table[TblorgchartRow](_tableTag, Some("dbo"), "tblOrgChart") {
    def * = cdbonuscode :: cdmember :: ipvbonustw :: ipvilifebonustw :: ipvbonusus :: ipvilifebonusus :: ipvbonusth :: ipvilifebonusth :: ipvtw :: iuppvtw :: ipvilifetw :: ipvus :: iuppvus :: ipvilifeus :: ipvth :: iuppvth :: ipvilifeth :: imoveinouttw :: imoveinoutus :: imoveinoutth :: irecommandtw :: irecommandus :: irecommandth :: HNil
    
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column iPvBonusTW DBType(int), Default(Some(0)) */
    val ipvbonustw: Column[Option[Int]] = column[Option[Int]]("iPvBonusTW", O.Default(Some(0)))
    /** Database column iPviLifeBonusTW DBType(int), Default(Some(0)) */
    val ipvilifebonustw: Column[Option[Int]] = column[Option[Int]]("iPviLifeBonusTW", O.Default(Some(0)))
    /** Database column iPvBonusUS DBType(int), Default(Some(0)) */
    val ipvbonusus: Column[Option[Int]] = column[Option[Int]]("iPvBonusUS", O.Default(Some(0)))
    /** Database column iPviLifeBonusUS DBType(int), Default(Some(0)) */
    val ipvilifebonusus: Column[Option[Int]] = column[Option[Int]]("iPviLifeBonusUS", O.Default(Some(0)))
    /** Database column iPvBonusTH DBType(int), Default(Some(0)) */
    val ipvbonusth: Column[Option[Int]] = column[Option[Int]]("iPvBonusTH", O.Default(Some(0)))
    /** Database column iPviLifeBonusTH DBType(int), Default(Some(0)) */
    val ipvilifebonusth: Column[Option[Int]] = column[Option[Int]]("iPviLifeBonusTH", O.Default(Some(0)))
    /** Database column iPvTW DBType(int), Default(Some(0)) */
    val ipvtw: Column[Option[Int]] = column[Option[Int]]("iPvTW", O.Default(Some(0)))
    /** Database column iUpPvTW DBType(int), Default(Some(0)) */
    val iuppvtw: Column[Option[Int]] = column[Option[Int]]("iUpPvTW", O.Default(Some(0)))
    /** Database column iPviLifeTW DBType(int), Default(Some(0)) */
    val ipvilifetw: Column[Option[Int]] = column[Option[Int]]("iPviLifeTW", O.Default(Some(0)))
    /** Database column iPvUS DBType(int), Default(Some(0)) */
    val ipvus: Column[Option[Int]] = column[Option[Int]]("iPvUS", O.Default(Some(0)))
    /** Database column iUpPvUS DBType(int), Default(Some(0)) */
    val iuppvus: Column[Option[Int]] = column[Option[Int]]("iUpPvUS", O.Default(Some(0)))
    /** Database column iPviLifeUS DBType(int), Default(Some(0)) */
    val ipvilifeus: Column[Option[Int]] = column[Option[Int]]("iPviLifeUS", O.Default(Some(0)))
    /** Database column iPvTH DBType(int), Default(Some(0)) */
    val ipvth: Column[Option[Int]] = column[Option[Int]]("iPvTH", O.Default(Some(0)))
    /** Database column iUpPvTH DBType(int), Default(Some(0)) */
    val iuppvth: Column[Option[Int]] = column[Option[Int]]("iUpPvTH", O.Default(Some(0)))
    /** Database column iPviLifeTH DBType(int), Default(Some(0)) */
    val ipvilifeth: Column[Option[Int]] = column[Option[Int]]("iPviLifeTH", O.Default(Some(0)))
    /** Database column iMoveInOutTW DBType(smallint), Default(Some(0)) */
    val imoveinouttw: Column[Option[Short]] = column[Option[Short]]("iMoveInOutTW", O.Default(Some(0)))
    /** Database column iMoveInOutUS DBType(smallint), Default(Some(0)) */
    val imoveinoutus: Column[Option[Short]] = column[Option[Short]]("iMoveInOutUS", O.Default(Some(0)))
    /** Database column iMoveInOutTH DBType(smallint), Default(Some(0)) */
    val imoveinoutth: Column[Option[Short]] = column[Option[Short]]("iMoveInOutTH", O.Default(Some(0)))
    /** Database column iRecommandTW DBType(smallint), Default(Some(0)) */
    val irecommandtw: Column[Option[Short]] = column[Option[Short]]("iRecommandTW", O.Default(Some(0)))
    /** Database column iRecommandUS DBType(smallint), Default(Some(0)) */
    val irecommandus: Column[Option[Short]] = column[Option[Short]]("iRecommandUS", O.Default(Some(0)))
    /** Database column iRecommandTH DBType(smallint), Default(Some(0)) */
    val irecommandth: Column[Option[Short]] = column[Option[Short]]("iRecommandTH", O.Default(Some(0)))
    
    /** Primary key of Tblorgchart (database name PK_tblBonudChart) */
    val pk = primaryKey("PK_tblBonudChart", cdbonuscode :: cdmember :: HNil)
  }
  /** Collection-like TableQuery object for table Tblorgchart */
  lazy val Tblorgchart = new TableQuery(tag => new Tblorgchart(tag))
  
  /** Entity class storing rows of table Tblorgchartd
   *  @param cdmember Database column cdMember DBType(char), Length(10,false), Default()
   *  @param iseq Database column iSeq DBType(int identity), AutoInc
   *  @param sztext1 Database column szText1 DBType(nvarchar), Length(255,true), Default(Some())
   *  @param sztext2 Database column szText2 DBType(char), Length(50,false), Default(Some())
   *  @param sztext3 Database column szText3 DBType(char), Length(50,false), Default(Some())
   *  @param sztext4 Database column szText4 DBType(char), Length(50,false), Default(Some())
   *  @param id Database column id DBType(numeric)
   *  @param iSeq Database column i_seq DBType(int) */
  case class TblorgchartdRow(cdmember: String = "", iseq: Int, sztext1: Option[String] = Some(""), sztext2: Option[String] = Some(""), sztext3: Option[String] = Some(""), sztext4: Option[String] = Some(""), id: Option[scala.math.BigDecimal], iSeq: Option[Int])
  /** GetResult implicit for fetching TblorgchartdRow objects using plain SQL queries */
  implicit def GetResultTblorgchartdRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[scala.math.BigDecimal]], e4: GR[Option[Int]]): GR[TblorgchartdRow] = GR{
    prs => import prs._
    TblorgchartdRow.tupled((<<[String], <<[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[scala.math.BigDecimal], <<?[Int]))
  }
  /** Table description of table tblOrgChartD. Objects of this class serve as prototypes for rows in queries. */
  class Tblorgchartd(_tableTag: Tag) extends Table[TblorgchartdRow](_tableTag, Some("dbo"), "tblOrgChartD") {
    def * = (cdmember, iseq, sztext1, sztext2, sztext3, sztext4, id, iSeq) <> (TblorgchartdRow.tupled, TblorgchartdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdmember.?, iseq.?, sztext1, sztext2, sztext3, sztext4, id, iSeq).shaped.<>({r=>import r._; _1.map(_=> TblorgchartdRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdMember DBType(char), Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false), O.Default(""))
    /** Database column iSeq DBType(int identity), AutoInc */
    val iseq: Column[Int] = column[Int]("iSeq", O.AutoInc)
    /** Database column szText1 DBType(nvarchar), Length(255,true), Default(Some()) */
    val sztext1: Column[Option[String]] = column[Option[String]]("szText1", O.Length(255,varying=true), O.Default(Some("")))
    /** Database column szText2 DBType(char), Length(50,false), Default(Some()) */
    val sztext2: Column[Option[String]] = column[Option[String]]("szText2", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szText3 DBType(char), Length(50,false), Default(Some()) */
    val sztext3: Column[Option[String]] = column[Option[String]]("szText3", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szText4 DBType(char), Length(50,false), Default(Some()) */
    val sztext4: Column[Option[String]] = column[Option[String]]("szText4", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column id DBType(numeric) */
    val id: Column[Option[scala.math.BigDecimal]] = column[Option[scala.math.BigDecimal]]("id")
    /** Database column i_seq DBType(int) */
    val iSeq: Column[Option[Int]] = column[Option[Int]]("i_seq")
    
    /** Primary key of Tblorgchartd (database name PK_tblOrgChartD) */
    val pk = primaryKey("PK_tblOrgChartD", (cdmember, iseq))
  }
  /** Collection-like TableQuery object for table Tblorgchartd */
  lazy val Tblorgchartd = new TableQuery(tag => new Tblorgchartd(tag))
  
  /** Entity class storing rows of table Tblorgchartm
   *  @param cdmember Database column cdMember DBType(char), PrimaryKey, Length(10,false), Default()
   *  @param imembers Database column iMembers DBType(int), Default(Some(0))
   *  @param ipvgroup Database column iPvGroup DBType(int), Default(Some(0))
   *  @param cdcumpvbonuscode Database column cdCumPvBonusCode DBType(char), Length(10,false), Default(Some())
   *  @param sztext2 Database column szText2 DBType(char), Length(50,false), Default(Some())
   *  @param sztext3 Database column szText3 DBType(char), Length(50,false), Default(Some())
   *  @param cdstatus Database column cdStatus DBType(char), Length(2,false), Default(Some(Q))
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false), Default(Some())
   *  @param ilevels Database column iLevels DBType(int), Default(Some(6))
   *  @param cdcumpvgroup Database column cdCumPvGroup DBType(char), Length(1,false), Default(Some(Y))
   *  @param cdtel Database column cdTel DBType(char), Length(1,false), Default(Some(N))
   *  @param cdaddress Database column cdAddress DBType(char), Length(1,false), Default(Some(N))
   *  @param cdcontract Database column cdContract DBType(char), Length(1,false), Default(Some(N))
   *  @param cdrecal Database column cdReCal DBType(char), Length(1,false), Default(Some(N))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param id Database column id DBType(numeric)
   *  @param memberCode Database column member_code DBType(varchar), Length(255,true) */
  case class TblorgchartmRow(cdmember: String = "", imembers: Option[Int] = Some(0), ipvgroup: Option[Int] = Some(0), cdcumpvbonuscode: Option[String] = Some(""), sztext2: Option[String] = Some(""), sztext3: Option[String] = Some(""), cdstatus: Option[String] = Some("Q"), dtmodify: Option[java.sql.Timestamp], cdbonuscode: Option[String] = Some(""), ilevels: Option[Int] = Some(6), cdcumpvgroup: Option[String] = Some("Y"), cdtel: Option[String] = Some("N"), cdaddress: Option[String] = Some("N"), cdcontract: Option[String] = Some("N"), cdrecal: Option[String] = Some("N"), uidcreator: Option[String], id: Option[scala.math.BigDecimal], memberCode: Option[String])
  /** GetResult implicit for fetching TblorgchartmRow objects using plain SQL queries */
  implicit def GetResultTblorgchartmRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[scala.math.BigDecimal]]): GR[TblorgchartmRow] = GR{
    prs => import prs._
    TblorgchartmRow.tupled((<<[String], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[scala.math.BigDecimal], <<?[String]))
  }
  /** Table description of table tblOrgChartM. Objects of this class serve as prototypes for rows in queries. */
  class Tblorgchartm(_tableTag: Tag) extends Table[TblorgchartmRow](_tableTag, Some("dbo"), "tblOrgChartM") {
    def * = (cdmember, imembers, ipvgroup, cdcumpvbonuscode, sztext2, sztext3, cdstatus, dtmodify, cdbonuscode, ilevels, cdcumpvgroup, cdtel, cdaddress, cdcontract, cdrecal, uidcreator, id, memberCode) <> (TblorgchartmRow.tupled, TblorgchartmRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdmember.?, imembers, ipvgroup, cdcumpvbonuscode, sztext2, sztext3, cdstatus, dtmodify, cdbonuscode, ilevels, cdcumpvgroup, cdtel, cdaddress, cdcontract, cdrecal, uidcreator, id, memberCode).shaped.<>({r=>import r._; _1.map(_=> TblorgchartmRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdMember DBType(char), PrimaryKey, Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.PrimaryKey, O.Length(10,varying=false), O.Default(""))
    /** Database column iMembers DBType(int), Default(Some(0)) */
    val imembers: Column[Option[Int]] = column[Option[Int]]("iMembers", O.Default(Some(0)))
    /** Database column iPvGroup DBType(int), Default(Some(0)) */
    val ipvgroup: Column[Option[Int]] = column[Option[Int]]("iPvGroup", O.Default(Some(0)))
    /** Database column cdCumPvBonusCode DBType(char), Length(10,false), Default(Some()) */
    val cdcumpvbonuscode: Column[Option[String]] = column[Option[String]]("cdCumPvBonusCode", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szText2 DBType(char), Length(50,false), Default(Some()) */
    val sztext2: Column[Option[String]] = column[Option[String]]("szText2", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column szText3 DBType(char), Length(50,false), Default(Some()) */
    val sztext3: Column[Option[String]] = column[Option[String]]("szText3", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column cdStatus DBType(char), Length(2,false), Default(Some(Q)) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(2,varying=false), O.Default(Some("Q")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdBonusCode DBType(char), Length(10,false), Default(Some()) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column iLevels DBType(int), Default(Some(6)) */
    val ilevels: Column[Option[Int]] = column[Option[Int]]("iLevels", O.Default(Some(6)))
    /** Database column cdCumPvGroup DBType(char), Length(1,false), Default(Some(Y)) */
    val cdcumpvgroup: Column[Option[String]] = column[Option[String]]("cdCumPvGroup", O.Length(1,varying=false), O.Default(Some("Y")))
    /** Database column cdTel DBType(char), Length(1,false), Default(Some(N)) */
    val cdtel: Column[Option[String]] = column[Option[String]]("cdTel", O.Length(1,varying=false), O.Default(Some("N")))
    /** Database column cdAddress DBType(char), Length(1,false), Default(Some(N)) */
    val cdaddress: Column[Option[String]] = column[Option[String]]("cdAddress", O.Length(1,varying=false), O.Default(Some("N")))
    /** Database column cdContract DBType(char), Length(1,false), Default(Some(N)) */
    val cdcontract: Column[Option[String]] = column[Option[String]]("cdContract", O.Length(1,varying=false), O.Default(Some("N")))
    /** Database column cdReCal DBType(char), Length(1,false), Default(Some(N)) */
    val cdrecal: Column[Option[String]] = column[Option[String]]("cdReCal", O.Length(1,varying=false), O.Default(Some("N")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column id DBType(numeric) */
    val id: Column[Option[scala.math.BigDecimal]] = column[Option[scala.math.BigDecimal]]("id")
    /** Database column member_code DBType(varchar), Length(255,true) */
    val memberCode: Column[Option[String]] = column[Option[String]]("member_code", O.Length(255,varying=true))
  }
  /** Collection-like TableQuery object for table Tblorgchartm */
  lazy val Tblorgchartm = new TableQuery(tag => new Tblorgchartm(tag))
  
  /** Entity class storing rows of table Tblorgchartw1
   *  @param cdchild Database column cdChild DBType(char), PrimaryKey, Length(10,false)
   *  @param igenerationl40 Database column iGenerationL40 DBType(int) */
  case class Tblorgchartw1Row(cdchild: String, igenerationl40: Option[Int])
  /** GetResult implicit for fetching Tblorgchartw1Row objects using plain SQL queries */
  implicit def GetResultTblorgchartw1Row(implicit e0: GR[String], e1: GR[Option[Int]]): GR[Tblorgchartw1Row] = GR{
    prs => import prs._
    Tblorgchartw1Row.tupled((<<[String], <<?[Int]))
  }
  /** Table description of table tblOrgChartW1. Objects of this class serve as prototypes for rows in queries. */
  class Tblorgchartw1(_tableTag: Tag) extends Table[Tblorgchartw1Row](_tableTag, Some("dbo"), "tblOrgChartW1") {
    def * = (cdchild, igenerationl40) <> (Tblorgchartw1Row.tupled, Tblorgchartw1Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdchild.?, igenerationl40).shaped.<>({r=>import r._; _1.map(_=> Tblorgchartw1Row.tupled((_1.get, _2)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdChild DBType(char), PrimaryKey, Length(10,false) */
    val cdchild: Column[String] = column[String]("cdChild", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column iGenerationL40 DBType(int) */
    val igenerationl40: Column[Option[Int]] = column[Option[Int]]("iGenerationL40")
  }
  /** Collection-like TableQuery object for table Tblorgchartw1 */
  lazy val Tblorgchartw1 = new TableQuery(tag => new Tblorgchartw1(tag))
  
  /** Entity class storing rows of table Tblorgchartw2
   *  @param igeneration Database column iGeneration DBType(int)
   *  @param cdparent Database column cdParent DBType(char), Length(10,false)
   *  @param cdchild Database column cdChild DBType(char), PrimaryKey, Length(10,false)
   *  @param szfullname Database column szFullName DBType(nchar), Length(10,false)
   *  @param cdpersg Database column cdPerSg DBType(char), Length(2,false)
   *  @param icurrpv Database column iCurrPv DBType(int)
   *  @param icumpv Database column iCumPv DBType(bigint)
   *  @param igenerationl40 Database column iGenerationL40 DBType(int) */
  case class Tblorgchartw2Row(igeneration: Option[Int], cdparent: Option[String], cdchild: String, szfullname: Option[String], cdpersg: Option[String], icurrpv: Option[Int], icumpv: Option[Long], igenerationl40: Option[Int])
  /** GetResult implicit for fetching Tblorgchartw2Row objects using plain SQL queries */
  implicit def GetResultTblorgchartw2Row(implicit e0: GR[Option[Int]], e1: GR[Option[String]], e2: GR[String], e3: GR[Option[Long]]): GR[Tblorgchartw2Row] = GR{
    prs => import prs._
    Tblorgchartw2Row.tupled((<<?[Int], <<?[String], <<[String], <<?[String], <<?[String], <<?[Int], <<?[Long], <<?[Int]))
  }
  /** Table description of table tblOrgChartW2. Objects of this class serve as prototypes for rows in queries. */
  class Tblorgchartw2(_tableTag: Tag) extends Table[Tblorgchartw2Row](_tableTag, Some("dbo"), "tblOrgChartW2") {
    def * = (igeneration, cdparent, cdchild, szfullname, cdpersg, icurrpv, icumpv, igenerationl40) <> (Tblorgchartw2Row.tupled, Tblorgchartw2Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (igeneration, cdparent, cdchild.?, szfullname, cdpersg, icurrpv, icumpv, igenerationl40).shaped.<>({r=>import r._; _3.map(_=> Tblorgchartw2Row.tupled((_1, _2, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column iGeneration DBType(int) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration")
    /** Database column cdParent DBType(char), Length(10,false) */
    val cdparent: Column[Option[String]] = column[Option[String]]("cdParent", O.Length(10,varying=false))
    /** Database column cdChild DBType(char), PrimaryKey, Length(10,false) */
    val cdchild: Column[String] = column[String]("cdChild", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column szFullName DBType(nchar), Length(10,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(10,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[Option[String]] = column[Option[String]]("cdPerSg", O.Length(2,varying=false))
    /** Database column iCurrPv DBType(int) */
    val icurrpv: Column[Option[Int]] = column[Option[Int]]("iCurrPv")
    /** Database column iCumPv DBType(bigint) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv")
    /** Database column iGenerationL40 DBType(int) */
    val igenerationl40: Column[Option[Int]] = column[Option[Int]]("iGenerationL40")
  }
  /** Collection-like TableQuery object for table Tblorgchartw2 */
  lazy val Tblorgchartw2 = new TableQuery(tag => new Tblorgchartw2(tag))
  
  /** Row type of table Tblorgchartw3 */
  type Tblorgchartw3Row = HCons[String,HCons[String,HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HCons[Option[Short],HNil]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblorgchartw3Row providing default values if available in the database schema. */
  def Tblorgchartw3Row(cdbonuscode: String = "", cdmember: String = "", ipvbonustw: Option[Int] = Some(0), ipvilifebonustw: Option[Int] = Some(0), ipvbonusus: Option[Int] = Some(0), ipvilifebonusus: Option[Int] = Some(0), ipvbonusth: Option[Int] = Some(0), ipvilifebonusth: Option[Int] = Some(0), ipvtw: Option[Int] = Some(0), iuppvtw: Option[Int] = Some(0), ipvilifetw: Option[Int] = Some(0), ipvus: Option[Int] = Some(0), iuppvus: Option[Int] = Some(0), ipvilifeus: Option[Int] = Some(0), ipvth: Option[Int] = Some(0), iuppvth: Option[Int] = Some(0), ipvilifeth: Option[Int] = Some(0), imoveinouttw: Option[Short] = Some(0), imoveinoutus: Option[Short] = Some(0), imoveinoutth: Option[Short] = Some(0), irecommandtw: Option[Short] = Some(0), irecommandus: Option[Short] = Some(0), irecommandth: Option[Short] = Some(0)): Tblorgchartw3Row = {
    cdbonuscode :: cdmember :: ipvbonustw :: ipvilifebonustw :: ipvbonusus :: ipvilifebonusus :: ipvbonusth :: ipvilifebonusth :: ipvtw :: iuppvtw :: ipvilifetw :: ipvus :: iuppvus :: ipvilifeus :: ipvth :: iuppvth :: ipvilifeth :: imoveinouttw :: imoveinoutus :: imoveinoutth :: irecommandtw :: irecommandus :: irecommandth :: HNil
  }
  /** GetResult implicit for fetching Tblorgchartw3Row objects using plain SQL queries */
  implicit def GetResultTblorgchartw3Row(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[Short]]): GR[Tblorgchartw3Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: <<?[Short] :: HNil
  }
  /** Table description of table tblOrgChartW3. Objects of this class serve as prototypes for rows in queries. */
  class Tblorgchartw3(_tableTag: Tag) extends Table[Tblorgchartw3Row](_tableTag, Some("dbo"), "tblOrgChartW3") {
    def * = cdbonuscode :: cdmember :: ipvbonustw :: ipvilifebonustw :: ipvbonusus :: ipvilifebonusus :: ipvbonusth :: ipvilifebonusth :: ipvtw :: iuppvtw :: ipvilifetw :: ipvus :: iuppvus :: ipvilifeus :: ipvth :: iuppvth :: ipvilifeth :: imoveinouttw :: imoveinoutus :: imoveinoutth :: irecommandtw :: irecommandus :: irecommandth :: HNil
    
    /** Database column cdBonusCode DBType(char), Length(10,false), Default() */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false), O.Default(""))
    /** Database column cdMember DBType(char), Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false), O.Default(""))
    /** Database column iPvBonusTW DBType(int), Default(Some(0)) */
    val ipvbonustw: Column[Option[Int]] = column[Option[Int]]("iPvBonusTW", O.Default(Some(0)))
    /** Database column iPviLifeBonusTW DBType(int), Default(Some(0)) */
    val ipvilifebonustw: Column[Option[Int]] = column[Option[Int]]("iPviLifeBonusTW", O.Default(Some(0)))
    /** Database column iPvBonusUS DBType(int), Default(Some(0)) */
    val ipvbonusus: Column[Option[Int]] = column[Option[Int]]("iPvBonusUS", O.Default(Some(0)))
    /** Database column iPviLifeBonusUS DBType(int), Default(Some(0)) */
    val ipvilifebonusus: Column[Option[Int]] = column[Option[Int]]("iPviLifeBonusUS", O.Default(Some(0)))
    /** Database column iPvBonusTH DBType(int), Default(Some(0)) */
    val ipvbonusth: Column[Option[Int]] = column[Option[Int]]("iPvBonusTH", O.Default(Some(0)))
    /** Database column iPviLifeBonusTH DBType(int), Default(Some(0)) */
    val ipvilifebonusth: Column[Option[Int]] = column[Option[Int]]("iPviLifeBonusTH", O.Default(Some(0)))
    /** Database column iPvTW DBType(int), Default(Some(0)) */
    val ipvtw: Column[Option[Int]] = column[Option[Int]]("iPvTW", O.Default(Some(0)))
    /** Database column iUpPvTW DBType(int), Default(Some(0)) */
    val iuppvtw: Column[Option[Int]] = column[Option[Int]]("iUpPvTW", O.Default(Some(0)))
    /** Database column iPviLifeTW DBType(int), Default(Some(0)) */
    val ipvilifetw: Column[Option[Int]] = column[Option[Int]]("iPviLifeTW", O.Default(Some(0)))
    /** Database column iPvUS DBType(int), Default(Some(0)) */
    val ipvus: Column[Option[Int]] = column[Option[Int]]("iPvUS", O.Default(Some(0)))
    /** Database column iUpPvUS DBType(int), Default(Some(0)) */
    val iuppvus: Column[Option[Int]] = column[Option[Int]]("iUpPvUS", O.Default(Some(0)))
    /** Database column iPviLifeUS DBType(int), Default(Some(0)) */
    val ipvilifeus: Column[Option[Int]] = column[Option[Int]]("iPviLifeUS", O.Default(Some(0)))
    /** Database column iPvTH DBType(int), Default(Some(0)) */
    val ipvth: Column[Option[Int]] = column[Option[Int]]("iPvTH", O.Default(Some(0)))
    /** Database column iUpPvTH DBType(int), Default(Some(0)) */
    val iuppvth: Column[Option[Int]] = column[Option[Int]]("iUpPvTH", O.Default(Some(0)))
    /** Database column iPviLifeTH DBType(int), Default(Some(0)) */
    val ipvilifeth: Column[Option[Int]] = column[Option[Int]]("iPviLifeTH", O.Default(Some(0)))
    /** Database column iMoveInOutTW DBType(smallint), Default(Some(0)) */
    val imoveinouttw: Column[Option[Short]] = column[Option[Short]]("iMoveInOutTW", O.Default(Some(0)))
    /** Database column iMoveInOutUS DBType(smallint), Default(Some(0)) */
    val imoveinoutus: Column[Option[Short]] = column[Option[Short]]("iMoveInOutUS", O.Default(Some(0)))
    /** Database column iMoveInOutTH DBType(smallint), Default(Some(0)) */
    val imoveinoutth: Column[Option[Short]] = column[Option[Short]]("iMoveInOutTH", O.Default(Some(0)))
    /** Database column iRecommandTW DBType(smallint), Default(Some(0)) */
    val irecommandtw: Column[Option[Short]] = column[Option[Short]]("iRecommandTW", O.Default(Some(0)))
    /** Database column iRecommandUS DBType(smallint), Default(Some(0)) */
    val irecommandus: Column[Option[Short]] = column[Option[Short]]("iRecommandUS", O.Default(Some(0)))
    /** Database column iRecommandTH DBType(smallint), Default(Some(0)) */
    val irecommandth: Column[Option[Short]] = column[Option[Short]]("iRecommandTH", O.Default(Some(0)))
  }
  /** Collection-like TableQuery object for table Tblorgchartw3 */
  lazy val Tblorgchartw3 = new TableQuery(tag => new Tblorgchartw3(tag))
  
  /** Entity class storing rows of table Tblorgprint
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param dtdate Database column dtDate DBType(datetime)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param cdemployee Database column cdEmployee DBType(char), Length(10,false)
   *  @param ipages Database column iPages DBType(int)
   *  @param cdtype Database column cdType DBType(char), Length(1,false) */
  case class TblorgprintRow(uid: String, dtdate: Option[java.sql.Timestamp], cdmember: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], cdemployee: Option[String], ipages: Option[Int], cdtype: Option[String])
  /** GetResult implicit for fetching TblorgprintRow objects using plain SQL queries */
  implicit def GetResultTblorgprintRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]], e3: GR[Option[Int]]): GR[TblorgprintRow] = GR{
    prs => import prs._
    TblorgprintRow.tupled((<<[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[Int], <<?[String]))
  }
  /** Table description of table tblOrgPrint. Objects of this class serve as prototypes for rows in queries. */
  class Tblorgprint(_tableTag: Tag) extends Table[TblorgprintRow](_tableTag, Some("dbo"), "tblOrgPrint") {
    def * = (uid, dtdate, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, cdemployee, ipages, cdtype) <> (TblorgprintRow.tupled, TblorgprintRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, dtdate, cdmember, uidcreator, dtcreate, uidmodifier, dtmodify, cdemployee, ipages, cdtype).shaped.<>({r=>import r._; _1.map(_=> TblorgprintRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column dtDate DBType(datetime) */
    val dtdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtDate")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdEmployee DBType(char), Length(10,false) */
    val cdemployee: Column[Option[String]] = column[Option[String]]("cdEmployee", O.Length(10,varying=false))
    /** Database column iPages DBType(int) */
    val ipages: Column[Option[Int]] = column[Option[Int]]("iPages")
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(1,varying=false))
    
    /** Index over (dtdate,cdemployee) (database name IX_tblOrgPrint) */
    val index1 = index("IX_tblOrgPrint", (dtdate, cdemployee))
  }
  /** Collection-like TableQuery object for table Tblorgprint */
  lazy val Tblorgprint = new TableQuery(tag => new Tblorgprint(tag))
  
  /** Entity class storing rows of table Tblorgrecommand
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false) */
  case class TblorgrecommandRow(cdpersa: String, cdmember: String)
  /** GetResult implicit for fetching TblorgrecommandRow objects using plain SQL queries */
  implicit def GetResultTblorgrecommandRow(implicit e0: GR[String]): GR[TblorgrecommandRow] = GR{
    prs => import prs._
    TblorgrecommandRow.tupled((<<[String], <<[String]))
  }
  /** Table description of table tblOrgRecommand. Objects of this class serve as prototypes for rows in queries. */
  class Tblorgrecommand(_tableTag: Tag) extends Table[TblorgrecommandRow](_tableTag, Some("dbo"), "tblOrgRecommand") {
    def * = (cdpersa, cdmember) <> (TblorgrecommandRow.tupled, TblorgrecommandRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdpersa.?, cdmember.?).shaped.<>({r=>import r._; _1.map(_=> TblorgrecommandRow.tupled((_1.get, _2.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    
    /** Primary key of Tblorgrecommand (database name PK_tblOrgRecommand) */
    val pk = primaryKey("PK_tblOrgRecommand", (cdpersa, cdmember))
  }
  /** Collection-like TableQuery object for table Tblorgrecommand */
  lazy val Tblorgrecommand = new TableQuery(tag => new Tblorgrecommand(tag))
  
  /** Entity class storing rows of table Tbloutline
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidcourse Database column uidCourse DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default()
   *  @param iseq Database column iSeq DBType(smallint), Default(0)
   *  @param szoutline Database column szOutline DBType(nchar), Length(512,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbloutlineRow(uid: String, uidcourse: String, cdlanguage: String = "", iseq: Short = 0, szoutline: Option[String] = Some(""), uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbloutlineRow objects using plain SQL queries */
  implicit def GetResultTbloutlineRow(implicit e0: GR[String], e1: GR[Short], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TbloutlineRow] = GR{
    prs => import prs._
    TbloutlineRow.tupled((<<[String], <<[String], <<[String], <<[Short], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblOutline. Objects of this class serve as prototypes for rows in queries. */
  class Tbloutline(_tableTag: Tag) extends Table[TbloutlineRow](_tableTag, Some("dbo"), "tblOutline") {
    def * = (uid, uidcourse, cdlanguage, iseq, szoutline, uidmodifier, dtmodify) <> (TbloutlineRow.tupled, TbloutlineRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidcourse.?, cdlanguage.?, iseq.?, szoutline, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TbloutlineRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidCourse DBType(uniqueidentifier), Length(36,false) */
    val uidcourse: Column[String] = column[String]("uidCourse", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default() */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default(""))
    /** Database column iSeq DBType(smallint), Default(0) */
    val iseq: Column[Short] = column[Short]("iSeq", O.Default(0))
    /** Database column szOutline DBType(nchar), Length(512,false), Default(Some()) */
    val szoutline: Column[Option[String]] = column[Option[String]]("szOutline", O.Length(512,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tbloutline (database name PK_tblOutline) */
    val pk = primaryKey("PK_tblOutline", (uidcourse, cdlanguage, iseq))
  }
  /** Collection-like TableQuery object for table Tbloutline */
  lazy val Tbloutline = new TableQuery(tag => new Tbloutline(tag))
  
  /** Entity class storing rows of table Tblpdfcontrol
   *  @param cdkey Database column cdKey DBType(char), PrimaryKey, Length(3,false), Default(PDF)
   *  @param uidtask Database column uidTask DBType(uniqueidentifier), Length(36,false)
   *  @param szjobname Database column szJobName DBType(char), Length(100,false)
   *  @param szusername Database column szUserName DBType(nchar), Length(100,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblpdfcontrolRow(cdkey: String = "PDF", uidtask: String, szjobname: Option[String], szusername: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblpdfcontrolRow objects using plain SQL queries */
  implicit def GetResultTblpdfcontrolRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblpdfcontrolRow] = GR{
    prs => import prs._
    TblpdfcontrolRow.tupled((<<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPdfControl. Objects of this class serve as prototypes for rows in queries. */
  class Tblpdfcontrol(_tableTag: Tag) extends Table[TblpdfcontrolRow](_tableTag, Some("dbo"), "tblPdfControl") {
    def * = (cdkey, uidtask, szjobname, szusername, dtcreate) <> (TblpdfcontrolRow.tupled, TblpdfcontrolRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdkey.?, uidtask.?, szjobname, szusername, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblpdfcontrolRow.tupled((_1.get, _2.get, _3, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdKey DBType(char), PrimaryKey, Length(3,false), Default(PDF) */
    val cdkey: Column[String] = column[String]("cdKey", O.PrimaryKey, O.Length(3,varying=false), O.Default("PDF"))
    /** Database column uidTask DBType(uniqueidentifier), Length(36,false) */
    val uidtask: Column[String] = column[String]("uidTask", O.Length(36,varying=false))
    /** Database column szJobName DBType(char), Length(100,false) */
    val szjobname: Column[Option[String]] = column[Option[String]]("szJobName", O.Length(100,varying=false))
    /** Database column szUserName DBType(nchar), Length(100,false) */
    val szusername: Column[Option[String]] = column[Option[String]]("szUserName", O.Length(100,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
  }
  /** Collection-like TableQuery object for table Tblpdfcontrol */
  lazy val Tblpdfcontrol = new TableQuery(tag => new Tblpdfcontrol(tag))
  
  /** Entity class storing rows of table Tblperformace
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param dtkeyin Database column dtKeyin DBType(datetime)
   *  @param sznote Database column szNote DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblperformaceRow(uid: Option[String], cdmember: String, dtkeyin: java.sql.Timestamp, sznote: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblperformaceRow objects using plain SQL queries */
  implicit def GetResultTblperformaceRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[java.sql.Timestamp], e3: GR[Option[java.sql.Timestamp]]): GR[TblperformaceRow] = GR{
    prs => import prs._
    TblperformaceRow.tupled((<<?[String], <<[String], <<[java.sql.Timestamp], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPerformace. Objects of this class serve as prototypes for rows in queries. */
  class Tblperformace(_tableTag: Tag) extends Table[TblperformaceRow](_tableTag, Some("dbo"), "tblPerformace") {
    def * = (uid, cdmember, dtkeyin, sznote, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblperformaceRow.tupled, TblperformaceRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdmember.?, dtkeyin.?, sznote, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _2.map(_=> TblperformaceRow.tupled((_1, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column dtKeyin DBType(datetime) */
    val dtkeyin: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtKeyin")
    /** Database column szNote DBType(nchar), Length(255,false) */
    val sznote: Column[Option[String]] = column[Option[String]]("szNote", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblperformace (database name PK_tblPerformace) */
    val pk = primaryKey("PK_tblPerformace", (cdmember, dtkeyin))
  }
  /** Collection-like TableQuery object for table Tblperformace */
  lazy val Tblperformace = new TableQuery(tag => new Tblperformace(tag))
  
  /** Entity class storing rows of table Tblpersa
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpersa Database column cdPersa DBType(char), PrimaryKey, Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblpersaRow(uid: String, cdpersa: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblpersaRow objects using plain SQL queries */
  implicit def GetResultTblpersaRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblpersaRow] = GR{
    prs => import prs._
    TblpersaRow.tupled((<<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblPersa. Objects of this class serve as prototypes for rows in queries. */
  class Tblpersa(_tableTag: Tag) extends Table[TblpersaRow](_tableTag, Some("dbo"), "tblPersa") {
    def * = (uid, cdpersa, uidcreator, dtcreate, byts) <> (TblpersaRow.tupled, TblpersaRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpersa.?, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblpersaRow.tupled((_1.get, _2.get, _3, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPersa DBType(char), PrimaryKey, Length(10,false) */
    val cdpersa: Column[String] = column[String]("cdPersa", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblpersa */
  lazy val Tblpersa = new TableQuery(tag => new Tblpersa(tag))
  
  /** Entity class storing rows of table Tblpersad
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidpersa Database column uidPersa DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szpersa Database column szPersa DBType(nchar), Length(50,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblpersadRow(uid: String, uidpersa: String, cdlanguage: String, szpersa: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblpersadRow objects using plain SQL queries */
  implicit def GetResultTblpersadRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblpersadRow] = GR{
    prs => import prs._
    TblpersadRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPersaD. Objects of this class serve as prototypes for rows in queries. */
  class Tblpersad(_tableTag: Tag) extends Table[TblpersadRow](_tableTag, Some("dbo"), "tblPersaD") {
    def * = (uid, uidpersa, cdlanguage, szpersa, uidmodifier, dtmodify) <> (TblpersadRow.tupled, TblpersadRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidpersa.?, cdlanguage.?, szpersa, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblpersadRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidPersa DBType(uniqueidentifier), Length(36,false) */
    val uidpersa: Column[String] = column[String]("uidPersa", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szPersa DBType(nchar), Length(50,false) */
    val szpersa: Column[Option[String]] = column[Option[String]]("szPersa", O.Length(50,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblpersad (database name PK_tblPersaD) */
    val pk = primaryKey("PK_tblPersaD", (uidpersa, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblpersad */
  lazy val Tblpersad = new TableQuery(tag => new Tblpersad(tag))
  
  /** Entity class storing rows of table Tblpersb
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpersa Database column cdPersa DBType(char), Length(10,false)
   *  @param cdpersb Database column cdPersb DBType(char), Length(10,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblpersbRow(uid: String, cdpersa: String, cdpersb: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblpersbRow objects using plain SQL queries */
  implicit def GetResultTblpersbRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblpersbRow] = GR{
    prs => import prs._
    TblpersbRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblPersb. Objects of this class serve as prototypes for rows in queries. */
  class Tblpersb(_tableTag: Tag) extends Table[TblpersbRow](_tableTag, Some("dbo"), "tblPersb") {
    def * = (uid, cdpersa, cdpersb, uidcreator, dtcreate, byts) <> (TblpersbRow.tupled, TblpersbRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpersa.?, cdpersb.?, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblpersbRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPersa DBType(char), Length(10,false) */
    val cdpersa: Column[String] = column[String]("cdPersa", O.Length(10,varying=false))
    /** Database column cdPersb DBType(char), Length(10,false) */
    val cdpersb: Column[String] = column[String]("cdPersb", O.Length(10,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblpersb (database name PK_tblPersb) */
    val pk = primaryKey("PK_tblPersb", (cdpersa, cdpersb))
  }
  /** Collection-like TableQuery object for table Tblpersb */
  lazy val Tblpersb = new TableQuery(tag => new Tblpersb(tag))
  
  /** Entity class storing rows of table Tblpersbd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidpersb Database column uidPersb DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szpersb Database column szPersb DBType(char), Length(50,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblpersbdRow(uid: String, uidpersb: String, cdlanguage: String, szpersb: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblpersbdRow objects using plain SQL queries */
  implicit def GetResultTblpersbdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblpersbdRow] = GR{
    prs => import prs._
    TblpersbdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPersbD. Objects of this class serve as prototypes for rows in queries. */
  class Tblpersbd(_tableTag: Tag) extends Table[TblpersbdRow](_tableTag, Some("dbo"), "tblPersbD") {
    def * = (uid, uidpersb, cdlanguage, szpersb, uidmodifier, dtmodify) <> (TblpersbdRow.tupled, TblpersbdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidpersb.?, cdlanguage.?, szpersb, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblpersbdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidPersb DBType(uniqueidentifier), Length(36,false) */
    val uidpersb: Column[String] = column[String]("uidPersb", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szPersb DBType(char), Length(50,false) */
    val szpersb: Column[Option[String]] = column[Option[String]]("szPersb", O.Length(50,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblpersbd (database name PK_tblPersbD) */
    val pk = primaryKey("PK_tblPersbD", (uidpersb, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblpersbd */
  lazy val Tblpersbd = new TableQuery(tag => new Tblpersbd(tag))
  
  /** Entity class storing rows of table Tblperson
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpersontype Database column cdPersonType DBType(char), Length(2,false)
   *  @param cdperson Database column cdPerson DBType(char), Length(5,false)
   *  @param cdmember Database column cdMember DBType(char), Length(12,false)
   *  @param szfirstname Database column szFirstName DBType(nchar), Length(60,false)
   *  @param szlastname Database column szLastName DBType(nchar), Length(60,false)
   *  @param szfullname Database column szFullName DBType(nchar), Length(120,false)
   *  @param szalias Database column szAlias DBType(nchar), Length(120,false)
   *  @param dtbirthday Database column dtBirthday DBType(datetime)
   *  @param cdsex Database column cdSex DBType(char), Length(1,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param isinvalid Database column isInvalid DBType(bit), Default(false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblpersonRow(uid: String, cdpersontype: String, cdperson: String, cdmember: Option[String], szfirstname: Option[String], szlastname: Option[String], szfullname: Option[String], szalias: Option[String], dtbirthday: Option[java.sql.Timestamp], cdsex: Option[String], szremark: Option[String], isinvalid: Boolean = false, dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblpersonRow objects using plain SQL queries */
  implicit def GetResultTblpersonRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Boolean], e4: GR[java.sql.Timestamp], e5: GR[Option[java.sql.Blob]]): GR[TblpersonRow] = GR{
    prs => import prs._
    TblpersonRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<[Boolean], <<?[java.sql.Timestamp], <<[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblPerson. Objects of this class serve as prototypes for rows in queries. */
  class Tblperson(_tableTag: Tag) extends Table[TblpersonRow](_tableTag, Some("dbo"), "tblPerson") {
    def * = (uid, cdpersontype, cdperson, cdmember, szfirstname, szlastname, szfullname, szalias, dtbirthday, cdsex, szremark, isinvalid, dtstrdate, dtenddate, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblpersonRow.tupled, TblpersonRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpersontype.?, cdperson.?, cdmember, szfirstname, szlastname, szfullname, szalias, dtbirthday, cdsex, szremark, isinvalid.?, dtstrdate, dtenddate.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblpersonRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12.get, _13, _14.get, _15, _16, _17, _18, _19)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPersonType DBType(char), Length(2,false) */
    val cdpersontype: Column[String] = column[String]("cdPersonType", O.Length(2,varying=false))
    /** Database column cdPerson DBType(char), Length(5,false) */
    val cdperson: Column[String] = column[String]("cdPerson", O.Length(5,varying=false))
    /** Database column cdMember DBType(char), Length(12,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(12,varying=false))
    /** Database column szFirstName DBType(nchar), Length(60,false) */
    val szfirstname: Column[Option[String]] = column[Option[String]]("szFirstName", O.Length(60,varying=false))
    /** Database column szLastName DBType(nchar), Length(60,false) */
    val szlastname: Column[Option[String]] = column[Option[String]]("szLastName", O.Length(60,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column szAlias DBType(nchar), Length(120,false) */
    val szalias: Column[Option[String]] = column[Option[String]]("szAlias", O.Length(120,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column isInvalid DBType(bit), Default(false) */
    val isinvalid: Column[Boolean] = column[Boolean]("isInvalid", O.Default(false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblperson (database name PK_tblPerson) */
    val pk = primaryKey("PK_tblPerson", (cdpersontype, cdperson, dtenddate))
  }
  /** Collection-like TableQuery object for table Tblperson */
  lazy val Tblperson = new TableQuery(tag => new Tblperson(tag))
  
  /** Row type of table Tblplace */
  type TblplaceRow = HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Boolean,HCons[Option[java.sql.Timestamp],HCons[java.sql.Timestamp,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HNil]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblplaceRow providing default values if available in the database schema. */
  def TblplaceRow(uid: String, cdplace: String, cdplacetype: Option[String], szplacedesc: Option[String], szcontact1: Option[String], cdtel1: Option[String], cdcellphone1: Option[String], szcontact2: Option[String], cdtel2: Option[String], cdcellphone2: Option[String], cdfax: Option[String], icapacity: Option[Int] = Some(0), szmap: Option[String], szequipment: Option[String], szshape: Option[String], szremark: Option[String], isinvalid: Boolean = false, dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob]): TblplaceRow = {
    uid :: cdplace :: cdplacetype :: szplacedesc :: szcontact1 :: cdtel1 :: cdcellphone1 :: szcontact2 :: cdtel2 :: cdcellphone2 :: cdfax :: icapacity :: szmap :: szequipment :: szshape :: szremark :: isinvalid :: dtstrdate :: dtenddate :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
  }
  /** GetResult implicit for fetching TblplaceRow objects using plain SQL queries */
  implicit def GetResultTblplaceRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Boolean], e4: GR[Option[java.sql.Timestamp]], e5: GR[java.sql.Timestamp], e6: GR[Option[java.sql.Blob]]): GR[TblplaceRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<[Boolean] :: <<?[java.sql.Timestamp] :: <<[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: HNil
  }
  /** Table description of table tblPlace. Objects of this class serve as prototypes for rows in queries. */
  class Tblplace(_tableTag: Tag) extends Table[TblplaceRow](_tableTag, Some("dbo"), "tblPlace") {
    def * = uid :: cdplace :: cdplacetype :: szplacedesc :: szcontact1 :: cdtel1 :: cdcellphone1 :: szcontact2 :: cdtel2 :: cdcellphone2 :: cdfax :: icapacity :: szmap :: szequipment :: szshape :: szremark :: isinvalid :: dtstrdate :: dtenddate :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPlace DBType(char), Length(5,false) */
    val cdplace: Column[String] = column[String]("cdPlace", O.Length(5,varying=false))
    /** Database column cdPlaceType DBType(char), Length(1,false) */
    val cdplacetype: Column[Option[String]] = column[Option[String]]("cdPlaceType", O.Length(1,varying=false))
    /** Database column szPlaceDesc DBType(nchar), Length(120,false) */
    val szplacedesc: Column[Option[String]] = column[Option[String]]("szPlaceDesc", O.Length(120,varying=false))
    /** Database column szContact1 DBType(nchar), Length(120,false) */
    val szcontact1: Column[Option[String]] = column[Option[String]]("szContact1", O.Length(120,varying=false))
    /** Database column cdTEL1 DBType(char), Length(20,false) */
    val cdtel1: Column[Option[String]] = column[Option[String]]("cdTEL1", O.Length(20,varying=false))
    /** Database column cdCellPhone1 DBType(char), Length(20,false) */
    val cdcellphone1: Column[Option[String]] = column[Option[String]]("cdCellPhone1", O.Length(20,varying=false))
    /** Database column szContact2 DBType(nchar), Length(120,false) */
    val szcontact2: Column[Option[String]] = column[Option[String]]("szContact2", O.Length(120,varying=false))
    /** Database column cdTEL2 DBType(char), Length(20,false) */
    val cdtel2: Column[Option[String]] = column[Option[String]]("cdTEL2", O.Length(20,varying=false))
    /** Database column cdCellPhone2 DBType(char), Length(20,false) */
    val cdcellphone2: Column[Option[String]] = column[Option[String]]("cdCellPhone2", O.Length(20,varying=false))
    /** Database column cdFAX DBType(char), Length(20,false) */
    val cdfax: Column[Option[String]] = column[Option[String]]("cdFAX", O.Length(20,varying=false))
    /** Database column iCapacity DBType(int), Default(Some(0)) */
    val icapacity: Column[Option[Int]] = column[Option[Int]]("iCapacity", O.Default(Some(0)))
    /** Database column szMap DBType(nchar), Length(255,false) */
    val szmap: Column[Option[String]] = column[Option[String]]("szMap", O.Length(255,varying=false))
    /** Database column szEquipment DBType(nchar), Length(255,false) */
    val szequipment: Column[Option[String]] = column[Option[String]]("szEquipment", O.Length(255,varying=false))
    /** Database column szShape DBType(nchar), Length(255,false) */
    val szshape: Column[Option[String]] = column[Option[String]]("szShape", O.Length(255,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column isInvalid DBType(bit), Default(false) */
    val isinvalid: Column[Boolean] = column[Boolean]("isInvalid", O.Default(false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblplace (database name PK_tblPlace) */
    val pk = primaryKey("PK_tblPlace", cdplace :: dtenddate :: HNil)
  }
  /** Collection-like TableQuery object for table Tblplace */
  lazy val Tblplace = new TableQuery(tag => new Tblplace(tag))
  
  /** Entity class storing rows of table Tblpostd
   *  @param idbatchno Database column idBatchNo DBType(int)
   *  @param uidcust Database column uidCust DBType(uniqueidentifier), Length(36,false)
   *  @param cdcode1 Database column cdCode1 DBType(char), Length(10,false)
   *  @param cdcode2 Database column cdCode2 DBType(char), Length(10,false)
   *  @param szcountry Database column szCountry DBType(nchar), Length(50,false)
   *  @param cdzip Database column cdZip DBType(char), Length(10,false)
   *  @param szcity Database column szCity DBType(nchar), Length(50,false)
   *  @param szdistrict Database column szDistrict DBType(nchar), Length(50,false)
   *  @param szaddress Database column szAddress DBType(nchar), Length(128,false), Default(Some())
   *  @param szremark Database column szRemark DBType(nchar), Length(50,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblpostdRow(idbatchno: Option[Int], uidcust: Option[String], cdcode1: Option[String], cdcode2: Option[String], szcountry: Option[String], cdzip: Option[String], szcity: Option[String], szdistrict: Option[String], szaddress: Option[String] = Some(""), szremark: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblpostdRow objects using plain SQL queries */
  implicit def GetResultTblpostdRow(implicit e0: GR[Option[Int]], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblpostdRow] = GR{
    prs => import prs._
    TblpostdRow.tupled((<<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPostD. Objects of this class serve as prototypes for rows in queries. */
  class Tblpostd(_tableTag: Tag) extends Table[TblpostdRow](_tableTag, Some("dbo"), "tblPostD") {
    def * = (idbatchno, uidcust, cdcode1, cdcode2, szcountry, cdzip, szcity, szdistrict, szaddress, szremark, dtcreate) <> (TblpostdRow.tupled, TblpostdRow.unapply)
    
    /** Database column idBatchNo DBType(int) */
    val idbatchno: Column[Option[Int]] = column[Option[Int]]("idBatchNo")
    /** Database column uidCust DBType(uniqueidentifier), Length(36,false) */
    val uidcust: Column[Option[String]] = column[Option[String]]("uidCust", O.Length(36,varying=false))
    /** Database column cdCode1 DBType(char), Length(10,false) */
    val cdcode1: Column[Option[String]] = column[Option[String]]("cdCode1", O.Length(10,varying=false))
    /** Database column cdCode2 DBType(char), Length(10,false) */
    val cdcode2: Column[Option[String]] = column[Option[String]]("cdCode2", O.Length(10,varying=false))
    /** Database column szCountry DBType(nchar), Length(50,false) */
    val szcountry: Column[Option[String]] = column[Option[String]]("szCountry", O.Length(50,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szCity DBType(nchar), Length(50,false) */
    val szcity: Column[Option[String]] = column[Option[String]]("szCity", O.Length(50,varying=false))
    /** Database column szDistrict DBType(nchar), Length(50,false) */
    val szdistrict: Column[Option[String]] = column[Option[String]]("szDistrict", O.Length(50,varying=false))
    /** Database column szAddress DBType(nchar), Length(128,false), Default(Some()) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(50,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(50,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
  }
  /** Collection-like TableQuery object for table Tblpostd */
  lazy val Tblpostd = new TableQuery(tag => new Tblpostd(tag))
  
  /** Entity class storing rows of table Tblpostm
   *  @param idbatchno Database column idBatchNo DBType(int), PrimaryKey
   *  @param cdtype Database column cdType DBType(char), Length(10,false), Default(Some())
   *  @param cdgift Database column cdGift DBType(char), Length(14,false)
   *  @param dtplandate Database column dtPlanDate DBType(datetime)
   *  @param irecordcount Database column iRecordCount DBType(int)
   *  @param szremark Database column szRemark DBType(nchar), Length(50,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblpostmRow(idbatchno: Int, cdtype: Option[String] = Some(""), cdgift: Option[String], dtplandate: Option[java.sql.Timestamp], irecordcount: Option[Int], szremark: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblpostmRow objects using plain SQL queries */
  implicit def GetResultTblpostmRow(implicit e0: GR[Int], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Int]]): GR[TblpostmRow] = GR{
    prs => import prs._
    TblpostmRow.tupled((<<[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPostM. Objects of this class serve as prototypes for rows in queries. */
  class Tblpostm(_tableTag: Tag) extends Table[TblpostmRow](_tableTag, Some("dbo"), "tblPostM") {
    def * = (idbatchno, cdtype, cdgift, dtplandate, irecordcount, szremark, uidcreator, dtcreate) <> (TblpostmRow.tupled, TblpostmRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (idbatchno.?, cdtype, cdgift, dtplandate, irecordcount, szremark, uidcreator, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblpostmRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column idBatchNo DBType(int), PrimaryKey */
    val idbatchno: Column[Int] = column[Int]("idBatchNo", O.PrimaryKey)
    /** Database column cdType DBType(char), Length(10,false), Default(Some()) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdGift DBType(char), Length(14,false) */
    val cdgift: Column[Option[String]] = column[Option[String]]("cdGift", O.Length(14,varying=false))
    /** Database column dtPlanDate DBType(datetime) */
    val dtplandate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPlanDate")
    /** Database column iRecordCount DBType(int) */
    val irecordcount: Column[Option[Int]] = column[Option[Int]]("iRecordCount")
    /** Database column szRemark DBType(nchar), Length(50,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(50,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
  }
  /** Collection-like TableQuery object for table Tblpostm */
  lazy val Tblpostm = new TableQuery(tag => new Tblpostm(tag))
  
  /** Entity class storing rows of table Tblprequest
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdprno Database column cdPRNo DBType(char), Length(14,false)
   *  @param dtprissue Database column dtPRIssue DBType(datetime)
   *  @param uidprissueuser Database column uidPRIssueUser DBType(uniqueidentifier), Length(36,false)
   *  @param szprissueuser Database column szPRIssueUser DBType(char), Length(80,false)
   *  @param cdprwarehouse Database column cdPRWareHouse DBType(char), Length(4,false)
   *  @param dtprconfirm Database column dtPRConfirm DBType(datetime)
   *  @param uidprconfirmuser Database column uidPRConfirmUser DBType(uniqueidentifier), Length(36,false)
   *  @param szprconfirmuser Database column szPRConfirmUser DBType(char), Length(80,false)
   *  @param cdprstatus Database column cdPRStatus DBType(char), Length(1,false)
   *  @param cdprstep Database column cdPRStep DBType(char), Length(1,false)
   *  @param dtprrequest Database column dtPRRequest DBType(datetime)
   *  @param dtprsupply Database column dtPRSupply DBType(datetime)
   *  @param icheck Database column iCheck DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblprequestRow(uid: String, cdcenter: String, cdprno: String, dtprissue: java.sql.Timestamp, uidprissueuser: Option[String], szprissueuser: Option[String], cdprwarehouse: Option[String], dtprconfirm: Option[java.sql.Timestamp], uidprconfirmuser: Option[String], szprconfirmuser: Option[String], cdprstatus: Option[String], cdprstep: Option[String], dtprrequest: Option[java.sql.Timestamp], dtprsupply: Option[java.sql.Timestamp], icheck: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblprequestRow objects using plain SQL queries */
  implicit def GetResultTblprequestRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Int]]): GR[TblprequestRow] = GR{
    prs => import prs._
    TblprequestRow.tupled((<<[String], <<[String], <<[String], <<[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPRequest. Objects of this class serve as prototypes for rows in queries. */
  class Tblprequest(_tableTag: Tag) extends Table[TblprequestRow](_tableTag, Some("dbo"), "tblPRequest") {
    def * = (uid, cdcenter, cdprno, dtprissue, uidprissueuser, szprissueuser, cdprwarehouse, dtprconfirm, uidprconfirmuser, szprconfirmuser, cdprstatus, cdprstep, dtprrequest, dtprsupply, icheck, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblprequestRow.tupled, TblprequestRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdprno.?, dtprissue.?, uidprissueuser, szprissueuser, cdprwarehouse, dtprconfirm, uidprconfirmuser, szprconfirmuser, cdprstatus, cdprstep, dtprrequest, dtprsupply, icheck, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblprequestRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdPRNo DBType(char), Length(14,false) */
    val cdprno: Column[String] = column[String]("cdPRNo", O.Length(14,varying=false))
    /** Database column dtPRIssue DBType(datetime) */
    val dtprissue: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtPRIssue")
    /** Database column uidPRIssueUser DBType(uniqueidentifier), Length(36,false) */
    val uidprissueuser: Column[Option[String]] = column[Option[String]]("uidPRIssueUser", O.Length(36,varying=false))
    /** Database column szPRIssueUser DBType(char), Length(80,false) */
    val szprissueuser: Column[Option[String]] = column[Option[String]]("szPRIssueUser", O.Length(80,varying=false))
    /** Database column cdPRWareHouse DBType(char), Length(4,false) */
    val cdprwarehouse: Column[Option[String]] = column[Option[String]]("cdPRWareHouse", O.Length(4,varying=false))
    /** Database column dtPRConfirm DBType(datetime) */
    val dtprconfirm: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPRConfirm")
    /** Database column uidPRConfirmUser DBType(uniqueidentifier), Length(36,false) */
    val uidprconfirmuser: Column[Option[String]] = column[Option[String]]("uidPRConfirmUser", O.Length(36,varying=false))
    /** Database column szPRConfirmUser DBType(char), Length(80,false) */
    val szprconfirmuser: Column[Option[String]] = column[Option[String]]("szPRConfirmUser", O.Length(80,varying=false))
    /** Database column cdPRStatus DBType(char), Length(1,false) */
    val cdprstatus: Column[Option[String]] = column[Option[String]]("cdPRStatus", O.Length(1,varying=false))
    /** Database column cdPRStep DBType(char), Length(1,false) */
    val cdprstep: Column[Option[String]] = column[Option[String]]("cdPRStep", O.Length(1,varying=false))
    /** Database column dtPRRequest DBType(datetime) */
    val dtprrequest: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPRRequest")
    /** Database column dtPRSupply DBType(datetime) */
    val dtprsupply: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPRSupply")
    /** Database column iCheck DBType(int) */
    val icheck: Column[Option[Int]] = column[Option[Int]]("iCheck")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblprequest (database name PK_tblPRequest) */
    val pk = primaryKey("PK_tblPRequest", (cdcenter, cdprno))
  }
  /** Collection-like TableQuery object for table Tblprequest */
  lazy val Tblprequest = new TableQuery(tag => new Tblprequest(tag))
  
  /** Entity class storing rows of table Tblprequestd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidreference Database column uidReference DBType(uniqueidentifier), Length(36,false)
   *  @param iprseq Database column iPRSeq DBType(int)
   *  @param cditem Database column cdItem DBType(char), Length(15,false)
   *  @param cdwareid Database column cdWareID DBType(char), Length(15,false)
   *  @param dtprsupply Database column dtPRSupply DBType(datetime)
   *  @param cdprstatus Database column cdPRStatus DBType(char), Length(1,false)
   *  @param iprrequestqty Database column iPRRequestQty DBType(int)
   *  @param iprsupplyqty Database column iPRSupplyQty DBType(int)
   *  @param iprqty Database column iPRQty DBType(int)
   *  @param iprrequestqtyo Database column iPRRequestQtyO DBType(int)
   *  @param szremark Database column szRemark DBType(nchar), Length(100,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblprequestdRow(uid: String, uidreference: String, iprseq: Int, cditem: Option[String], cdwareid: Option[String], dtprsupply: Option[java.sql.Timestamp], cdprstatus: Option[String], iprrequestqty: Option[Int], iprsupplyqty: Option[Int], iprqty: Option[Int], iprrequestqtyo: Option[Int], szremark: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblprequestdRow objects using plain SQL queries */
  implicit def GetResultTblprequestdRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Int]]): GR[TblprequestdRow] = GR{
    prs => import prs._
    TblprequestdRow.tupled((<<[String], <<[String], <<[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPRequestD. Objects of this class serve as prototypes for rows in queries. */
  class Tblprequestd(_tableTag: Tag) extends Table[TblprequestdRow](_tableTag, Some("dbo"), "tblPRequestD") {
    def * = (uid, uidreference, iprseq, cditem, cdwareid, dtprsupply, cdprstatus, iprrequestqty, iprsupplyqty, iprqty, iprrequestqtyo, szremark, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblprequestdRow.tupled, TblprequestdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidreference.?, iprseq.?, cditem, cdwareid, dtprsupply, cdprstatus, iprrequestqty, iprsupplyqty, iprqty, iprrequestqtyo, szremark, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblprequestdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidReference DBType(uniqueidentifier), Length(36,false) */
    val uidreference: Column[String] = column[String]("uidReference", O.Length(36,varying=false))
    /** Database column iPRSeq DBType(int) */
    val iprseq: Column[Int] = column[Int]("iPRSeq")
    /** Database column cdItem DBType(char), Length(15,false) */
    val cditem: Column[Option[String]] = column[Option[String]]("cdItem", O.Length(15,varying=false))
    /** Database column cdWareID DBType(char), Length(15,false) */
    val cdwareid: Column[Option[String]] = column[Option[String]]("cdWareID", O.Length(15,varying=false))
    /** Database column dtPRSupply DBType(datetime) */
    val dtprsupply: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPRSupply")
    /** Database column cdPRStatus DBType(char), Length(1,false) */
    val cdprstatus: Column[Option[String]] = column[Option[String]]("cdPRStatus", O.Length(1,varying=false))
    /** Database column iPRRequestQty DBType(int) */
    val iprrequestqty: Column[Option[Int]] = column[Option[Int]]("iPRRequestQty")
    /** Database column iPRSupplyQty DBType(int) */
    val iprsupplyqty: Column[Option[Int]] = column[Option[Int]]("iPRSupplyQty")
    /** Database column iPRQty DBType(int) */
    val iprqty: Column[Option[Int]] = column[Option[Int]]("iPRQty")
    /** Database column iPRRequestQtyO DBType(int) */
    val iprrequestqtyo: Column[Option[Int]] = column[Option[Int]]("iPRRequestQtyO")
    /** Database column szRemark DBType(nchar), Length(100,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(100,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblprequestd (database name PK_tblPRequestD) */
    val pk = primaryKey("PK_tblPRequestD", (uidreference, iprseq))
  }
  /** Collection-like TableQuery object for table Tblprequestd */
  lazy val Tblprequestd = new TableQuery(tag => new Tblprequestd(tag))
  
  /** Entity class storing rows of table TblprequestSalog
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdsano Database column cdSANo DBType(char), Length(14,false)
   *  @param cdprno Database column cdPRNo DBType(char), Length(14,false)
   *  @param iprseq Database column iPRSeq DBType(int)
   *  @param cditem Database column cdItem DBType(char), Length(15,false)
   *  @param cdwareid Database column cdWareID DBType(char), Length(15,false)
   *  @param iprsupplyqty Database column iPRSupplyQty DBType(int)
   *  @param iprqty Database column iPRQty DBType(int)
   *  @param cdprstatus Database column cdPRStatus DBType(char), Length(1,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblprequestSalogRow(uid: String, cdcenter: String, cdsano: String, cdprno: String, iprseq: Int, cditem: String, cdwareid: Option[String], iprsupplyqty: Option[Int], iprqty: Option[Int], cdprstatus: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblprequestSalogRow objects using plain SQL queries */
  implicit def GetResultTblprequestSalogRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]]): GR[TblprequestSalogRow] = GR{
    prs => import prs._
    TblprequestSalogRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[Int], <<[String], <<?[String], <<?[Int], <<?[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblPRequest_SALog. Objects of this class serve as prototypes for rows in queries. */
  class TblprequestSalog(_tableTag: Tag) extends Table[TblprequestSalogRow](_tableTag, Some("dbo"), "tblPRequest_SALog") {
    def * = (uid, cdcenter, cdsano, cdprno, iprseq, cditem, cdwareid, iprsupplyqty, iprqty, cdprstatus, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblprequestSalogRow.tupled, TblprequestSalogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdsano.?, cdprno.?, iprseq.?, cditem.?, cdwareid, iprsupplyqty, iprqty, cdprstatus, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblprequestSalogRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdSANo DBType(char), Length(14,false) */
    val cdsano: Column[String] = column[String]("cdSANo", O.Length(14,varying=false))
    /** Database column cdPRNo DBType(char), Length(14,false) */
    val cdprno: Column[String] = column[String]("cdPRNo", O.Length(14,varying=false))
    /** Database column iPRSeq DBType(int) */
    val iprseq: Column[Int] = column[Int]("iPRSeq")
    /** Database column cdItem DBType(char), Length(15,false) */
    val cditem: Column[String] = column[String]("cdItem", O.Length(15,varying=false))
    /** Database column cdWareID DBType(char), Length(15,false) */
    val cdwareid: Column[Option[String]] = column[Option[String]]("cdWareID", O.Length(15,varying=false))
    /** Database column iPRSupplyQty DBType(int) */
    val iprsupplyqty: Column[Option[Int]] = column[Option[Int]]("iPRSupplyQty")
    /** Database column iPRQty DBType(int) */
    val iprqty: Column[Option[Int]] = column[Option[Int]]("iPRQty")
    /** Database column cdPRStatus DBType(char), Length(1,false) */
    val cdprstatus: Column[Option[String]] = column[Option[String]]("cdPRStatus", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of TblprequestSalog (database name PK_tblPRequest_SALog) */
    val pk = primaryKey("PK_tblPRequest_SALog", (cdsano, cdprno, iprseq))
  }
  /** Collection-like TableQuery object for table TblprequestSalog */
  lazy val TblprequestSalog = new TableQuery(tag => new TblprequestSalog(tag))
  
  /** Entity class storing rows of table Tblprodinvname
   *  @param szprodid Database column szProdID DBType(char), PrimaryKey, Length(15,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(120,false) */
  case class TblprodinvnameRow(szprodid: String, szprodname: String)
  /** GetResult implicit for fetching TblprodinvnameRow objects using plain SQL queries */
  implicit def GetResultTblprodinvnameRow(implicit e0: GR[String]): GR[TblprodinvnameRow] = GR{
    prs => import prs._
    TblprodinvnameRow.tupled((<<[String], <<[String]))
  }
  /** Table description of table tblProdInvName. Objects of this class serve as prototypes for rows in queries. */
  class Tblprodinvname(_tableTag: Tag) extends Table[TblprodinvnameRow](_tableTag, Some("dbo"), "tblProdInvName") {
    def * = (szprodid, szprodname) <> (TblprodinvnameRow.tupled, TblprodinvnameRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (szprodid.?, szprodname.?).shaped.<>({r=>import r._; _1.map(_=> TblprodinvnameRow.tupled((_1.get, _2.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column szProdID DBType(char), PrimaryKey, Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.PrimaryKey, O.Length(15,varying=false))
    /** Database column szProdName DBType(nchar), Length(120,false) */
    val szprodname: Column[String] = column[String]("szProdName", O.Length(120,varying=false))
  }
  /** Collection-like TableQuery object for table Tblprodinvname */
  lazy val Tblprodinvname = new TableQuery(tag => new Tblprodinvname(tag))
  
  /** Entity class storing rows of table Tblprodrel
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdkindmain Database column cdKindMain DBType(char), Length(10,false)
   *  @param cdkind Database column cdKind DBType(char), Length(10,false)
   *  @param cdbcleading Database column cdBCLeading DBType(char), Length(4,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblprodrelRow(uid: String, cdkindmain: String, cdkind: String, cdbcleading: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblprodrelRow objects using plain SQL queries */
  implicit def GetResultTblprodrelRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblprodrelRow] = GR{
    prs => import prs._
    TblprodrelRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblProdRel. Objects of this class serve as prototypes for rows in queries. */
  class Tblprodrel(_tableTag: Tag) extends Table[TblprodrelRow](_tableTag, Some("dbo"), "tblProdRel") {
    def * = (uid, cdkindmain, cdkind, cdbcleading, uidcreator, dtcreate) <> (TblprodrelRow.tupled, TblprodrelRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdkindmain.?, cdkind.?, cdbcleading, uidcreator, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblprodrelRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdKindMain DBType(char), Length(10,false) */
    val cdkindmain: Column[String] = column[String]("cdKindMain", O.Length(10,varying=false))
    /** Database column cdKind DBType(char), Length(10,false) */
    val cdkind: Column[String] = column[String]("cdKind", O.Length(10,varying=false))
    /** Database column cdBCLeading DBType(char), Length(4,false) */
    val cdbcleading: Column[Option[String]] = column[Option[String]]("cdBCLeading", O.Length(4,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    
    /** Primary key of Tblprodrel (database name PK_tblProdRel) */
    val pk = primaryKey("PK_tblProdRel", (cdkindmain, cdkind))
  }
  /** Collection-like TableQuery object for table Tblprodrel */
  lazy val Tblprodrel = new TableQuery(tag => new Tblprodrel(tag))
  
  /** Entity class storing rows of table Tblprodreld
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidprodrel Database column uidProdRel DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szdesc Database column szDesc DBType(nchar), Length(80,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblprodreldRow(uid: String, uidprodrel: String, cdlanguage: String, szdesc: String, uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblprodreldRow objects using plain SQL queries */
  implicit def GetResultTblprodreldRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblprodreldRow] = GR{
    prs => import prs._
    TblprodreldRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblProdRelD. Objects of this class serve as prototypes for rows in queries. */
  class Tblprodreld(_tableTag: Tag) extends Table[TblprodreldRow](_tableTag, Some("dbo"), "tblProdRelD") {
    def * = (uid, uidprodrel, cdlanguage, szdesc, uidmodifier, dtmodify) <> (TblprodreldRow.tupled, TblprodreldRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidprodrel.?, cdlanguage.?, szdesc.?, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblprodreldRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidProdRel DBType(uniqueidentifier), Length(36,false) */
    val uidprodrel: Column[String] = column[String]("uidProdRel", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szDesc DBType(nchar), Length(80,false) */
    val szdesc: Column[String] = column[String]("szDesc", O.Length(80,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblprodreld (database name PK_tblProdRelD) */
    val pk = primaryKey("PK_tblProdRelD", (cdlanguage, szdesc))
  }
  /** Collection-like TableQuery object for table Tblprodreld */
  lazy val Tblprodreld = new TableQuery(tag => new Tblprodreld(tag))
  
  /** Row type of table Tblproduct */
  type TblproductRow = HCons[String,HCons[String,HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Int,HCons[Int,HCons[Option[Int],HCons[Option[Double],HCons[Option[String],HCons[Boolean,HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Double],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblproductRow providing default values if available in the database schema. */
  def TblproductRow(uid: String, cdcenter: String, szprodid: String, dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], cdprodkindmain: Option[String], cdprodkindmid: Option[String], cdprodkindmin: Option[String], cdunitex1: Option[String], cdunitex2: Option[String], cdunitex3: Option[String], cdunitex4: Option[String], cdunitex5: Option[String], cdunitsale: Option[String], cdunitpo: Option[String], cdunitstock: Option[String], cdsaleacct1: Option[String], cdsaleacct2: Option[String], cdpoacct: Option[String], cdrtacct: Option[String], cdstockacct1: Option[String], cdstockacct2: Option[String], szprodids: Option[String], cdwareid: Option[String], cdbothbuy: Option[String], szpath: Option[String], icount1: Option[Int], icount2: Option[Int], icount3: Option[Int], icount4: Option[Int], icount5: Option[Int], isafe: Option[Int], isafeup: Option[Int], isafelimite: Option[Int], ipvpoint: Int = 0, ipvpointup: Int = 0, ipvpointbonus: Option[Int] = Some(0), fpoprice: Option[Double], cdpocurrency: Option[String], isvalid: Boolean = false, ispo: Option[Boolean], isstock: Option[Boolean], ispv: Option[Boolean], iscountprod: Option[Boolean], isdeclear: Option[Boolean], isprintso: Option[Boolean], ischwriteoff: Option[Boolean], isprintinv: Option[Boolean], isclass: Option[Boolean], isid: Option[Boolean], isflag1: Option[Boolean], isflag2: Option[Boolean], isflag3: Option[Boolean], isflag4: Option[Boolean], isflag5: Option[Boolean], uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], bak1: Option[String], bak2: Option[String], bak3: Option[String], bak4: Option[String], bak5: Option[String], iuppvdsd: Option[Int] = Some(0), issendgift: Option[Int] = Some(0), dpresentpoint: Option[Double] = Some(0.0)): TblproductRow = {
    uid :: cdcenter :: szprodid :: dtstrdate :: dtenddate :: cdprodkindmain :: cdprodkindmid :: cdprodkindmin :: cdunitex1 :: cdunitex2 :: cdunitex3 :: cdunitex4 :: cdunitex5 :: cdunitsale :: cdunitpo :: cdunitstock :: cdsaleacct1 :: cdsaleacct2 :: cdpoacct :: cdrtacct :: cdstockacct1 :: cdstockacct2 :: szprodids :: cdwareid :: cdbothbuy :: szpath :: icount1 :: icount2 :: icount3 :: icount4 :: icount5 :: isafe :: isafeup :: isafelimite :: ipvpoint :: ipvpointup :: ipvpointbonus :: fpoprice :: cdpocurrency :: isvalid :: ispo :: isstock :: ispv :: iscountprod :: isdeclear :: isprintso :: ischwriteoff :: isprintinv :: isclass :: isid :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: bak1 :: bak2 :: bak3 :: bak4 :: bak5 :: iuppvdsd :: issendgift :: dpresentpoint :: HNil
  }
  /** GetResult implicit for fetching TblproductRow objects using plain SQL queries */
  implicit def GetResultTblproductRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]], e3: GR[Option[Int]], e4: GR[Int], e5: GR[Option[Double]], e6: GR[Boolean], e7: GR[Option[Boolean]], e8: GR[Option[java.sql.Blob]]): GR[TblproductRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<[Int] :: <<[Int] :: <<?[Int] :: <<?[Double] :: <<?[String] :: <<[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Double] :: HNil
  }
  /** Table description of table tblProduct. Objects of this class serve as prototypes for rows in queries. */
  class Tblproduct(_tableTag: Tag) extends Table[TblproductRow](_tableTag, Some("dbo"), "tblProduct") {
    def * = uid :: cdcenter :: szprodid :: dtstrdate :: dtenddate :: cdprodkindmain :: cdprodkindmid :: cdprodkindmin :: cdunitex1 :: cdunitex2 :: cdunitex3 :: cdunitex4 :: cdunitex5 :: cdunitsale :: cdunitpo :: cdunitstock :: cdsaleacct1 :: cdsaleacct2 :: cdpoacct :: cdrtacct :: cdstockacct1 :: cdstockacct2 :: szprodids :: cdwareid :: cdbothbuy :: szpath :: icount1 :: icount2 :: icount3 :: icount4 :: icount5 :: isafe :: isafeup :: isafelimite :: ipvpoint :: ipvpointup :: ipvpointbonus :: fpoprice :: cdpocurrency :: isvalid :: ispo :: isstock :: ispv :: iscountprod :: isdeclear :: isprintso :: ischwriteoff :: isprintinv :: isclass :: isid :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: bak1 :: bak2 :: bak3 :: bak4 :: bak5 :: iuppvdsd :: issendgift :: dpresentpoint :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column szProdID DBType(char), PrimaryKey, Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.PrimaryKey, O.Length(15,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column cdProdKindMain DBType(char), Length(3,false) */
    val cdprodkindmain: Column[Option[String]] = column[Option[String]]("cdProdKindMain", O.Length(3,varying=false))
    /** Database column cdProdKindMid DBType(char), Length(3,false) */
    val cdprodkindmid: Column[Option[String]] = column[Option[String]]("cdProdKindMid", O.Length(3,varying=false))
    /** Database column cdProdKindMin DBType(char), Length(3,false) */
    val cdprodkindmin: Column[Option[String]] = column[Option[String]]("cdProdKindMin", O.Length(3,varying=false))
    /** Database column cdUnitEx1 DBType(char), Length(3,false) */
    val cdunitex1: Column[Option[String]] = column[Option[String]]("cdUnitEx1", O.Length(3,varying=false))
    /** Database column cdUnitEx2 DBType(char), Length(3,false) */
    val cdunitex2: Column[Option[String]] = column[Option[String]]("cdUnitEx2", O.Length(3,varying=false))
    /** Database column cdUnitEx3 DBType(char), Length(3,false) */
    val cdunitex3: Column[Option[String]] = column[Option[String]]("cdUnitEx3", O.Length(3,varying=false))
    /** Database column cdUnitEx4 DBType(char), Length(3,false) */
    val cdunitex4: Column[Option[String]] = column[Option[String]]("cdUnitEx4", O.Length(3,varying=false))
    /** Database column cdUnitEx5 DBType(char), Length(3,false) */
    val cdunitex5: Column[Option[String]] = column[Option[String]]("cdUnitEx5", O.Length(3,varying=false))
    /** Database column cdUnitSale DBType(char), Length(3,false) */
    val cdunitsale: Column[Option[String]] = column[Option[String]]("cdUnitSale", O.Length(3,varying=false))
    /** Database column cdUnitPo DBType(char), Length(3,false) */
    val cdunitpo: Column[Option[String]] = column[Option[String]]("cdUnitPo", O.Length(3,varying=false))
    /** Database column cdUnitStock DBType(char), Length(3,false) */
    val cdunitstock: Column[Option[String]] = column[Option[String]]("cdUnitStock", O.Length(3,varying=false))
    /** Database column cdSaleAcct1 DBType(char), Length(6,false) */
    val cdsaleacct1: Column[Option[String]] = column[Option[String]]("cdSaleAcct1", O.Length(6,varying=false))
    /** Database column cdSaleAcct2 DBType(char), Length(6,false) */
    val cdsaleacct2: Column[Option[String]] = column[Option[String]]("cdSaleAcct2", O.Length(6,varying=false))
    /** Database column cdPoAcct DBType(char), Length(6,false) */
    val cdpoacct: Column[Option[String]] = column[Option[String]]("cdPoAcct", O.Length(6,varying=false))
    /** Database column cdRtAcct DBType(char), Length(6,false) */
    val cdrtacct: Column[Option[String]] = column[Option[String]]("cdRtAcct", O.Length(6,varying=false))
    /** Database column cdStockAcct1 DBType(char), Length(6,false) */
    val cdstockacct1: Column[Option[String]] = column[Option[String]]("cdStockAcct1", O.Length(6,varying=false))
    /** Database column cdStockAcct2 DBType(char), Length(6,false) */
    val cdstockacct2: Column[Option[String]] = column[Option[String]]("cdStockAcct2", O.Length(6,varying=false))
    /** Database column szProdIDs DBType(char), Length(15,false) */
    val szprodids: Column[Option[String]] = column[Option[String]]("szProdIDs", O.Length(15,varying=false))
    /** Database column cdWareID DBType(char), Length(15,false) */
    val cdwareid: Column[Option[String]] = column[Option[String]]("cdWareID", O.Length(15,varying=false))
    /** Database column cdBothBuy DBType(char), Length(15,false) */
    val cdbothbuy: Column[Option[String]] = column[Option[String]]("cdBothBuy", O.Length(15,varying=false))
    /** Database column szPath DBType(char), Length(255,false) */
    val szpath: Column[Option[String]] = column[Option[String]]("szPath", O.Length(255,varying=false))
    /** Database column iCount1 DBType(int) */
    val icount1: Column[Option[Int]] = column[Option[Int]]("iCount1")
    /** Database column iCount2 DBType(int) */
    val icount2: Column[Option[Int]] = column[Option[Int]]("iCount2")
    /** Database column iCount3 DBType(int) */
    val icount3: Column[Option[Int]] = column[Option[Int]]("iCount3")
    /** Database column iCount4 DBType(int) */
    val icount4: Column[Option[Int]] = column[Option[Int]]("iCount4")
    /** Database column iCount5 DBType(int) */
    val icount5: Column[Option[Int]] = column[Option[Int]]("iCount5")
    /** Database column iSafe DBType(int) */
    val isafe: Column[Option[Int]] = column[Option[Int]]("iSafe")
    /** Database column iSafeUp DBType(int) */
    val isafeup: Column[Option[Int]] = column[Option[Int]]("iSafeUp")
    /** Database column iSafeLimite DBType(int) */
    val isafelimite: Column[Option[Int]] = column[Option[Int]]("iSafeLimite")
    /** Database column iPvPoint DBType(int), Default(0) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint", O.Default(0))
    /** Database column iPvPointUp DBType(int), Default(0) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp", O.Default(0))
    /** Database column iPvPointBonus DBType(int), Default(Some(0)) */
    val ipvpointbonus: Column[Option[Int]] = column[Option[Int]]("iPvPointBonus", O.Default(Some(0)))
    /** Database column fPoPrice DBType(float) */
    val fpoprice: Column[Option[Double]] = column[Option[Double]]("fPoPrice")
    /** Database column cdPoCurrency DBType(char), Length(4,false) */
    val cdpocurrency: Column[Option[String]] = column[Option[String]]("cdPoCurrency", O.Length(4,varying=false))
    /** Database column isValid DBType(bit), Default(false) */
    val isvalid: Column[Boolean] = column[Boolean]("isValid", O.Default(false))
    /** Database column isPo DBType(bit) */
    val ispo: Column[Option[Boolean]] = column[Option[Boolean]]("isPo")
    /** Database column isStock DBType(bit) */
    val isstock: Column[Option[Boolean]] = column[Option[Boolean]]("isStock")
    /** Database column isPV DBType(bit) */
    val ispv: Column[Option[Boolean]] = column[Option[Boolean]]("isPV")
    /** Database column isCountProd DBType(bit) */
    val iscountprod: Column[Option[Boolean]] = column[Option[Boolean]]("isCountProd")
    /** Database column isDeclear DBType(bit) */
    val isdeclear: Column[Option[Boolean]] = column[Option[Boolean]]("isDeclear")
    /** Database column isPrintSo DBType(bit) */
    val isprintso: Column[Option[Boolean]] = column[Option[Boolean]]("isPrintSo")
    /** Database column isChWriteOff DBType(bit) */
    val ischwriteoff: Column[Option[Boolean]] = column[Option[Boolean]]("isChWriteOff")
    /** Database column isPrintInv DBType(bit) */
    val isprintinv: Column[Option[Boolean]] = column[Option[Boolean]]("isPrintInv")
    /** Database column isClass DBType(bit) */
    val isclass: Column[Option[Boolean]] = column[Option[Boolean]]("isClass")
    /** Database column isID DBType(bit) */
    val isid: Column[Option[Boolean]] = column[Option[Boolean]]("isID")
    /** Database column isFlag1 DBType(bit) */
    val isflag1: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag1")
    /** Database column isFlag2 DBType(bit) */
    val isflag2: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag2")
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column isFlag4 DBType(bit) */
    val isflag4: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag4")
    /** Database column isFlag5 DBType(bit) */
    val isflag5: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag5")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column Bak_1 DBType(varchar), Length(20,true) */
    val bak1: Column[Option[String]] = column[Option[String]]("Bak_1", O.Length(20,varying=true))
    /** Database column Bak_2 DBType(varchar), Length(20,true) */
    val bak2: Column[Option[String]] = column[Option[String]]("Bak_2", O.Length(20,varying=true))
    /** Database column Bak_3 DBType(varchar), Length(20,true) */
    val bak3: Column[Option[String]] = column[Option[String]]("Bak_3", O.Length(20,varying=true))
    /** Database column Bak_4 DBType(varchar), Length(20,true) */
    val bak4: Column[Option[String]] = column[Option[String]]("Bak_4", O.Length(20,varying=true))
    /** Database column Bak_5 DBType(varchar), Length(20,true) */
    val bak5: Column[Option[String]] = column[Option[String]]("Bak_5", O.Length(20,varying=true))
    /** Database column iUpPvDSD DBType(int), Default(Some(0)) */
    val iuppvdsd: Column[Option[Int]] = column[Option[Int]]("iUpPvDSD", O.Default(Some(0)))
    /** Database column isSendGift DBType(int), Default(Some(0)) */
    val issendgift: Column[Option[Int]] = column[Option[Int]]("isSendGift", O.Default(Some(0)))
    /** Database column dPresentPoint DBType(float), Default(Some(0.0)) */
    val dpresentpoint: Column[Option[Double]] = column[Option[Double]]("dPresentPoint", O.Default(Some(0.0)))
  }
  /** Collection-like TableQuery object for table Tblproduct */
  lazy val Tblproduct = new TableQuery(tag => new Tblproduct(tag))
  
  /** Row type of table TblproductBase */
  type TblproductBaseRow = HCons[String,HCons[String,HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Int,HCons[Int,HCons[Option[Int],HCons[Option[Double],HCons[Option[String],HCons[Boolean,HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblproductBaseRow providing default values if available in the database schema. */
  def TblproductBaseRow(uid: String, cdcenter: String, szprodid: String, dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], cdprodkindmain: Option[String], cdprodkindmid: Option[String], cdprodkindmin: Option[String], cdunitex1: Option[String], cdunitex2: Option[String], cdunitex3: Option[String], cdunitex4: Option[String], cdunitex5: Option[String], cdunitsale: Option[String], cdunitpo: Option[String], cdunitstock: Option[String], cdsaleacct1: Option[String], cdsaleacct2: Option[String], cdpoacct: Option[String], cdrtacct: Option[String], cdstockacct1: Option[String], cdstockacct2: Option[String], szprodids: Option[String], cdwareid: Option[String], cdbothbuy: Option[String], szpath: Option[String], icount1: Option[Int], icount2: Option[Int], icount3: Option[Int], icount4: Option[Int], icount5: Option[Int], isafe: Option[Int], isafeup: Option[Int], isafelimite: Option[Int], ipvpoint: Int = 0, ipvpointup: Int = 0, ipvpointbonus: Option[Int] = Some(0), fpoprice: Option[Double], cdpocurrency: Option[String], isvalid: Boolean = false, ispo: Option[Boolean], isstock: Option[Boolean], ispv: Option[Boolean], iscountprod: Option[Boolean], isdeclear: Option[Boolean], isprintso: Option[Boolean], ischwriteoff: Option[Boolean], isprintinv: Option[Boolean], isclass: Option[Boolean], isid: Option[Boolean], isflag1: Option[Boolean], isflag2: Option[Boolean], isflag3: Option[Boolean], isflag4: Option[Boolean], isflag5: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], bak1: Option[String], bak2: Option[String], bak3: Option[String], bak4: Option[String], bak5: Option[String]): TblproductBaseRow = {
    uid :: cdcenter :: szprodid :: dtstrdate :: dtenddate :: cdprodkindmain :: cdprodkindmid :: cdprodkindmin :: cdunitex1 :: cdunitex2 :: cdunitex3 :: cdunitex4 :: cdunitex5 :: cdunitsale :: cdunitpo :: cdunitstock :: cdsaleacct1 :: cdsaleacct2 :: cdpoacct :: cdrtacct :: cdstockacct1 :: cdstockacct2 :: szprodids :: cdwareid :: cdbothbuy :: szpath :: icount1 :: icount2 :: icount3 :: icount4 :: icount5 :: isafe :: isafeup :: isafelimite :: ipvpoint :: ipvpointup :: ipvpointbonus :: fpoprice :: cdpocurrency :: isvalid :: ispo :: isstock :: ispv :: iscountprod :: isdeclear :: isprintso :: ischwriteoff :: isprintinv :: isclass :: isid :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: bak1 :: bak2 :: bak3 :: bak4 :: bak5 :: HNil
  }
  /** GetResult implicit for fetching TblproductBaseRow objects using plain SQL queries */
  implicit def GetResultTblproductBaseRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]], e3: GR[Option[Int]], e4: GR[Int], e5: GR[Option[Double]], e6: GR[Boolean], e7: GR[Option[Boolean]], e8: GR[Option[java.sql.Blob]]): GR[TblproductBaseRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<[Int] :: <<[Int] :: <<?[Int] :: <<?[Double] :: <<?[String] :: <<[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblProduct_Base. Objects of this class serve as prototypes for rows in queries. */
  class TblproductBase(_tableTag: Tag) extends Table[TblproductBaseRow](_tableTag, Some("dbo"), "tblProduct_Base") {
    def * = uid :: cdcenter :: szprodid :: dtstrdate :: dtenddate :: cdprodkindmain :: cdprodkindmid :: cdprodkindmin :: cdunitex1 :: cdunitex2 :: cdunitex3 :: cdunitex4 :: cdunitex5 :: cdunitsale :: cdunitpo :: cdunitstock :: cdsaleacct1 :: cdsaleacct2 :: cdpoacct :: cdrtacct :: cdstockacct1 :: cdstockacct2 :: szprodids :: cdwareid :: cdbothbuy :: szpath :: icount1 :: icount2 :: icount3 :: icount4 :: icount5 :: isafe :: isafeup :: isafelimite :: ipvpoint :: ipvpointup :: ipvpointbonus :: fpoprice :: cdpocurrency :: isvalid :: ispo :: isstock :: ispv :: iscountprod :: isdeclear :: isprintso :: ischwriteoff :: isprintinv :: isclass :: isid :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: bak1 :: bak2 :: bak3 :: bak4 :: bak5 :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column szProdID DBType(char), PrimaryKey, Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.PrimaryKey, O.Length(15,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column cdProdKindMain DBType(char), Length(3,false) */
    val cdprodkindmain: Column[Option[String]] = column[Option[String]]("cdProdKindMain", O.Length(3,varying=false))
    /** Database column cdProdKindMid DBType(char), Length(3,false) */
    val cdprodkindmid: Column[Option[String]] = column[Option[String]]("cdProdKindMid", O.Length(3,varying=false))
    /** Database column cdProdKindMin DBType(char), Length(3,false) */
    val cdprodkindmin: Column[Option[String]] = column[Option[String]]("cdProdKindMin", O.Length(3,varying=false))
    /** Database column cdUnitEx1 DBType(char), Length(3,false) */
    val cdunitex1: Column[Option[String]] = column[Option[String]]("cdUnitEx1", O.Length(3,varying=false))
    /** Database column cdUnitEx2 DBType(char), Length(3,false) */
    val cdunitex2: Column[Option[String]] = column[Option[String]]("cdUnitEx2", O.Length(3,varying=false))
    /** Database column cdUnitEx3 DBType(char), Length(3,false) */
    val cdunitex3: Column[Option[String]] = column[Option[String]]("cdUnitEx3", O.Length(3,varying=false))
    /** Database column cdUnitEx4 DBType(char), Length(3,false) */
    val cdunitex4: Column[Option[String]] = column[Option[String]]("cdUnitEx4", O.Length(3,varying=false))
    /** Database column cdUnitEx5 DBType(char), Length(3,false) */
    val cdunitex5: Column[Option[String]] = column[Option[String]]("cdUnitEx5", O.Length(3,varying=false))
    /** Database column cdUnitSale DBType(char), Length(3,false) */
    val cdunitsale: Column[Option[String]] = column[Option[String]]("cdUnitSale", O.Length(3,varying=false))
    /** Database column cdUnitPo DBType(char), Length(3,false) */
    val cdunitpo: Column[Option[String]] = column[Option[String]]("cdUnitPo", O.Length(3,varying=false))
    /** Database column cdUnitStock DBType(char), Length(3,false) */
    val cdunitstock: Column[Option[String]] = column[Option[String]]("cdUnitStock", O.Length(3,varying=false))
    /** Database column cdSaleAcct1 DBType(char), Length(6,false) */
    val cdsaleacct1: Column[Option[String]] = column[Option[String]]("cdSaleAcct1", O.Length(6,varying=false))
    /** Database column cdSaleAcct2 DBType(char), Length(6,false) */
    val cdsaleacct2: Column[Option[String]] = column[Option[String]]("cdSaleAcct2", O.Length(6,varying=false))
    /** Database column cdPoAcct DBType(char), Length(6,false) */
    val cdpoacct: Column[Option[String]] = column[Option[String]]("cdPoAcct", O.Length(6,varying=false))
    /** Database column cdRtAcct DBType(char), Length(6,false) */
    val cdrtacct: Column[Option[String]] = column[Option[String]]("cdRtAcct", O.Length(6,varying=false))
    /** Database column cdStockAcct1 DBType(char), Length(6,false) */
    val cdstockacct1: Column[Option[String]] = column[Option[String]]("cdStockAcct1", O.Length(6,varying=false))
    /** Database column cdStockAcct2 DBType(char), Length(6,false) */
    val cdstockacct2: Column[Option[String]] = column[Option[String]]("cdStockAcct2", O.Length(6,varying=false))
    /** Database column szProdIDs DBType(char), Length(15,false) */
    val szprodids: Column[Option[String]] = column[Option[String]]("szProdIDs", O.Length(15,varying=false))
    /** Database column cdWareID DBType(char), Length(15,false) */
    val cdwareid: Column[Option[String]] = column[Option[String]]("cdWareID", O.Length(15,varying=false))
    /** Database column cdBothBuy DBType(char), Length(15,false) */
    val cdbothbuy: Column[Option[String]] = column[Option[String]]("cdBothBuy", O.Length(15,varying=false))
    /** Database column szPath DBType(char), Length(255,false) */
    val szpath: Column[Option[String]] = column[Option[String]]("szPath", O.Length(255,varying=false))
    /** Database column iCount1 DBType(int) */
    val icount1: Column[Option[Int]] = column[Option[Int]]("iCount1")
    /** Database column iCount2 DBType(int) */
    val icount2: Column[Option[Int]] = column[Option[Int]]("iCount2")
    /** Database column iCount3 DBType(int) */
    val icount3: Column[Option[Int]] = column[Option[Int]]("iCount3")
    /** Database column iCount4 DBType(int) */
    val icount4: Column[Option[Int]] = column[Option[Int]]("iCount4")
    /** Database column iCount5 DBType(int) */
    val icount5: Column[Option[Int]] = column[Option[Int]]("iCount5")
    /** Database column iSafe DBType(int) */
    val isafe: Column[Option[Int]] = column[Option[Int]]("iSafe")
    /** Database column iSafeUp DBType(int) */
    val isafeup: Column[Option[Int]] = column[Option[Int]]("iSafeUp")
    /** Database column iSafeLimite DBType(int) */
    val isafelimite: Column[Option[Int]] = column[Option[Int]]("iSafeLimite")
    /** Database column iPvPoint DBType(int), Default(0) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint", O.Default(0))
    /** Database column iPvPointUp DBType(int), Default(0) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp", O.Default(0))
    /** Database column iPvPointBonus DBType(int), Default(Some(0)) */
    val ipvpointbonus: Column[Option[Int]] = column[Option[Int]]("iPvPointBonus", O.Default(Some(0)))
    /** Database column fPoPrice DBType(float) */
    val fpoprice: Column[Option[Double]] = column[Option[Double]]("fPoPrice")
    /** Database column cdPoCurrency DBType(char), Length(4,false) */
    val cdpocurrency: Column[Option[String]] = column[Option[String]]("cdPoCurrency", O.Length(4,varying=false))
    /** Database column isValid DBType(bit), Default(false) */
    val isvalid: Column[Boolean] = column[Boolean]("isValid", O.Default(false))
    /** Database column isPo DBType(bit) */
    val ispo: Column[Option[Boolean]] = column[Option[Boolean]]("isPo")
    /** Database column isStock DBType(bit) */
    val isstock: Column[Option[Boolean]] = column[Option[Boolean]]("isStock")
    /** Database column isPV DBType(bit) */
    val ispv: Column[Option[Boolean]] = column[Option[Boolean]]("isPV")
    /** Database column isCountProd DBType(bit) */
    val iscountprod: Column[Option[Boolean]] = column[Option[Boolean]]("isCountProd")
    /** Database column isDeclear DBType(bit) */
    val isdeclear: Column[Option[Boolean]] = column[Option[Boolean]]("isDeclear")
    /** Database column isPrintSo DBType(bit) */
    val isprintso: Column[Option[Boolean]] = column[Option[Boolean]]("isPrintSo")
    /** Database column isChWriteOff DBType(bit) */
    val ischwriteoff: Column[Option[Boolean]] = column[Option[Boolean]]("isChWriteOff")
    /** Database column isPrintInv DBType(bit) */
    val isprintinv: Column[Option[Boolean]] = column[Option[Boolean]]("isPrintInv")
    /** Database column isClass DBType(bit) */
    val isclass: Column[Option[Boolean]] = column[Option[Boolean]]("isClass")
    /** Database column isID DBType(bit) */
    val isid: Column[Option[Boolean]] = column[Option[Boolean]]("isID")
    /** Database column isFlag1 DBType(bit) */
    val isflag1: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag1")
    /** Database column isFlag2 DBType(bit) */
    val isflag2: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag2")
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column isFlag4 DBType(bit) */
    val isflag4: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag4")
    /** Database column isFlag5 DBType(bit) */
    val isflag5: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag5")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column Bak_1 DBType(varchar), Length(20,true) */
    val bak1: Column[Option[String]] = column[Option[String]]("Bak_1", O.Length(20,varying=true))
    /** Database column Bak_2 DBType(varchar), Length(20,true) */
    val bak2: Column[Option[String]] = column[Option[String]]("Bak_2", O.Length(20,varying=true))
    /** Database column Bak_3 DBType(varchar), Length(20,true) */
    val bak3: Column[Option[String]] = column[Option[String]]("Bak_3", O.Length(20,varying=true))
    /** Database column Bak_4 DBType(varchar), Length(20,true) */
    val bak4: Column[Option[String]] = column[Option[String]]("Bak_4", O.Length(20,varying=true))
    /** Database column Bak_5 DBType(varchar), Length(20,true) */
    val bak5: Column[Option[String]] = column[Option[String]]("Bak_5", O.Length(20,varying=true))
  }
  /** Collection-like TableQuery object for table TblproductBase */
  lazy val TblproductBase = new TableQuery(tag => new TblproductBase(tag))
  
  /** Entity class storing rows of table Tblproductd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidproduct Database column uidProduct DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(120,false)
   *  @param szproddesc Database column szProdDesc DBType(nchar), Length(255,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param szprodnameinvoice Database column szProdNameInvoice DBType(nvarchar), Length(120,true), Default(Some()) */
  case class TblproductdRow(uid: String, uidproduct: String, cdlanguage: String, szprodname: Option[String], szproddesc: Option[String], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], szprodnameinvoice: Option[String] = Some(""))
  /** GetResult implicit for fetching TblproductdRow objects using plain SQL queries */
  implicit def GetResultTblproductdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblproductdRow] = GR{
    prs => import prs._
    TblproductdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblProductD. Objects of this class serve as prototypes for rows in queries. */
  class Tblproductd(_tableTag: Tag) extends Table[TblproductdRow](_tableTag, Some("dbo"), "tblProductD") {
    def * = (uid, uidproduct, cdlanguage, szprodname, szproddesc, uidmodifier, dtmodify, szprodnameinvoice) <> (TblproductdRow.tupled, TblproductdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidproduct.?, cdlanguage.?, szprodname, szproddesc, uidmodifier, dtmodify, szprodnameinvoice).shaped.<>({r=>import r._; _1.map(_=> TblproductdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidProduct DBType(uniqueidentifier), Length(36,false) */
    val uidproduct: Column[String] = column[String]("uidProduct", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szProdName DBType(nchar), Length(120,false) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(120,varying=false))
    /** Database column szProdDesc DBType(nchar), Length(255,false) */
    val szproddesc: Column[Option[String]] = column[Option[String]]("szProdDesc", O.Length(255,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column szProdNameInvoice DBType(nvarchar), Length(120,true), Default(Some()) */
    val szprodnameinvoice: Column[Option[String]] = column[Option[String]]("szProdNameInvoice", O.Length(120,varying=true), O.Default(Some("")))
    
    /** Primary key of Tblproductd (database name PK_tblProductD_1) */
    val pk = primaryKey("PK_tblProductD_1", (uidproduct, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblproductd */
  lazy val Tblproductd = new TableQuery(tag => new Tblproductd(tag))
  
  /** Entity class storing rows of table TblproductdBase
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidproduct Database column uidProduct DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szprodname Database column szProdName DBType(nchar), Length(120,false)
   *  @param szproddesc Database column szProdDesc DBType(nchar), Length(255,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblproductdBaseRow(uid: String, uidproduct: String, cdlanguage: String, szprodname: Option[String], szproddesc: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblproductdBaseRow objects using plain SQL queries */
  implicit def GetResultTblproductdBaseRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblproductdBaseRow] = GR{
    prs => import prs._
    TblproductdBaseRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblProductD_Base. Objects of this class serve as prototypes for rows in queries. */
  class TblproductdBase(_tableTag: Tag) extends Table[TblproductdBaseRow](_tableTag, Some("dbo"), "tblProductD_Base") {
    def * = (uid, uidproduct, cdlanguage, szprodname, szproddesc, uidmodifier, dtmodify) <> (TblproductdBaseRow.tupled, TblproductdBaseRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidproduct.?, cdlanguage.?, szprodname, szproddesc, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblproductdBaseRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidProduct DBType(uniqueidentifier), Length(36,false) */
    val uidproduct: Column[String] = column[String]("uidProduct", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szProdName DBType(nchar), Length(120,false) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(120,varying=false))
    /** Database column szProdDesc DBType(nchar), Length(255,false) */
    val szproddesc: Column[Option[String]] = column[Option[String]]("szProdDesc", O.Length(255,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of TblproductdBase (database name PK_tblProductD_Base) */
    val pk = primaryKey("PK_tblProductD_Base", (uidproduct, cdlanguage))
  }
  /** Collection-like TableQuery object for table TblproductdBase */
  lazy val TblproductdBase = new TableQuery(tag => new TblproductdBase(tag))
  
  /** Entity class storing rows of table Tblproductexgdiff
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param szprodid Database column szProdID DBType(char), PrimaryKey, Length(15,false)
   *  @param icount Database column iCount DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblproductexgdiffRow(uid: String, szprodid: String, icount: Option[Int], uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblproductexgdiffRow objects using plain SQL queries */
  implicit def GetResultTblproductexgdiffRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblproductexgdiffRow] = GR{
    prs => import prs._
    TblproductexgdiffRow.tupled((<<[String], <<[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblProductExgDiff. Objects of this class serve as prototypes for rows in queries. */
  class Tblproductexgdiff(_tableTag: Tag) extends Table[TblproductexgdiffRow](_tableTag, Some("dbo"), "tblProductExgDiff") {
    def * = (uid, szprodid, icount, uidcreator, dtcreate, byts) <> (TblproductexgdiffRow.tupled, TblproductexgdiffRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szprodid.?, icount, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblproductexgdiffRow.tupled((_1.get, _2.get, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szProdID DBType(char), PrimaryKey, Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.PrimaryKey, O.Length(15,varying=false))
    /** Database column iCount DBType(int) */
    val icount: Column[Option[Int]] = column[Option[Int]]("iCount")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblproductexgdiff */
  lazy val Tblproductexgdiff = new TableQuery(tag => new Tblproductexgdiff(tag))
  
  /** Entity class storing rows of table Tblproductexgdiffd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidexgdiff Database column uidExgDiff DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param szdesc Database column szDesc DBType(nchar), Length(50,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblproductexgdiffdRow(uid: String, uidexgdiff: String, cdlanguage: String = "zh-CHT", szdesc: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblproductexgdiffdRow objects using plain SQL queries */
  implicit def GetResultTblproductexgdiffdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblproductexgdiffdRow] = GR{
    prs => import prs._
    TblproductexgdiffdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblProductExgDiffD. Objects of this class serve as prototypes for rows in queries. */
  class Tblproductexgdiffd(_tableTag: Tag) extends Table[TblproductexgdiffdRow](_tableTag, Some("dbo"), "tblProductExgDiffD") {
    def * = (uid, uidexgdiff, cdlanguage, szdesc, uidmodifier, dtmodify) <> (TblproductexgdiffdRow.tupled, TblproductexgdiffdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidexgdiff.?, cdlanguage.?, szdesc, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblproductexgdiffdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidExgDiff DBType(uniqueidentifier), Length(36,false) */
    val uidexgdiff: Column[String] = column[String]("uidExgDiff", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column szDesc DBType(nchar), Length(50,false), Default(Some()) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblproductexgdiffd (database name PK_tblProductExgDiffD) */
    val pk = primaryKey("PK_tblProductExgDiffD", (uidexgdiff, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblproductexgdiffd */
  lazy val Tblproductexgdiffd = new TableQuery(tag => new Tblproductexgdiffd(tag))
  
  /** Entity class storing rows of table Tblproductexgsame
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param szprodid Database column szProdID DBType(char), PrimaryKey, Length(15,false)
   *  @param icount Database column iCount DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblproductexgsameRow(uid: String, szprodid: String, icount: Option[Int], uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblproductexgsameRow objects using plain SQL queries */
  implicit def GetResultTblproductexgsameRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblproductexgsameRow] = GR{
    prs => import prs._
    TblproductexgsameRow.tupled((<<[String], <<[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblProductExgSame. Objects of this class serve as prototypes for rows in queries. */
  class Tblproductexgsame(_tableTag: Tag) extends Table[TblproductexgsameRow](_tableTag, Some("dbo"), "tblProductExgSame") {
    def * = (uid, szprodid, icount, uidcreator, dtcreate, byts) <> (TblproductexgsameRow.tupled, TblproductexgsameRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szprodid.?, icount, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblproductexgsameRow.tupled((_1.get, _2.get, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szProdID DBType(char), PrimaryKey, Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.PrimaryKey, O.Length(15,varying=false))
    /** Database column iCount DBType(int) */
    val icount: Column[Option[Int]] = column[Option[Int]]("iCount")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblproductexgsame */
  lazy val Tblproductexgsame = new TableQuery(tag => new Tblproductexgsame(tag))
  
  /** Entity class storing rows of table Tblproductexgsamed
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidexgsame Database column uidExgSame DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param szdesc Database column szDesc DBType(nchar), Length(50,false), Default()
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblproductexgsamedRow(uid: String, uidexgsame: String, cdlanguage: String = "zh-CHT", szdesc: String = "", uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblproductexgsamedRow objects using plain SQL queries */
  implicit def GetResultTblproductexgsamedRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblproductexgsamedRow] = GR{
    prs => import prs._
    TblproductexgsamedRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblProductExgSameD. Objects of this class serve as prototypes for rows in queries. */
  class Tblproductexgsamed(_tableTag: Tag) extends Table[TblproductexgsamedRow](_tableTag, Some("dbo"), "tblProductExgSameD") {
    def * = (uid, uidexgsame, cdlanguage, szdesc, uidmodifier, dtmodify) <> (TblproductexgsamedRow.tupled, TblproductexgsamedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidexgsame.?, cdlanguage.?, szdesc.?, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblproductexgsamedRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidExgSame DBType(uniqueidentifier), Length(36,false) */
    val uidexgsame: Column[String] = column[String]("uidExgSame", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column szDesc DBType(nchar), Length(50,false), Default() */
    val szdesc: Column[String] = column[String]("szDesc", O.Length(50,varying=false), O.Default(""))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblproductexgsamed (database name PK_tblProductExgSameD) */
    val pk = primaryKey("PK_tblProductExgSameD", (uidexgsame, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblproductexgsamed */
  lazy val Tblproductexgsamed = new TableQuery(tag => new Tblproductexgsamed(tag))
  
  /** Entity class storing rows of table Tblproductlist
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdtype Database column cdType DBType(char), Length(20,false)
   *  @param cdproductlist Database column cdProductList DBType(char), Length(3,false)
   *  @param cdproductid Database column cdProductID DBType(char), Length(15,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param iqty Database column iQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblproductlistRow(uid: String, cdtype: String, cdproductlist: String, cdproductid: String, iseq: Int, iqty: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblproductlistRow objects using plain SQL queries */
  implicit def GetResultTblproductlistRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[Int]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblproductlistRow] = GR{
    prs => import prs._
    TblproductlistRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[Int], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblProductList. Objects of this class serve as prototypes for rows in queries. */
  class Tblproductlist(_tableTag: Tag) extends Table[TblproductlistRow](_tableTag, Some("dbo"), "tblProductList") {
    def * = (uid, cdtype, cdproductlist, cdproductid, iseq, iqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblproductlistRow.tupled, TblproductlistRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdtype.?, cdproductlist.?, cdproductid.?, iseq.?, iqty, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblproductlistRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdType DBType(char), Length(20,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(20,varying=false))
    /** Database column cdProductList DBType(char), Length(3,false) */
    val cdproductlist: Column[String] = column[String]("cdProductList", O.Length(3,varying=false))
    /** Database column cdProductID DBType(char), Length(15,false) */
    val cdproductid: Column[String] = column[String]("cdProductID", O.Length(15,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column iQty DBType(int) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblproductlist (database name PK_tblProductList) */
    val pk = primaryKey("PK_tblProductList", (cdtype, cdproductlist, cdproductid))
  }
  /** Collection-like TableQuery object for table Tblproductlist */
  lazy val Tblproductlist = new TableQuery(tag => new Tblproductlist(tag))
  
  /** Entity class storing rows of table Tblproductprice
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidproduct Database column uidProduct DBType(uniqueidentifier), Length(36,false)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param fsaleprice Database column fSalePrice DBType(float), Default(0.0)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblproductpriceRow(uid: String, uidproduct: String, cdcurrency: String, fsaleprice: Double = 0.0, uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblproductpriceRow objects using plain SQL queries */
  implicit def GetResultTblproductpriceRow(implicit e0: GR[String], e1: GR[Double], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblproductpriceRow] = GR{
    prs => import prs._
    TblproductpriceRow.tupled((<<[String], <<[String], <<[String], <<[Double], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblProductPrice. Objects of this class serve as prototypes for rows in queries. */
  class Tblproductprice(_tableTag: Tag) extends Table[TblproductpriceRow](_tableTag, Some("dbo"), "tblProductPrice") {
    def * = (uid, uidproduct, cdcurrency, fsaleprice, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblproductpriceRow.tupled, TblproductpriceRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidproduct.?, cdcurrency.?, fsaleprice.?, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblproductpriceRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidProduct DBType(uniqueidentifier), Length(36,false) */
    val uidproduct: Column[String] = column[String]("uidProduct", O.Length(36,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fSalePrice DBType(float), Default(0.0) */
    val fsaleprice: Column[Double] = column[Double]("fSalePrice", O.Default(0.0))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblproductprice (database name PK_tblProductPrice) */
    val pk = primaryKey("PK_tblProductPrice", (uidproduct, cdcurrency))
  }
  /** Collection-like TableQuery object for table Tblproductprice */
  lazy val Tblproductprice = new TableQuery(tag => new Tblproductprice(tag))
  
  /** Entity class storing rows of table TblproductpriceBase
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidproduct Database column uidProduct DBType(uniqueidentifier), Length(36,false)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false)
   *  @param fsaleprice Database column fSalePrice DBType(float)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param ipvpointbonus Database column iPvPointBonus DBType(int), Default(Some(0)) */
  case class TblproductpriceBaseRow(uid: String, uidproduct: String, cdcurrency: String, fsaleprice: Double, uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], ipvpointbonus: Option[Int] = Some(0))
  /** GetResult implicit for fetching TblproductpriceBaseRow objects using plain SQL queries */
  implicit def GetResultTblproductpriceBaseRow(implicit e0: GR[String], e1: GR[Double], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Int]]): GR[TblproductpriceBaseRow] = GR{
    prs => import prs._
    TblproductpriceBaseRow.tupled((<<[String], <<[String], <<[String], <<[Double], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[Int]))
  }
  /** Table description of table tblproductPrice_Base. Objects of this class serve as prototypes for rows in queries. */
  class TblproductpriceBase(_tableTag: Tag) extends Table[TblproductpriceBaseRow](_tableTag, Some("dbo"), "tblproductPrice_Base") {
    def * = (uid, uidproduct, cdcurrency, fsaleprice, uidcreator, dtcreate, uidmodifier, dtmodify, ipvpointbonus) <> (TblproductpriceBaseRow.tupled, TblproductpriceBaseRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidproduct.?, cdcurrency.?, fsaleprice.?, uidcreator, dtcreate, uidmodifier, dtmodify, ipvpointbonus).shaped.<>({r=>import r._; _1.map(_=> TblproductpriceBaseRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidProduct DBType(uniqueidentifier), Length(36,false) */
    val uidproduct: Column[String] = column[String]("uidProduct", O.Length(36,varying=false))
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[String] = column[String]("cdCurrency", O.Length(4,varying=false))
    /** Database column fSalePrice DBType(float) */
    val fsaleprice: Column[Double] = column[Double]("fSalePrice")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column iPvPointBonus DBType(int), Default(Some(0)) */
    val ipvpointbonus: Column[Option[Int]] = column[Option[Int]]("iPvPointBonus", O.Default(Some(0)))
    
    /** Primary key of TblproductpriceBase (database name PK_tblproductPrice_Base) */
    val pk = primaryKey("PK_tblproductPrice_Base", (uidproduct, cdcurrency))
  }
  /** Collection-like TableQuery object for table TblproductpriceBase */
  lazy val TblproductpriceBase = new TableQuery(tag => new TblproductpriceBase(tag))
  
  /** Entity class storing rows of table TblproductTrans
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param istran Database column isTran DBType(char), Length(1,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param isvalid Database column isValid DBType(char), Length(1,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblproductTransRow(uid: String, istran: String, cdcenter: String, szprodid: String, dtstrdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], isvalid: String, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblproductTransRow objects using plain SQL queries */
  implicit def GetResultTblproductTransRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]]): GR[TblproductTransRow] = GR{
    prs => import prs._
    TblproductTransRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblProduct_Trans. Objects of this class serve as prototypes for rows in queries. */
  class TblproductTrans(_tableTag: Tag) extends Table[TblproductTransRow](_tableTag, Some("dbo"), "tblProduct_Trans") {
    def * = (uid, istran, cdcenter, szprodid, dtstrdate, dtenddate, isvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblproductTransRow.tupled, TblproductTransRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, istran.?, cdcenter.?, szprodid.?, dtstrdate, dtenddate, isvalid.?, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblproductTransRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7.get, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column isTran DBType(char), Length(1,false) */
    val istran: Column[String] = column[String]("isTran", O.Length(1,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column isValid DBType(char), Length(1,false) */
    val isvalid: Column[String] = column[String]("isValid", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of TblproductTrans (database name PK_tblProduct_Trans) */
    val pk = primaryKey("PK_tblProduct_Trans", (cdcenter, szprodid))
  }
  /** Collection-like TableQuery object for table TblproductTrans */
  lazy val TblproductTrans = new TableQuery(tag => new TblproductTrans(tag))
  
  /** Entity class storing rows of table Tblproject
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdproject Database column cdProject DBType(char), Length(15,false)
   *  @param cdprojectitem Database column cdProjectItem DBType(char), Length(2,false)
   *  @param dtstartdate Database column dtStartDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param cdtype Database column cdType DBType(char), Length(11,false)
   *  @param szdesc Database column szDesc DBType(nchar), Length(80,false)
   *  @param cdproduct Database column cdProduct DBType(char), Length(15,false)
   *  @param isforsale Database column isForSale DBType(bit)
   *  @param isformachine Database column isForMachine DBType(bit)
   *  @param ismainproduct Database column isMainProduct DBType(bit)
   *  @param iqty Database column iQty DBType(int)
   *  @param iminusqty Database column iMinusQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblprojectRow(uid: String, cdproject: Option[String], cdprojectitem: Option[String], dtstartdate: Option[java.sql.Timestamp], dtenddate: Option[java.sql.Timestamp], cdtype: Option[String], szdesc: Option[String], cdproduct: Option[String], isforsale: Option[Boolean], isformachine: Option[Boolean], ismainproduct: Option[Boolean], iqty: Option[Int], iminusqty: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblprojectRow objects using plain SQL queries */
  implicit def GetResultTblprojectRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]], e4: GR[Option[Int]]): GR[TblprojectRow] = GR{
    prs => import prs._
    TblprojectRow.tupled((<<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[Boolean], <<?[Boolean], <<?[Int], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblProject. Objects of this class serve as prototypes for rows in queries. */
  class Tblproject(_tableTag: Tag) extends Table[TblprojectRow](_tableTag, Some("dbo"), "tblProject") {
    def * = (uid, cdproject, cdprojectitem, dtstartdate, dtenddate, cdtype, szdesc, cdproduct, isforsale, isformachine, ismainproduct, iqty, iminusqty, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblprojectRow.tupled, TblprojectRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdproject, cdprojectitem, dtstartdate, dtenddate, cdtype, szdesc, cdproduct, isforsale, isformachine, ismainproduct, iqty, iminusqty, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblprojectRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
    /** Database column cdProjectItem DBType(char), Length(2,false) */
    val cdprojectitem: Column[Option[String]] = column[Option[String]]("cdProjectItem", O.Length(2,varying=false))
    /** Database column dtStartDate DBType(datetime) */
    val dtstartdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStartDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
    /** Database column cdType DBType(char), Length(11,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(11,varying=false))
    /** Database column szDesc DBType(nchar), Length(80,false) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(80,varying=false))
    /** Database column cdProduct DBType(char), Length(15,false) */
    val cdproduct: Column[Option[String]] = column[Option[String]]("cdProduct", O.Length(15,varying=false))
    /** Database column isForSale DBType(bit) */
    val isforsale: Column[Option[Boolean]] = column[Option[Boolean]]("isForSale")
    /** Database column isForMachine DBType(bit) */
    val isformachine: Column[Option[Boolean]] = column[Option[Boolean]]("isForMachine")
    /** Database column isMainProduct DBType(bit) */
    val ismainproduct: Column[Option[Boolean]] = column[Option[Boolean]]("isMainProduct")
    /** Database column iQty DBType(int) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty")
    /** Database column iMinusQty DBType(int) */
    val iminusqty: Column[Option[Int]] = column[Option[Int]]("iMinusQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Index over (cdproject,cdprojectitem,cdtype,cdproduct) (database name IX_tblProject) */
    val index1 = index("IX_tblProject", (cdproject, cdprojectitem, cdtype, cdproduct))
  }
  /** Collection-like TableQuery object for table Tblproject */
  lazy val Tblproject = new TableQuery(tag => new Tblproject(tag))
  
  /** Entity class storing rows of table Tblqa
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdqatype Database column cdQAType DBType(char), Length(2,false)
   *  @param cdqasubtype Database column cdQASubType DBType(char), Length(3,false)
   *  @param cdqaitem Database column cdQAItem DBType(char), Length(3,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szqadesc Database column szQADesc DBType(nchar), Length(255,false)
   *  @param isfixeditem Database column isFixedItem DBType(bit)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byts DBType(timestamp) */
  case class TblqaRow(uid: String, cdqatype: String, cdqasubtype: String, cdqaitem: String, cdlanguage: String, szqadesc: Option[String], isfixeditem: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblqaRow objects using plain SQL queries */
  implicit def GetResultTblqaRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Boolean]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblqaRow] = GR{
    prs => import prs._
    TblqaRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[String], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblQA. Objects of this class serve as prototypes for rows in queries. */
  class Tblqa(_tableTag: Tag) extends Table[TblqaRow](_tableTag, Some("dbo"), "tblQA") {
    def * = (uid, cdqatype, cdqasubtype, cdqaitem, cdlanguage, szqadesc, isfixeditem, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblqaRow.tupled, TblqaRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdqatype.?, cdqasubtype.?, cdqaitem.?, cdlanguage.?, szqadesc, isfixeditem, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblqaRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdQAType DBType(char), Length(2,false) */
    val cdqatype: Column[String] = column[String]("cdQAType", O.Length(2,varying=false))
    /** Database column cdQASubType DBType(char), Length(3,false) */
    val cdqasubtype: Column[String] = column[String]("cdQASubType", O.Length(3,varying=false))
    /** Database column cdQAItem DBType(char), Length(3,false) */
    val cdqaitem: Column[String] = column[String]("cdQAItem", O.Length(3,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szQADesc DBType(nchar), Length(255,false) */
    val szqadesc: Column[Option[String]] = column[Option[String]]("szQADesc", O.Length(255,varying=false))
    /** Database column isFixedItem DBType(bit) */
    val isfixeditem: Column[Option[Boolean]] = column[Option[Boolean]]("isFixedItem")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    
    /** Primary key of Tblqa (database name PK_tblQA) */
    val pk = primaryKey("PK_tblQA", (cdqatype, cdqasubtype, cdqaitem, cdlanguage))
    
    /** Uniqueness Index over (uid) (database name IX_tblQA) */
    val index1 = index("IX_tblQA", uid, unique=true)
  }
  /** Collection-like TableQuery object for table Tblqa */
  lazy val Tblqa = new TableQuery(tag => new Tblqa(tag))
  
  /** Entity class storing rows of table Tblqad
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidqa Database column uidQA DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param cdtype Database column cdType DBType(char), Length(1,false)
   *  @param szanswer Database column szAnswer DBType(nchar), Length(512,false)
   *  @param iqty Database column iQty DBType(int)
   *  @param cdpart Database column cdPart DBType(char), Length(15,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblqadRow(uid: String, uidqa: String, cdlanguage: String, cdtype: String, szanswer: Option[String], iqty: Option[Int], cdpart: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblqadRow objects using plain SQL queries */
  implicit def GetResultTblqadRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]]): GR[TblqadRow] = GR{
    prs => import prs._
    TblqadRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[Int], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblQAD. Objects of this class serve as prototypes for rows in queries. */
  class Tblqad(_tableTag: Tag) extends Table[TblqadRow](_tableTag, Some("dbo"), "tblQAD") {
    def * = (uid, uidqa, cdlanguage, cdtype, szanswer, iqty, cdpart, uidmodifier, dtmodify) <> (TblqadRow.tupled, TblqadRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidqa.?, cdlanguage.?, cdtype.?, szanswer, iqty, cdpart, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblqadRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidQA DBType(uniqueidentifier), Length(36,false) */
    val uidqa: Column[String] = column[String]("uidQA", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(1,varying=false))
    /** Database column szAnswer DBType(nchar), Length(512,false) */
    val szanswer: Column[Option[String]] = column[Option[String]]("szAnswer", O.Length(512,varying=false))
    /** Database column iQty DBType(int) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty")
    /** Database column cdPart DBType(char), Length(15,false) */
    val cdpart: Column[Option[String]] = column[Option[String]]("cdPart", O.Length(15,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Index over (uidqa) (database name IX_tblQAD) */
    val index1 = index("IX_tblQAD", uidqa)
  }
  /** Collection-like TableQuery object for table Tblqad */
  lazy val Tblqad = new TableQuery(tag => new Tblqad(tag))
  
  /** Entity class storing rows of table Tblquestion
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param iseq Database column iSeq DBType(int)
   *  @param cdquestiontype Database column cdQuestionType DBType(char), Length(2,false)
   *  @param cdversion Database column cdVersion DBType(char), Length(2,false), Default(01)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblquestionRow(uid: String, cdpersa: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, iseq: Int, cdquestiontype: String, cdversion: String = "01", uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblquestionRow objects using plain SQL queries */
  implicit def GetResultTblquestionRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Int], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblquestionRow] = GR{
    prs => import prs._
    TblquestionRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[Int], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblQuestion. Objects of this class serve as prototypes for rows in queries. */
  class Tblquestion(_tableTag: Tag) extends Table[TblquestionRow](_tableTag, Some("dbo"), "tblQuestion") {
    def * = (uid, cdpersa, dtstrdate, dtenddate, iseq, cdquestiontype, cdversion, uidcreator, dtcreate, byts) <> (TblquestionRow.tupled, TblquestionRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpersa.?, dtstrdate.?, dtenddate.?, iseq.?, cdquestiontype.?, cdversion.?, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblquestionRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdQuestionType DBType(char), Length(2,false) */
    val cdquestiontype: Column[String] = column[String]("cdQuestionType", O.Length(2,varying=false))
    /** Database column cdVersion DBType(char), Length(2,false), Default(01) */
    val cdversion: Column[String] = column[String]("cdVersion", O.Length(2,varying=false), O.Default("01"))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblquestion (database name PK_tblQuestion) */
    val pk = primaryKey("PK_tblQuestion", (cdpersa, dtenddate, iseq, cdquestiontype, cdversion))
  }
  /** Collection-like TableQuery object for table Tblquestion */
  lazy val Tblquestion = new TableQuery(tag => new Tblquestion(tag))
  
  /** Entity class storing rows of table Tblquestiond
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param uidquestion Database column uidQuestion DBType(uniqueidentifier), Length(36,false)
   *  @param szquestion Database column szQuestion DBType(nchar), Length(255,false), Default(Some())
   *  @param szremark Database column szRemark DBType(nchar), Length(120,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblquestiondRow(uid: String, cdlanguage: String = "zh-CHT", uidquestion: String, szquestion: Option[String] = Some(""), szremark: Option[String] = Some(""), uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblquestiondRow objects using plain SQL queries */
  implicit def GetResultTblquestiondRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblquestiondRow] = GR{
    prs => import prs._
    TblquestiondRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblQuestionD. Objects of this class serve as prototypes for rows in queries. */
  class Tblquestiond(_tableTag: Tag) extends Table[TblquestiondRow](_tableTag, Some("dbo"), "tblQuestionD") {
    def * = (uid, cdlanguage, uidquestion, szquestion, szremark, uidmodifier, dtmodify) <> (TblquestiondRow.tupled, TblquestiondRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdlanguage.?, uidquestion.?, szquestion, szremark, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblquestiondRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column uidQuestion DBType(uniqueidentifier), Length(36,false) */
    val uidquestion: Column[String] = column[String]("uidQuestion", O.Length(36,varying=false))
    /** Database column szQuestion DBType(nchar), Length(255,false), Default(Some()) */
    val szquestion: Column[Option[String]] = column[Option[String]]("szQuestion", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(120,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblquestiond (database name PK_tblQuestionD) */
    val pk = primaryKey("PK_tblQuestionD", (cdlanguage, uidquestion))
  }
  /** Collection-like TableQuery object for table Tblquestiond */
  lazy val Tblquestiond = new TableQuery(tag => new Tblquestiond(tag))
  
  /** Entity class storing rows of table Tblrefund
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cdrfid Database column cdRfId DBType(char), PrimaryKey, Length(14,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param szname Database column szName DBType(nchar), Length(128,false)
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param szstatus Database column szStatus DBType(char), Length(1,false)
   *  @param isvalid Database column isValid DBType(char), Length(1,false)
   *  @param szpsuppmemo Database column szPSuppMemo DBType(nchar), Length(255,false)
   *  @param cdsourceid Database column cdSourceId DBType(char), Length(14,false)
   *  @param cdsourceprefix Database column cdSourcePrefix DBType(char), Length(2,false)
   *  @param dtrefunddate Database column dtRefundDate DBType(datetime)
   *  @param szrefunduser Database column szRefundUser DBType(nchar), Length(80,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblrefundRow(uid: String, cdcenter: String, cdrfid: String, cdmember: Option[String], szname: Option[String], cdwarehouse: Option[String], szstatus: Option[String], isvalid: Option[String], szpsuppmemo: Option[String], cdsourceid: Option[String], cdsourceprefix: Option[String], dtrefunddate: Option[java.sql.Timestamp], szrefunduser: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblrefundRow objects using plain SQL queries */
  implicit def GetResultTblrefundRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblrefundRow] = GR{
    prs => import prs._
    TblrefundRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblRefund. Objects of this class serve as prototypes for rows in queries. */
  class Tblrefund(_tableTag: Tag) extends Table[TblrefundRow](_tableTag, Some("dbo"), "tblRefund") {
    def * = (uid, cdcenter, cdrfid, cdmember, szname, cdwarehouse, szstatus, isvalid, szpsuppmemo, cdsourceid, cdsourceprefix, dtrefunddate, szrefunduser, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblrefundRow.tupled, TblrefundRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cdrfid.?, cdmember, szname, cdwarehouse, szstatus, isvalid, szpsuppmemo, cdsourceid, cdsourceprefix, dtrefunddate, szrefunduser, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblrefundRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdRfId DBType(char), PrimaryKey, Length(14,false) */
    val cdrfid: Column[String] = column[String]("cdRfId", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szName DBType(nchar), Length(128,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(128,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[Option[String]] = column[Option[String]]("cdWareHouse", O.Length(4,varying=false))
    /** Database column szStatus DBType(char), Length(1,false) */
    val szstatus: Column[Option[String]] = column[Option[String]]("szStatus", O.Length(1,varying=false))
    /** Database column isValid DBType(char), Length(1,false) */
    val isvalid: Column[Option[String]] = column[Option[String]]("isValid", O.Length(1,varying=false))
    /** Database column szPSuppMemo DBType(nchar), Length(255,false) */
    val szpsuppmemo: Column[Option[String]] = column[Option[String]]("szPSuppMemo", O.Length(255,varying=false))
    /** Database column cdSourceId DBType(char), Length(14,false) */
    val cdsourceid: Column[Option[String]] = column[Option[String]]("cdSourceId", O.Length(14,varying=false))
    /** Database column cdSourcePrefix DBType(char), Length(2,false) */
    val cdsourceprefix: Column[Option[String]] = column[Option[String]]("cdSourcePrefix", O.Length(2,varying=false))
    /** Database column dtRefundDate DBType(datetime) */
    val dtrefunddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtRefundDate")
    /** Database column szRefundUser DBType(nchar), Length(80,false) */
    val szrefunduser: Column[Option[String]] = column[Option[String]]("szRefundUser", O.Length(80,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblrefund */
  lazy val Tblrefund = new TableQuery(tag => new Tblrefund(tag))
  
  /** Entity class storing rows of table Tblrefundd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdrfid Database column cdRfId DBType(char), Length(14,false)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param irefundqty Database column iRefundQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblrefunddRow(uid: String, cdrfid: String, szprodid: String, irefundqty: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblrefunddRow objects using plain SQL queries */
  implicit def GetResultTblrefunddRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblrefunddRow] = GR{
    prs => import prs._
    TblrefunddRow.tupled((<<[String], <<[String], <<[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblRefundD. Objects of this class serve as prototypes for rows in queries. */
  class Tblrefundd(_tableTag: Tag) extends Table[TblrefunddRow](_tableTag, Some("dbo"), "tblRefundD") {
    def * = (uid, cdrfid, szprodid, irefundqty, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblrefunddRow.tupled, TblrefunddRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdrfid.?, szprodid.?, irefundqty, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblrefunddRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdRfId DBType(char), Length(14,false) */
    val cdrfid: Column[String] = column[String]("cdRfId", O.Length(14,varying=false))
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column iRefundQty DBType(int) */
    val irefundqty: Column[Option[Int]] = column[Option[Int]]("iRefundQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblrefundd (database name PK_tblRefundD) */
    val pk = primaryKey("PK_tblRefundD", (cdrfid, szprodid))
  }
  /** Collection-like TableQuery object for table Tblrefundd */
  lazy val Tblrefundd = new TableQuery(tag => new Tblrefundd(tag))
  
  /** Entity class storing rows of table Tblrepaird
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdrepairno Database column cdRepairNo DBType(char), Length(14,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param cdserialno Database column cdSerialNo DBType(char), Length(20,false)
   *  @param szproblemdesc Database column szProblemDesc DBType(nchar), Length(255,false)
   *  @param frepairamt Database column fRepairAmt DBType(float)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false)
   *  @param cdpercent Database column cdPercent DBType(char), Length(1,false)
   *  @param cdmfid Database column cdMfId DBType(char), Length(14,false)
   *  @param dtpsupp Database column dtPSupp DBType(datetime)
   *  @param cdfreightid Database column cdFreightID DBType(char), Length(20,false)
   *  @param uidfreight Database column uidFreight DBType(uniqueidentifier), Length(36,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblrepairdRow(uid: String, cdrepairno: String, iseq: Int, szprodid: String, cdserialno: Option[String], szproblemdesc: Option[String], frepairamt: Option[Double], cdstatus: Option[String], cdpercent: Option[String], cdmfid: Option[String], dtpsupp: Option[java.sql.Timestamp], cdfreightid: Option[String], uidfreight: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblrepairdRow objects using plain SQL queries */
  implicit def GetResultTblrepairdRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[Double]], e4: GR[Option[java.sql.Timestamp]]): GR[TblrepairdRow] = GR{
    prs => import prs._
    TblrepairdRow.tupled((<<[String], <<[String], <<[Int], <<[String], <<?[String], <<?[String], <<?[Double], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblRepairD. Objects of this class serve as prototypes for rows in queries. */
  class Tblrepaird(_tableTag: Tag) extends Table[TblrepairdRow](_tableTag, Some("dbo"), "tblRepairD") {
    def * = (uid, cdrepairno, iseq, szprodid, cdserialno, szproblemdesc, frepairamt, cdstatus, cdpercent, cdmfid, dtpsupp, cdfreightid, uidfreight, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblrepairdRow.tupled, TblrepairdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdrepairno.?, iseq.?, szprodid.?, cdserialno, szproblemdesc, frepairamt, cdstatus, cdpercent, cdmfid, dtpsupp, cdfreightid, uidfreight, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblrepairdRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdRepairNo DBType(char), Length(14,false) */
    val cdrepairno: Column[String] = column[String]("cdRepairNo", O.Length(14,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdSerialNo DBType(char), Length(20,false) */
    val cdserialno: Column[Option[String]] = column[Option[String]]("cdSerialNo", O.Length(20,varying=false))
    /** Database column szProblemDesc DBType(nchar), Length(255,false) */
    val szproblemdesc: Column[Option[String]] = column[Option[String]]("szProblemDesc", O.Length(255,varying=false))
    /** Database column fRepairAmt DBType(float) */
    val frepairamt: Column[Option[Double]] = column[Option[Double]]("fRepairAmt")
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column cdPercent DBType(char), Length(1,false) */
    val cdpercent: Column[Option[String]] = column[Option[String]]("cdPercent", O.Length(1,varying=false))
    /** Database column cdMfId DBType(char), Length(14,false) */
    val cdmfid: Column[Option[String]] = column[Option[String]]("cdMfId", O.Length(14,varying=false))
    /** Database column dtPSupp DBType(datetime) */
    val dtpsupp: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPSupp")
    /** Database column cdFreightID DBType(char), Length(20,false) */
    val cdfreightid: Column[Option[String]] = column[Option[String]]("cdFreightID", O.Length(20,varying=false))
    /** Database column uidFreight DBType(uniqueidentifier), Length(36,false) */
    val uidfreight: Column[Option[String]] = column[Option[String]]("uidFreight", O.Length(36,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblrepaird (database name PK_tblRepairD) */
    val pk = primaryKey("PK_tblRepairD", (cdrepairno, iseq))
  }
  /** Collection-like TableQuery object for table Tblrepaird */
  lazy val Tblrepaird = new TableQuery(tag => new Tblrepaird(tag))
  
  /** Entity class storing rows of table Tblrepairdlist
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdrepairno Database column cdRepairNo DBType(char), Length(14,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param irepairqty Database column iRepairQty DBType(int)
   *  @param iuseqty Database column iUseQty DBType(int)
   *  @param ispv Database column isPV DBType(bit), Default(Some(false))
   *  @param ipvpoint Database column iPvPoint DBType(int), Default(Some(0))
   *  @param cdwareid Database column cdWareID DBType(char), Length(15,false)
   *  @param frepairamt Database column fRepairAmt DBType(float)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblrepairdlistRow(uid: String, cdrepairno: String, iseq: Int, szprodid: String, irepairqty: Option[Int], iuseqty: Option[Int], ispv: Option[Boolean] = Some(false), ipvpoint: Option[Int] = Some(0), cdwareid: Option[String], frepairamt: Option[Double], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblrepairdlistRow objects using plain SQL queries */
  implicit def GetResultTblrepairdlistRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[Int]], e3: GR[Option[Boolean]], e4: GR[Option[String]], e5: GR[Option[Double]], e6: GR[Option[java.sql.Timestamp]]): GR[TblrepairdlistRow] = GR{
    prs => import prs._
    TblrepairdlistRow.tupled((<<[String], <<[String], <<[Int], <<[String], <<?[Int], <<?[Int], <<?[Boolean], <<?[Int], <<?[String], <<?[Double], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblRepairDList. Objects of this class serve as prototypes for rows in queries. */
  class Tblrepairdlist(_tableTag: Tag) extends Table[TblrepairdlistRow](_tableTag, Some("dbo"), "tblRepairDList") {
    def * = (uid, cdrepairno, iseq, szprodid, irepairqty, iuseqty, ispv, ipvpoint, cdwareid, frepairamt, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblrepairdlistRow.tupled, TblrepairdlistRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdrepairno.?, iseq.?, szprodid.?, irepairqty, iuseqty, ispv, ipvpoint, cdwareid, frepairamt, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblrepairdlistRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdRepairNo DBType(char), Length(14,false) */
    val cdrepairno: Column[String] = column[String]("cdRepairNo", O.Length(14,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column iRepairQty DBType(int) */
    val irepairqty: Column[Option[Int]] = column[Option[Int]]("iRepairQty")
    /** Database column iUseQty DBType(int) */
    val iuseqty: Column[Option[Int]] = column[Option[Int]]("iUseQty")
    /** Database column isPV DBType(bit), Default(Some(false)) */
    val ispv: Column[Option[Boolean]] = column[Option[Boolean]]("isPV", O.Default(Some(false)))
    /** Database column iPvPoint DBType(int), Default(Some(0)) */
    val ipvpoint: Column[Option[Int]] = column[Option[Int]]("iPvPoint", O.Default(Some(0)))
    /** Database column cdWareID DBType(char), Length(15,false) */
    val cdwareid: Column[Option[String]] = column[Option[String]]("cdWareID", O.Length(15,varying=false))
    /** Database column fRepairAmt DBType(float) */
    val frepairamt: Column[Option[Double]] = column[Option[Double]]("fRepairAmt")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblrepairdlist (database name PK_tblRepairDList) */
    val pk = primaryKey("PK_tblRepairDList", (cdrepairno, iseq, szprodid))
  }
  /** Collection-like TableQuery object for table Tblrepairdlist */
  lazy val Tblrepairdlist = new TableQuery(tag => new Tblrepairdlist(tag))
  
  /** Row type of table Tblrepairm */
  type TblrepairmRow = HCons[String,HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[Option[String],HCons[Option[String],HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblrepairmRow providing default values if available in the database schema. */
  def TblrepairmRow(uid: String, cdcenter: String, cdrepairno: String, dtrepair: java.sql.Timestamp, cdmember: Option[String], szcustname: Option[String], cdtakeby: String, cdtimeblock: Option[String], szaddressee: Option[String], sztel: Option[String], szext: Option[String], szcell: Option[String], cdcountry: Option[String], cdarea: Option[String], cdcity: Option[String], cdzip: Option[String], szaddress: Option[String], szfulladdr: Option[String], szpsuppmemo: Option[String], szstatus: Option[String], isvalid: Option[String], cdwarehouse: Option[String], uidinemp: Option[String], cdinemp: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): TblrepairmRow = {
    uid :: cdcenter :: cdrepairno :: dtrepair :: cdmember :: szcustname :: cdtakeby :: cdtimeblock :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdarea :: cdcity :: cdzip :: szaddress :: szfulladdr :: szpsuppmemo :: szstatus :: isvalid :: cdwarehouse :: uidinemp :: cdinemp :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching TblrepairmRow objects using plain SQL queries */
  implicit def GetResultTblrepairmRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblrepairmRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblRepairM. Objects of this class serve as prototypes for rows in queries. */
  class Tblrepairm(_tableTag: Tag) extends Table[TblrepairmRow](_tableTag, Some("dbo"), "tblRepairM") {
    def * = uid :: cdcenter :: cdrepairno :: dtrepair :: cdmember :: szcustname :: cdtakeby :: cdtimeblock :: szaddressee :: sztel :: szext :: szcell :: cdcountry :: cdarea :: cdcity :: cdzip :: szaddress :: szfulladdr :: szpsuppmemo :: szstatus :: isvalid :: cdwarehouse :: uidinemp :: cdinemp :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdRepairNo DBType(char), PrimaryKey, Length(14,false) */
    val cdrepairno: Column[String] = column[String]("cdRepairNo", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column dtRepair DBType(datetime) */
    val dtrepair: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtRepair")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szCustName DBType(nchar), Length(80,false) */
    val szcustname: Column[Option[String]] = column[Option[String]]("szCustName", O.Length(80,varying=false))
    /** Database column cdTakeBy DBType(char), Length(1,false) */
    val cdtakeby: Column[String] = column[String]("cdTakeBy", O.Length(1,varying=false))
    /** Database column cdTimeBlock DBType(char), Length(1,false) */
    val cdtimeblock: Column[Option[String]] = column[Option[String]]("cdTimeBlock", O.Length(1,varying=false))
    /** Database column szAddressee DBType(nchar), Length(80,false) */
    val szaddressee: Column[Option[String]] = column[Option[String]]("szAddressee", O.Length(80,varying=false))
    /** Database column szTel DBType(nchar), Length(128,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(128,varying=false))
    /** Database column szExt DBType(nchar), Length(10,false) */
    val szext: Column[Option[String]] = column[Option[String]]("szExt", O.Length(10,varying=false))
    /** Database column szCell DBType(nchar), Length(128,false) */
    val szcell: Column[Option[String]] = column[Option[String]]("szCell", O.Length(128,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(10,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szAddress DBType(nchar), Length(128,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column szPSuppMemo DBType(nchar), Length(255,false) */
    val szpsuppmemo: Column[Option[String]] = column[Option[String]]("szPSuppMemo", O.Length(255,varying=false))
    /** Database column szStatus DBType(char), Length(1,false) */
    val szstatus: Column[Option[String]] = column[Option[String]]("szStatus", O.Length(1,varying=false))
    /** Database column isValid DBType(char), Length(1,false) */
    val isvalid: Column[Option[String]] = column[Option[String]]("isValid", O.Length(1,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[Option[String]] = column[Option[String]]("cdWareHouse", O.Length(4,varying=false))
    /** Database column uidInEmp DBType(uniqueidentifier), Length(36,false) */
    val uidinemp: Column[Option[String]] = column[Option[String]]("uidInEmp", O.Length(36,varying=false))
    /** Database column cdInEmp DBType(char), Length(8,false) */
    val cdinemp: Column[Option[String]] = column[Option[String]]("cdInEmp", O.Length(8,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblrepairm */
  lazy val Tblrepairm = new TableQuery(tag => new Tblrepairm(tag))
  
  /** Entity class storing rows of table Tblreportbat
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param idbatchno Database column idBatchNo DBType(int identity), AutoInc, PrimaryKey
   *  @param cdreportcode Database column cdReportCode DBType(char), Length(10,false)
   *  @param szreportname Database column szReportName DBType(nchar), Length(255,false)
   *  @param szreportfile Database column szReportFile DBType(char), Length(30,false)
   *  @param szreportap Database column szReportAP DBType(char), Length(255,false)
   *  @param sztemptable Database column szTempTable DBType(char), Length(255,false)
   *  @param szdatatable Database column szDataTable DBType(char), Length(30,false)
   *  @param szkeyfields Database column szKeyFields DBType(char), Length(512,false)
   *  @param szdatafields Database column szDataFields DBType(char), Length(512,false)
   *  @param szwhere Database column szWhere DBType(char), Length(512,false)
   *  @param szreportdesc Database column szReportDesc DBType(nchar), Length(128,false), Default(Some())
   *  @param isbackground Database column isBackground DBType(bit), Default(Some(false))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblreportbatRow(uid: Option[String], idbatchno: Int, cdreportcode: String, szreportname: Option[String], szreportfile: Option[String], szreportap: Option[String], sztemptable: Option[String], szdatatable: Option[String], szkeyfields: Option[String], szdatafields: Option[String], szwhere: Option[String], szreportdesc: Option[String] = Some(""), isbackground: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblreportbatRow objects using plain SQL queries */
  implicit def GetResultTblreportbatRow(implicit e0: GR[Option[String]], e1: GR[Int], e2: GR[String], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]]): GR[TblreportbatRow] = GR{
    prs => import prs._
    TblreportbatRow.tupled((<<?[String], <<[Int], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblReportBat. Objects of this class serve as prototypes for rows in queries. */
  class Tblreportbat(_tableTag: Tag) extends Table[TblreportbatRow](_tableTag, Some("dbo"), "tblReportBat") {
    def * = (uid, idbatchno, cdreportcode, szreportname, szreportfile, szreportap, sztemptable, szdatatable, szkeyfields, szdatafields, szwhere, szreportdesc, isbackground, uidcreator, dtcreate) <> (TblreportbatRow.tupled, TblreportbatRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, idbatchno.?, cdreportcode.?, szreportname, szreportfile, szreportap, sztemptable, szdatatable, szkeyfields, szdatafields, szwhere, szreportdesc, isbackground, uidcreator, dtcreate).shaped.<>({r=>import r._; _2.map(_=> TblreportbatRow.tupled((_1, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column idBatchNo DBType(int identity), AutoInc, PrimaryKey */
    val idbatchno: Column[Int] = column[Int]("idBatchNo", O.AutoInc, O.PrimaryKey)
    /** Database column cdReportCode DBType(char), Length(10,false) */
    val cdreportcode: Column[String] = column[String]("cdReportCode", O.Length(10,varying=false))
    /** Database column szReportName DBType(nchar), Length(255,false) */
    val szreportname: Column[Option[String]] = column[Option[String]]("szReportName", O.Length(255,varying=false))
    /** Database column szReportFile DBType(char), Length(30,false) */
    val szreportfile: Column[Option[String]] = column[Option[String]]("szReportFile", O.Length(30,varying=false))
    /** Database column szReportAP DBType(char), Length(255,false) */
    val szreportap: Column[Option[String]] = column[Option[String]]("szReportAP", O.Length(255,varying=false))
    /** Database column szTempTable DBType(char), Length(255,false) */
    val sztemptable: Column[Option[String]] = column[Option[String]]("szTempTable", O.Length(255,varying=false))
    /** Database column szDataTable DBType(char), Length(30,false) */
    val szdatatable: Column[Option[String]] = column[Option[String]]("szDataTable", O.Length(30,varying=false))
    /** Database column szKeyFields DBType(char), Length(512,false) */
    val szkeyfields: Column[Option[String]] = column[Option[String]]("szKeyFields", O.Length(512,varying=false))
    /** Database column szDataFields DBType(char), Length(512,false) */
    val szdatafields: Column[Option[String]] = column[Option[String]]("szDataFields", O.Length(512,varying=false))
    /** Database column szWhere DBType(char), Length(512,false) */
    val szwhere: Column[Option[String]] = column[Option[String]]("szWhere", O.Length(512,varying=false))
    /** Database column szReportDesc DBType(nchar), Length(128,false), Default(Some()) */
    val szreportdesc: Column[Option[String]] = column[Option[String]]("szReportDesc", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column isBackground DBType(bit), Default(Some(false)) */
    val isbackground: Column[Option[Boolean]] = column[Option[Boolean]]("isBackground", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
  }
  /** Collection-like TableQuery object for table Tblreportbat */
  lazy val Tblreportbat = new TableQuery(tag => new Tblreportbat(tag))
  
  /** Entity class storing rows of table Tblreportlist
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param idbatchno Database column idBatchNo DBType(int identity), AutoInc
   *  @param cdnumber Database column cdNumber DBType(char), Length(10,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblreportlistRow(uid: String, idbatchno: Int, cdnumber: String, dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblreportlistRow objects using plain SQL queries */
  implicit def GetResultTblreportlistRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[java.sql.Timestamp]]): GR[TblreportlistRow] = GR{
    prs => import prs._
    TblreportlistRow.tupled((<<[String], <<[Int], <<[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblReportList. Objects of this class serve as prototypes for rows in queries. */
  class Tblreportlist(_tableTag: Tag) extends Table[TblreportlistRow](_tableTag, Some("dbo"), "tblReportList") {
    def * = (uid, idbatchno, cdnumber, dtcreate) <> (TblreportlistRow.tupled, TblreportlistRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, idbatchno.?, cdnumber.?, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblreportlistRow.tupled((_1.get, _2.get, _3.get, _4)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column idBatchNo DBType(int identity), AutoInc */
    val idbatchno: Column[Int] = column[Int]("idBatchNo", O.AutoInc)
    /** Database column cdNumber DBType(char), Length(10,false) */
    val cdnumber: Column[String] = column[String]("cdNumber", O.Length(10,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    
    /** Primary key of Tblreportlist (database name PK_tblReportList_1) */
    val pk = primaryKey("PK_tblReportList_1", (idbatchno, cdnumber))
  }
  /** Collection-like TableQuery object for table Tblreportlist */
  lazy val Tblreportlist = new TableQuery(tag => new Tblreportlist(tag))
  
  /** Entity class storing rows of table Tblreportsetting
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false), Default()
   *  @param cdreporttype Database column cdReportType DBType(char), Length(10,false)
   *  @param cdreportcode Database column cdReportCode DBType(char), Length(10,false)
   *  @param szreportname Database column szReportName DBType(nchar), Length(255,false), Default(Some())
   *  @param szreportfile Database column szReportFile DBType(char), Length(30,false), Default(Some())
   *  @param szreportap Database column szReportAP DBType(char), Length(255,false), Default(Some())
   *  @param sztemptable Database column szTempTable DBType(char), Length(30,false), Default(Some())
   *  @param szdatatable Database column szDataTable DBType(char), Length(30,false), Default(Some())
   *  @param szkeyfields Database column szKeyFields DBType(char), Length(512,false), Default(Some())
   *  @param szdatafields Database column szDataFields DBType(char), Length(512,false), Default(Some())
   *  @param szexpfieldname Database column szExpFieldName DBType(nchar), Length(250,false), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblreportsettingRow(cdcenter: String = "", cdreporttype: Option[String], cdreportcode: String, szreportname: Option[String] = Some(""), szreportfile: Option[String] = Some(""), szreportap: Option[String] = Some(""), sztemptable: Option[String] = Some(""), szdatatable: Option[String] = Some(""), szkeyfields: Option[String] = Some(""), szdatafields: Option[String] = Some(""), szexpfieldname: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblreportsettingRow objects using plain SQL queries */
  implicit def GetResultTblreportsettingRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblreportsettingRow] = GR{
    prs => import prs._
    TblreportsettingRow.tupled((<<[String], <<?[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblReportSetting. Objects of this class serve as prototypes for rows in queries. */
  class Tblreportsetting(_tableTag: Tag) extends Table[TblreportsettingRow](_tableTag, Some("dbo"), "tblReportSetting") {
    def * = (cdcenter, cdreporttype, cdreportcode, szreportname, szreportfile, szreportap, sztemptable, szdatatable, szkeyfields, szdatafields, szexpfieldname, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblreportsettingRow.tupled, TblreportsettingRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdcenter.?, cdreporttype, cdreportcode.?, szreportname, szreportfile, szreportap, sztemptable, szdatatable, szkeyfields, szdatafields, szexpfieldname, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblreportsettingRow.tupled((_1.get, _2, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdCenter DBType(char), Length(4,false), Default() */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false), O.Default(""))
    /** Database column cdReportType DBType(char), Length(10,false) */
    val cdreporttype: Column[Option[String]] = column[Option[String]]("cdReportType", O.Length(10,varying=false))
    /** Database column cdReportCode DBType(char), Length(10,false) */
    val cdreportcode: Column[String] = column[String]("cdReportCode", O.Length(10,varying=false))
    /** Database column szReportName DBType(nchar), Length(255,false), Default(Some()) */
    val szreportname: Column[Option[String]] = column[Option[String]]("szReportName", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szReportFile DBType(char), Length(30,false), Default(Some()) */
    val szreportfile: Column[Option[String]] = column[Option[String]]("szReportFile", O.Length(30,varying=false), O.Default(Some("")))
    /** Database column szReportAP DBType(char), Length(255,false), Default(Some()) */
    val szreportap: Column[Option[String]] = column[Option[String]]("szReportAP", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szTempTable DBType(char), Length(30,false), Default(Some()) */
    val sztemptable: Column[Option[String]] = column[Option[String]]("szTempTable", O.Length(30,varying=false), O.Default(Some("")))
    /** Database column szDataTable DBType(char), Length(30,false), Default(Some()) */
    val szdatatable: Column[Option[String]] = column[Option[String]]("szDataTable", O.Length(30,varying=false), O.Default(Some("")))
    /** Database column szKeyFields DBType(char), Length(512,false), Default(Some()) */
    val szkeyfields: Column[Option[String]] = column[Option[String]]("szKeyFields", O.Length(512,varying=false), O.Default(Some("")))
    /** Database column szDataFields DBType(char), Length(512,false), Default(Some()) */
    val szdatafields: Column[Option[String]] = column[Option[String]]("szDataFields", O.Length(512,varying=false), O.Default(Some("")))
    /** Database column szExpFieldName DBType(nchar), Length(250,false), Default(Some()) */
    val szexpfieldname: Column[Option[String]] = column[Option[String]]("szExpFieldName", O.Length(250,varying=false), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblreportsetting (database name PK_tblReportSetting) */
    val pk = primaryKey("PK_tblReportSetting", (cdcenter, cdreportcode))
  }
  /** Collection-like TableQuery object for table Tblreportsetting */
  lazy val Tblreportsetting = new TableQuery(tag => new Tblreportsetting(tag))
  
  /** Entity class storing rows of table Tblrepparts
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidrepair Database column uidRepair DBType(uniqueidentifier), Length(36,false)
   *  @param uidrepaird Database column uidRepairD DBType(uniqueidentifier), Length(36,false)
   *  @param cdrepairno Database column cdRepairNo DBType(char), Length(20,false)
   *  @param cdprodid Database column cdProdId DBType(char), Length(15,false)
   *  @param cdunit Database column cdUnit DBType(char), Length(4,false)
   *  @param iqty Database column iQty DBType(int)
   *  @param funitsale Database column fUnitSale DBType(float)
   *  @param fmoney Database column fMoney DBType(float)
   *  @param isselect Database column isSelect DBType(bit)
   *  @param isoption Database column isOption DBType(bit)
   *  @param isselected Database column isSelected DBType(bit)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byts DBType(binary) */
  case class TblreppartsRow(uid: String, uidrepair: String, uidrepaird: String, cdrepairno: String, cdprodid: String, cdunit: Option[String], iqty: Option[Int], funitsale: Option[Double], fmoney: Option[Double], isselect: Option[Boolean], isoption: Option[Boolean], isselected: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblreppartsRow objects using plain SQL queries */
  implicit def GetResultTblreppartsRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[Double]], e4: GR[Option[Boolean]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblreppartsRow] = GR{
    prs => import prs._
    TblreppartsRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[String], <<?[String], <<?[Int], <<?[Double], <<?[Double], <<?[Boolean], <<?[Boolean], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblRepParts. Objects of this class serve as prototypes for rows in queries. */
  class Tblrepparts(_tableTag: Tag) extends Table[TblreppartsRow](_tableTag, Some("dbo"), "tblRepParts") {
    def * = (uid, uidrepair, uidrepaird, cdrepairno, cdprodid, cdunit, iqty, funitsale, fmoney, isselect, isoption, isselected, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblreppartsRow.tupled, TblreppartsRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrepair.?, uidrepaird.?, cdrepairno.?, cdprodid.?, cdunit, iqty, funitsale, fmoney, isselect, isoption, isselected, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblreppartsRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidRepair DBType(uniqueidentifier), Length(36,false) */
    val uidrepair: Column[String] = column[String]("uidRepair", O.Length(36,varying=false))
    /** Database column uidRepairD DBType(uniqueidentifier), Length(36,false) */
    val uidrepaird: Column[String] = column[String]("uidRepairD", O.Length(36,varying=false))
    /** Database column cdRepairNo DBType(char), Length(20,false) */
    val cdrepairno: Column[String] = column[String]("cdRepairNo", O.Length(20,varying=false))
    /** Database column cdProdId DBType(char), Length(15,false) */
    val cdprodid: Column[String] = column[String]("cdProdId", O.Length(15,varying=false))
    /** Database column cdUnit DBType(char), Length(4,false) */
    val cdunit: Column[Option[String]] = column[Option[String]]("cdUnit", O.Length(4,varying=false))
    /** Database column iQty DBType(int) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty")
    /** Database column fUnitSale DBType(float) */
    val funitsale: Column[Option[Double]] = column[Option[Double]]("fUnitSale")
    /** Database column fMoney DBType(float) */
    val fmoney: Column[Option[Double]] = column[Option[Double]]("fMoney")
    /** Database column isSelect DBType(bit) */
    val isselect: Column[Option[Boolean]] = column[Option[Boolean]]("isSelect")
    /** Database column isOption DBType(bit) */
    val isoption: Column[Option[Boolean]] = column[Option[Boolean]]("isOption")
    /** Database column isSelected DBType(bit) */
    val isselected: Column[Option[Boolean]] = column[Option[Boolean]]("isSelected")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(binary) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
  }
  /** Collection-like TableQuery object for table Tblrepparts */
  lazy val Tblrepparts = new TableQuery(tag => new Tblrepparts(tag))
  
  /** Entity class storing rows of table Tblroom
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidplace Database column uidPlace DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000})
   *  @param cdroomtype Database column cdRoomType DBType(char), Length(2,false), Default()
   *  @param froomprice Database column fRoomPrice DBType(float), Default(Some(0.0))
   *  @param froomnfee Database column fRoomNFee DBType(float), Default(Some(0.0))
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblroomRow(uid: String, uidplace: String = "{00000000-0000-0000-0000-000000000000}", cdroomtype: String = "", froomprice: Option[Double] = Some(0.0), froomnfee: Option[Double] = Some(0.0), szremark: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblroomRow objects using plain SQL queries */
  implicit def GetResultTblroomRow(implicit e0: GR[String], e1: GR[Option[Double]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblroomRow] = GR{
    prs => import prs._
    TblroomRow.tupled((<<[String], <<[String], <<[String], <<?[Double], <<?[Double], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblRoom. Objects of this class serve as prototypes for rows in queries. */
  class Tblroom(_tableTag: Tag) extends Table[TblroomRow](_tableTag, Some("dbo"), "tblRoom") {
    def * = (uid, uidplace, cdroomtype, froomprice, froomnfee, szremark, uidmodifier, dtmodify) <> (TblroomRow.tupled, TblroomRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidplace.?, cdroomtype.?, froomprice, froomnfee, szremark, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblroomRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidPlace DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000}) */
    val uidplace: Column[String] = column[String]("uidPlace", O.Length(36,varying=false), O.Default("{00000000-0000-0000-0000-000000000000}"))
    /** Database column cdRoomType DBType(char), Length(2,false), Default() */
    val cdroomtype: Column[String] = column[String]("cdRoomType", O.Length(2,varying=false), O.Default(""))
    /** Database column fRoomPrice DBType(float), Default(Some(0.0)) */
    val froomprice: Column[Option[Double]] = column[Option[Double]]("fRoomPrice", O.Default(Some(0.0)))
    /** Database column fRoomNFee DBType(float), Default(Some(0.0)) */
    val froomnfee: Column[Option[Double]] = column[Option[Double]]("fRoomNFee", O.Default(Some(0.0)))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblroom (database name PK_tblRoom) */
    val pk = primaryKey("PK_tblRoom", (uidplace, cdroomtype))
  }
  /** Collection-like TableQuery object for table Tblroom */
  lazy val Tblroom = new TableQuery(tag => new Tblroom(tag))
  
  /** Row type of table Tblrpt01 */
  type Tblrpt01Row = HCons[String,HCons[Int,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tblrpt01Row providing default values if available in the database schema. */
  def Tblrpt01Row(uid: String, idbatchno: Int, cdmember: String, cdapplyarea: String, cdpergp: String, cdpersg: String, cdsponser: Option[String], cdseller: Option[String], cdspecial: Option[String], cdagency: Option[String], cdsuper: Option[String], cdsupervise: Option[String], cdsrvmember: Option[String], cdmemkind: Option[String], szfullname: Option[String], cdsex: Option[String], dtbirthday: Option[java.sql.Timestamp], cdid: Option[String], szfulladdr: Option[String], szlocal: Option[String], szdetail: Option[String], szteldetail: Option[String], szfax: Option[String], szmobile: Option[String], szmail: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp]): Tblrpt01Row = {
    uid :: idbatchno :: cdmember :: cdapplyarea :: cdpergp :: cdpersg :: cdsponser :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: cdmemkind :: szfullname :: cdsex :: dtbirthday :: cdid :: szfulladdr :: szlocal :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: uidcreator :: dtcreate :: HNil
  }
  /** GetResult implicit for fetching Tblrpt01Row objects using plain SQL queries */
  implicit def GetResultTblrpt01Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[Tblrpt01Row] = GR{
    prs => import prs._
    <<[String] :: <<[Int] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblRpt01. Objects of this class serve as prototypes for rows in queries. */
  class Tblrpt01(_tableTag: Tag) extends Table[Tblrpt01Row](_tableTag, Some("dbo"), "tblRpt01") {
    def * = uid :: idbatchno :: cdmember :: cdapplyarea :: cdpergp :: cdpersg :: cdsponser :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: cdmemkind :: szfullname :: cdsex :: dtbirthday :: cdid :: szfulladdr :: szlocal :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: uidcreator :: dtcreate :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column idBatchNo DBType(int) */
    val idbatchno: Column[Int] = column[Int]("idBatchNo")
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdApplyArea DBType(char), Length(4,false) */
    val cdapplyarea: Column[String] = column[String]("cdApplyArea", O.Length(4,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column cdSeller DBType(char), Length(10,false) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false))
    /** Database column cdSpecial DBType(char), Length(10,false) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false))
    /** Database column cdAgency DBType(char), Length(10,false) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false))
    /** Database column cdSuper DBType(char), Length(10,false) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false))
    /** Database column cdSupervise DBType(char), Length(10,false) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false))
    /** Database column cdSrvMember DBType(char), Length(10,false) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdId DBType(char), Length(10,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(10,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(128,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=false))
    /** Database column szLocal DBType(nchar), Length(128,false) */
    val szlocal: Column[Option[String]] = column[Option[String]]("szLocal", O.Length(128,varying=false))
    /** Database column szDetail DBType(nchar), Length(128,false) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false))
    /** Database column szTelDetail DBType(nchar), Length(10,false) */
    val szteldetail: Column[Option[String]] = column[Option[String]]("szTelDetail", O.Length(10,varying=false))
    /** Database column szFax DBType(nchar), Length(128,false) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(128,varying=false))
    /** Database column szMobile DBType(nchar), Length(128,false) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false))
    /** Database column szMail DBType(nchar), Length(128,false) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
  }
  /** Collection-like TableQuery object for table Tblrpt01 */
  lazy val Tblrpt01 = new TableQuery(tag => new Tblrpt01(tag))
  
  /** Entity class storing rows of table Tblrptclass
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(10,false)
   *  @param cdcourse Database column cdCourse DBType(char), Length(5,false)
   *  @param cdclassm Database column cdClassM DBType(char), Length(6,false)
   *  @param cdseq Database column cdSeq DBType(char), Length(1,false)
   *  @param iseq Database column iSeq DBType(int identity), AutoInc
   *  @param cditem Database column cdItem DBType(char), Length(10,false)
   *  @param szitem Database column szItem DBType(nchar), Length(50,false)
   *  @param szdesc Database column szDesc DBType(nchar), Length(255,false)
   *  @param ischecked Database column isChecked DBType(char), Length(1,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblrptclassRow(uid: Option[String], cdcenter: String, cdcourse: String, cdclassm: String, cdseq: String, iseq: Int, cditem: Option[String], szitem: Option[String], szdesc: Option[String], ischecked: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblrptclassRow objects using plain SQL queries */
  implicit def GetResultTblrptclassRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Int], e3: GR[Option[java.sql.Timestamp]]): GR[TblrptclassRow] = GR{
    prs => import prs._
    TblrptclassRow.tupled((<<?[String], <<[String], <<[String], <<[String], <<[String], <<[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblRptClass. Objects of this class serve as prototypes for rows in queries. */
  class Tblrptclass(_tableTag: Tag) extends Table[TblrptclassRow](_tableTag, Some("dbo"), "tblRptClass") {
    def * = (uid, cdcenter, cdcourse, cdclassm, cdseq, iseq, cditem, szitem, szdesc, ischecked, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblrptclassRow.tupled, TblrptclassRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdcenter.?, cdcourse.?, cdclassm.?, cdseq.?, iseq.?, cditem, szitem, szdesc, ischecked, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _2.map(_=> TblrptclassRow.tupled((_1, _2.get, _3.get, _4.get, _5.get, _6.get, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(10,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(10,varying=false))
    /** Database column cdCourse DBType(char), Length(5,false) */
    val cdcourse: Column[String] = column[String]("cdCourse", O.Length(5,varying=false))
    /** Database column cdClassM DBType(char), Length(6,false) */
    val cdclassm: Column[String] = column[String]("cdClassM", O.Length(6,varying=false))
    /** Database column cdSeq DBType(char), Length(1,false) */
    val cdseq: Column[String] = column[String]("cdSeq", O.Length(1,varying=false))
    /** Database column iSeq DBType(int identity), AutoInc */
    val iseq: Column[Int] = column[Int]("iSeq", O.AutoInc)
    /** Database column cdItem DBType(char), Length(10,false) */
    val cditem: Column[Option[String]] = column[Option[String]]("cdItem", O.Length(10,varying=false))
    /** Database column szItem DBType(nchar), Length(50,false) */
    val szitem: Column[Option[String]] = column[Option[String]]("szItem", O.Length(50,varying=false))
    /** Database column szDesc DBType(nchar), Length(255,false) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(255,varying=false))
    /** Database column isChecked DBType(char), Length(1,false) */
    val ischecked: Column[Option[String]] = column[Option[String]]("isChecked", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblrptclass (database name PK_tblRptClass) */
    val pk = primaryKey("PK_tblRptClass", (cdcenter, cdcourse, cdclassm, cdseq, iseq))
  }
  /** Collection-like TableQuery object for table Tblrptclass */
  lazy val Tblrptclass = new TableQuery(tag => new Tblrptclass(tag))
  
  /** Row type of table Tblrptempresults */
  type TblrptempresultsRow = HCons[Option[String],HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblrptempresultsRow providing default values if available in the database schema. */
  def TblrptempresultsRow(uid: Option[String], uidemployee: String, cdtype: String, dtdate: java.sql.Timestamp, icount01: Option[Int] = Some(0), icount02: Option[Int] = Some(0), icount03: Option[Int] = Some(0), icount04: Option[Int] = Some(0), icount05: Option[Int] = Some(0), icount06: Option[Int] = Some(0), icount07: Option[Int] = Some(0), icount08: Option[Int] = Some(0), icount09: Option[Int] = Some(0), icount10: Option[Int] = Some(0), icount11: Option[Int] = Some(0), icount12: Option[Int] = Some(0), icount13: Option[Int] = Some(0), icount14: Option[Int], icount15: Option[Int], icount16: Option[Int] = Some(0), icount17: Option[Int] = Some(0), icount18: Option[Int] = Some(0), icount19: Option[Int] = Some(0), icount20: Option[Int] = Some(0), dtcreate: Option[java.sql.Timestamp]): TblrptempresultsRow = {
    uid :: uidemployee :: cdtype :: dtdate :: icount01 :: icount02 :: icount03 :: icount04 :: icount05 :: icount06 :: icount07 :: icount08 :: icount09 :: icount10 :: icount11 :: icount12 :: icount13 :: icount14 :: icount15 :: icount16 :: icount17 :: icount18 :: icount19 :: icount20 :: dtcreate :: HNil
  }
  /** GetResult implicit for fetching TblrptempresultsRow objects using plain SQL queries */
  implicit def GetResultTblrptempresultsRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[java.sql.Timestamp], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]]): GR[TblrptempresultsRow] = GR{
    prs => import prs._
    <<?[String] :: <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblRptEmpResults. Objects of this class serve as prototypes for rows in queries. */
  class Tblrptempresults(_tableTag: Tag) extends Table[TblrptempresultsRow](_tableTag, Some("dbo"), "tblRptEmpResults") {
    def * = uid :: uidemployee :: cdtype :: dtdate :: icount01 :: icount02 :: icount03 :: icount04 :: icount05 :: icount06 :: icount07 :: icount08 :: icount09 :: icount10 :: icount11 :: icount12 :: icount13 :: icount14 :: icount15 :: icount16 :: icount17 :: icount18 :: icount19 :: icount20 :: dtcreate :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column uidEmployee DBType(uniqueidentifier), Length(36,false) */
    val uidemployee: Column[String] = column[String]("uidEmployee", O.Length(36,varying=false))
    /** Database column cdType DBType(char), Length(20,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(20,varying=false))
    /** Database column dtDate DBType(datetime) */
    val dtdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtDate")
    /** Database column iCount01 DBType(int), Default(Some(0)) */
    val icount01: Column[Option[Int]] = column[Option[Int]]("iCount01", O.Default(Some(0)))
    /** Database column iCount02 DBType(int), Default(Some(0)) */
    val icount02: Column[Option[Int]] = column[Option[Int]]("iCount02", O.Default(Some(0)))
    /** Database column iCount03 DBType(int), Default(Some(0)) */
    val icount03: Column[Option[Int]] = column[Option[Int]]("iCount03", O.Default(Some(0)))
    /** Database column iCount04 DBType(int), Default(Some(0)) */
    val icount04: Column[Option[Int]] = column[Option[Int]]("iCount04", O.Default(Some(0)))
    /** Database column iCount05 DBType(int), Default(Some(0)) */
    val icount05: Column[Option[Int]] = column[Option[Int]]("iCount05", O.Default(Some(0)))
    /** Database column iCount06 DBType(int), Default(Some(0)) */
    val icount06: Column[Option[Int]] = column[Option[Int]]("iCount06", O.Default(Some(0)))
    /** Database column iCount07 DBType(int), Default(Some(0)) */
    val icount07: Column[Option[Int]] = column[Option[Int]]("iCount07", O.Default(Some(0)))
    /** Database column iCount08 DBType(int), Default(Some(0)) */
    val icount08: Column[Option[Int]] = column[Option[Int]]("iCount08", O.Default(Some(0)))
    /** Database column iCount09 DBType(int), Default(Some(0)) */
    val icount09: Column[Option[Int]] = column[Option[Int]]("iCount09", O.Default(Some(0)))
    /** Database column iCount10 DBType(int), Default(Some(0)) */
    val icount10: Column[Option[Int]] = column[Option[Int]]("iCount10", O.Default(Some(0)))
    /** Database column iCount11 DBType(int), Default(Some(0)) */
    val icount11: Column[Option[Int]] = column[Option[Int]]("iCount11", O.Default(Some(0)))
    /** Database column iCount12 DBType(int), Default(Some(0)) */
    val icount12: Column[Option[Int]] = column[Option[Int]]("iCount12", O.Default(Some(0)))
    /** Database column iCount13 DBType(int), Default(Some(0)) */
    val icount13: Column[Option[Int]] = column[Option[Int]]("iCount13", O.Default(Some(0)))
    /** Database column iCount14 DBType(int) */
    val icount14: Column[Option[Int]] = column[Option[Int]]("iCount14")
    /** Database column iCount15 DBType(int) */
    val icount15: Column[Option[Int]] = column[Option[Int]]("iCount15")
    /** Database column iCount16 DBType(int), Default(Some(0)) */
    val icount16: Column[Option[Int]] = column[Option[Int]]("iCount16", O.Default(Some(0)))
    /** Database column iCount17 DBType(int), Default(Some(0)) */
    val icount17: Column[Option[Int]] = column[Option[Int]]("iCount17", O.Default(Some(0)))
    /** Database column iCount18 DBType(int), Default(Some(0)) */
    val icount18: Column[Option[Int]] = column[Option[Int]]("iCount18", O.Default(Some(0)))
    /** Database column iCount19 DBType(int), Default(Some(0)) */
    val icount19: Column[Option[Int]] = column[Option[Int]]("iCount19", O.Default(Some(0)))
    /** Database column iCount20 DBType(int), Default(Some(0)) */
    val icount20: Column[Option[Int]] = column[Option[Int]]("iCount20", O.Default(Some(0)))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    
    /** Primary key of Tblrptempresults (database name PK_tblRptEmpResults) */
    val pk = primaryKey("PK_tblRptEmpResults", uidemployee :: cdtype :: dtdate :: HNil)
  }
  /** Collection-like TableQuery object for table Tblrptempresults */
  lazy val Tblrptempresults = new TableQuery(tag => new Tblrptempresults(tag))
  
  /** Row type of table Tblrptmember */
  type TblrptmemberRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblrptmemberRow providing default values if available in the database schema. */
  def TblrptmemberRow(uid: String, cdmember: String = "", cdapplyarea: String = "", cdpersa: String = "", cdpersb: String = "", cdpergp: String = "", cdpersg: String = "", cdsponser: Option[String] = Some(""), idservice: Option[Int] = Some(0), cdseller: Option[String] = Some(""), cdspecial: Option[String] = Some(""), cdagency: Option[String] = Some(""), cdsuper: Option[String] = Some(""), cdsupervise: Option[String] = Some(""), cdsrvmember: Option[String] = Some(""), igeneration: Option[Int] = Some(0), cdmemkind: Option[String] = Some(""), szsex: Option[String] = Some(""), dtbirthday: Option[java.sql.Timestamp], cdcid: Option[String] = Some(""), szcountry: Option[String] = Some(""), szstate: Option[String] = Some(""), szcity: Option[String], szstatus: Option[String] = Some(""), dtstractive: Option[java.sql.Timestamp], dtendactive: Option[java.sql.Timestamp], icumpv: Option[Int] = Some(0), icumuppv: Option[Int] = Some(0), icurrpv: Option[Int] = Some(0), icurruppv: Option[Int] = Some(0), imovepv: Option[Int] = Some(0), ichgsponser: Option[Int] = Some(0), ichgbusiness: Option[Int] = Some(0), isextend: Option[Boolean]): TblrptmemberRow = {
    uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdmemkind :: szsex :: dtbirthday :: cdcid :: szcountry :: szstate :: szcity :: szstatus :: dtstractive :: dtendactive :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: HNil
  }
  /** GetResult implicit for fetching TblrptmemberRow objects using plain SQL queries */
  implicit def GetResultTblrptmemberRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Boolean]]): GR[TblrptmemberRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: HNil
  }
  /** Table description of table tblRptMember. Objects of this class serve as prototypes for rows in queries. */
  class Tblrptmember(_tableTag: Tag) extends Table[TblrptmemberRow](_tableTag, Some("dbo"), "tblRptMember") {
    def * = uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdmemkind :: szsex :: dtbirthday :: cdcid :: szcountry :: szstate :: szcity :: szstatus :: dtstractive :: dtendactive :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false), O.Default(""))
    /** Database column cdApplyArea DBType(char), Length(4,false), Default() */
    val cdapplyarea: Column[String] = column[String]("cdApplyArea", O.Length(4,varying=false), O.Default(""))
    /** Database column cdPerSa DBType(char), Length(4,false), Default() */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false), O.Default(""))
    /** Database column cdPerSb DBType(char), Length(4,false), Default() */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false), O.Default(""))
    /** Database column cdPerGp DBType(char), Length(2,false), Default() */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false), O.Default(""))
    /** Database column cdPerSg DBType(char), Length(2,false), Default() */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false), O.Default(""))
    /** Database column cdSponser DBType(char), Length(10,false), Default(Some()) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column idService DBType(int), Default(Some(0)) */
    val idservice: Column[Option[Int]] = column[Option[Int]]("idService", O.Default(Some(0)))
    /** Database column cdSeller DBType(char), Length(10,false), Default(Some()) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdSpecial DBType(char), Length(10,false), Default(Some()) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdAgency DBType(char), Length(10,false), Default(Some()) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdSuper DBType(char), Length(10,false), Default(Some()) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdSupervise DBType(char), Length(10,false), Default(Some()) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column cdSrvMember DBType(char), Length(10,false), Default(Some()) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column iGeneration DBType(int), Default(Some(0)) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration", O.Default(Some(0)))
    /** Database column cdMemKind DBType(char), Length(1,false), Default(Some()) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column szSex DBType(nchar), Length(10,false), Default(Some()) */
    val szsex: Column[Option[String]] = column[Option[String]]("szSex", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdCid DBType(char), Length(2,false), Default(Some()) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column szCountry DBType(nchar), Length(30,false), Default(Some()) */
    val szcountry: Column[Option[String]] = column[Option[String]]("szCountry", O.Length(30,varying=false), O.Default(Some("")))
    /** Database column szState DBType(nchar), Length(30,false), Default(Some()) */
    val szstate: Column[Option[String]] = column[Option[String]]("szState", O.Length(30,varying=false), O.Default(Some("")))
    /** Database column szCity DBType(nchar), Length(30,false) */
    val szcity: Column[Option[String]] = column[Option[String]]("szCity", O.Length(30,varying=false))
    /** Database column szStatus DBType(nchar), Length(30,false), Default(Some()) */
    val szstatus: Column[Option[String]] = column[Option[String]]("szStatus", O.Length(30,varying=false), O.Default(Some("")))
    /** Database column dtStrActive DBType(datetime) */
    val dtstractive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrActive")
    /** Database column dtEndActive DBType(datetime) */
    val dtendactive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndActive")
    /** Database column iCumPv DBType(int), Default(Some(0)) */
    val icumpv: Column[Option[Int]] = column[Option[Int]]("iCumPv", O.Default(Some(0)))
    /** Database column iCumUpPv DBType(int), Default(Some(0)) */
    val icumuppv: Column[Option[Int]] = column[Option[Int]]("iCumUpPv", O.Default(Some(0)))
    /** Database column iCurrPv DBType(int), Default(Some(0)) */
    val icurrpv: Column[Option[Int]] = column[Option[Int]]("iCurrPv", O.Default(Some(0)))
    /** Database column iCurrUpPv DBType(int), Default(Some(0)) */
    val icurruppv: Column[Option[Int]] = column[Option[Int]]("iCurrUpPv", O.Default(Some(0)))
    /** Database column iMovePv DBType(int), Default(Some(0)) */
    val imovepv: Column[Option[Int]] = column[Option[Int]]("iMovePv", O.Default(Some(0)))
    /** Database column iChgSponser DBType(int), Default(Some(0)) */
    val ichgsponser: Column[Option[Int]] = column[Option[Int]]("iChgSponser", O.Default(Some(0)))
    /** Database column iChgBusiness DBType(int), Default(Some(0)) */
    val ichgbusiness: Column[Option[Int]] = column[Option[Int]]("iChgBusiness", O.Default(Some(0)))
    /** Database column isExtend DBType(bit) */
    val isextend: Column[Option[Boolean]] = column[Option[Boolean]]("isExtend")
  }
  /** Collection-like TableQuery object for table Tblrptmember */
  lazy val Tblrptmember = new TableQuery(tag => new Tblrptmember(tag))
  
  /** Entity class storing rows of table Tblrpttest
   *  @param `type` Database column type DBType(nchar), Length(50,false)
   *  @param no Database column no DBType(int)
   *  @param item Database column item DBType(nchar), Length(50,false)
   *  @param desc Database column desc DBType(nchar), Length(255,false) */
  case class TblrpttestRow(`type`: Option[String], no: Option[Int], item: Option[String], desc: Option[String])
  /** GetResult implicit for fetching TblrpttestRow objects using plain SQL queries */
  implicit def GetResultTblrpttestRow(implicit e0: GR[Option[String]], e1: GR[Option[Int]]): GR[TblrpttestRow] = GR{
    prs => import prs._
    TblrpttestRow.tupled((<<?[String], <<?[Int], <<?[String], <<?[String]))
  }
  /** Table description of table tblRptTest. Objects of this class serve as prototypes for rows in queries.
   *  NOTE: The following names collided with Scala keywords and were escaped: type */
  class Tblrpttest(_tableTag: Tag) extends Table[TblrpttestRow](_tableTag, Some("dbo"), "tblRptTest") {
    def * = (`type`, no, item, desc) <> (TblrpttestRow.tupled, TblrpttestRow.unapply)
    
    /** Database column type DBType(nchar), Length(50,false)
     *  NOTE: The name was escaped because it collided with a Scala keyword. */
    val `type`: Column[Option[String]] = column[Option[String]]("type", O.Length(50,varying=false))
    /** Database column no DBType(int) */
    val no: Column[Option[Int]] = column[Option[Int]]("no")
    /** Database column item DBType(nchar), Length(50,false) */
    val item: Column[Option[String]] = column[Option[String]]("item", O.Length(50,varying=false))
    /** Database column desc DBType(nchar), Length(255,false) */
    val desc: Column[Option[String]] = column[Option[String]]("desc", O.Length(255,varying=false))
  }
  /** Collection-like TableQuery object for table Tblrpttest */
  lazy val Tblrpttest = new TableQuery(tag => new Tblrpttest(tag))
  
  /** Entity class storing rows of table Tblsalesinfo
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param dtsales Database column dtSales DBType(datetime)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false)
   *  @param dtlastsales Database column dtLastSales DBType(datetime)
   *  @param dtnextsales Database column dtNextSales DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblsalesinfoRow(uid: Option[String], dtsales: Option[java.sql.Timestamp], cdstatus: Option[String], dtlastsales: Option[java.sql.Timestamp], dtnextsales: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblsalesinfoRow objects using plain SQL queries */
  implicit def GetResultTblsalesinfoRow(implicit e0: GR[Option[String]], e1: GR[Option[java.sql.Timestamp]]): GR[TblsalesinfoRow] = GR{
    prs => import prs._
    TblsalesinfoRow.tupled((<<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblSalesInfo. Objects of this class serve as prototypes for rows in queries. */
  class Tblsalesinfo(_tableTag: Tag) extends Table[TblsalesinfoRow](_tableTag, Some("dbo"), "tblSalesInfo") {
    def * = (uid, dtsales, cdstatus, dtlastsales, dtnextsales, uidmodifier, dtmodify) <> (TblsalesinfoRow.tupled, TblsalesinfoRow.unapply)
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column dtSales DBType(datetime) */
    val dtsales: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtSales")
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(1,varying=false))
    /** Database column dtLastSales DBType(datetime) */
    val dtlastsales: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastSales")
    /** Database column dtNextSales DBType(datetime) */
    val dtnextsales: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtNextSales")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblsalesinfo */
  lazy val Tblsalesinfo = new TableQuery(tag => new Tblsalesinfo(tag))
  
  /** Entity class storing rows of table Tblsatisfy
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param isatisfy Database column iSatisfy DBType(int)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param uidclass Database column uidClass DBType(uniqueidentifier), Length(36,false)
   *  @param uidperson Database column uidPerson DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000})
   *  @param isinvite Database column isInvite DBType(bit), Default(Some(true))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblsatisfyRow(uid: String, cdpersa: String, isatisfy: Int, dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, uidclass: String, uidperson: String = "{00000000-0000-0000-0000-000000000000}", isinvite: Option[Boolean] = Some(true), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblsatisfyRow objects using plain SQL queries */
  implicit def GetResultTblsatisfyRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[java.sql.Timestamp]], e3: GR[java.sql.Timestamp], e4: GR[Option[Boolean]], e5: GR[Option[String]], e6: GR[Option[java.sql.Blob]]): GR[TblsatisfyRow] = GR{
    prs => import prs._
    TblsatisfyRow.tupled((<<[String], <<[String], <<[Int], <<?[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblSatisfy. Objects of this class serve as prototypes for rows in queries. */
  class Tblsatisfy(_tableTag: Tag) extends Table[TblsatisfyRow](_tableTag, Some("dbo"), "tblSatisfy") {
    def * = (uid, cdpersa, isatisfy, dtstrdate, dtenddate, uidclass, uidperson, isinvite, uidcreator, dtcreate, byts) <> (TblsatisfyRow.tupled, TblsatisfyRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpersa.?, isatisfy.?, dtstrdate, dtenddate.?, uidclass.?, uidperson.?, isinvite, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblsatisfyRow.tupled((_1.get, _2.get, _3.get, _4, _5.get, _6.get, _7.get, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column iSatisfy DBType(int) */
    val isatisfy: Column[Int] = column[Int]("iSatisfy")
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false))
    /** Database column uidPerson DBType(uniqueidentifier), Length(36,false), Default({00000000-0000-0000-0000-000000000000}) */
    val uidperson: Column[String] = column[String]("uidPerson", O.Length(36,varying=false), O.Default("{00000000-0000-0000-0000-000000000000}"))
    /** Database column isInvite DBType(bit), Default(Some(true)) */
    val isinvite: Column[Option[Boolean]] = column[Option[Boolean]]("isInvite", O.Default(Some(true)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblsatisfy (database name PK_tblSatisfy) */
    val pk = primaryKey("PK_tblSatisfy", (uid, cdpersa, isatisfy, dtenddate))
  }
  /** Collection-like TableQuery object for table Tblsatisfy */
  lazy val Tblsatisfy = new TableQuery(tag => new Tblsatisfy(tag))
  
  /** Entity class storing rows of table Tblsatisfyd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param uidsatisfy Database column uidSatisfy DBType(uniqueidentifier), Length(36,false)
   *  @param szsuggestion Database column szSuggestion DBType(nchar), Length(255,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblsatisfydRow(uid: String, cdlanguage: String, uidsatisfy: String, szsuggestion: Option[String], szremark: Option[String], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblsatisfydRow objects using plain SQL queries */
  implicit def GetResultTblsatisfydRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblsatisfydRow] = GR{
    prs => import prs._
    TblsatisfydRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblSatisfyD. Objects of this class serve as prototypes for rows in queries. */
  class Tblsatisfyd(_tableTag: Tag) extends Table[TblsatisfydRow](_tableTag, Some("dbo"), "tblSatisfyD") {
    def * = (uid, cdlanguage, uidsatisfy, szsuggestion, szremark, uidmodifier, dtmodify) <> (TblsatisfydRow.tupled, TblsatisfydRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdlanguage.?, uidsatisfy.?, szsuggestion, szremark, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblsatisfydRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column uidSatisfy DBType(uniqueidentifier), Length(36,false) */
    val uidsatisfy: Column[String] = column[String]("uidSatisfy", O.Length(36,varying=false))
    /** Database column szSuggestion DBType(nchar), Length(255,false) */
    val szsuggestion: Column[Option[String]] = column[Option[String]]("szSuggestion", O.Length(255,varying=false))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblsatisfyd (database name PK_tblSatisfyD) */
    val pk = primaryKey("PK_tblSatisfyD", (uid, cdlanguage, uidsatisfy))
  }
  /** Collection-like TableQuery object for table Tblsatisfyd */
  lazy val Tblsatisfyd = new TableQuery(tag => new Tblsatisfyd(tag))
  
  /** Entity class storing rows of table Tblsatisfyq
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidsatisfy Database column uidSatisfy DBType(uniqueidentifier), Length(36,false)
   *  @param uidquestion Database column uidQuestion DBType(uniqueidentifier), Length(36,false)
   *  @param cdgoal Database column cdGoal DBType(char), Length(2,false), Default(Some())
   *  @param iscore Database column iScore DBType(int), Default(Some(0))
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblsatisfyqRow(uid: String, uidsatisfy: String, uidquestion: String, cdgoal: Option[String] = Some(""), iscore: Option[Int] = Some(0), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblsatisfyqRow objects using plain SQL queries */
  implicit def GetResultTblsatisfyqRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]]): GR[TblsatisfyqRow] = GR{
    prs => import prs._
    TblsatisfyqRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblSatisfyQ. Objects of this class serve as prototypes for rows in queries. */
  class Tblsatisfyq(_tableTag: Tag) extends Table[TblsatisfyqRow](_tableTag, Some("dbo"), "tblSatisfyQ") {
    def * = (uid, uidsatisfy, uidquestion, cdgoal, iscore, uidmodifier, dtmodify) <> (TblsatisfyqRow.tupled, TblsatisfyqRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidsatisfy.?, uidquestion.?, cdgoal, iscore, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblsatisfyqRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidSatisfy DBType(uniqueidentifier), Length(36,false) */
    val uidsatisfy: Column[String] = column[String]("uidSatisfy", O.Length(36,varying=false))
    /** Database column uidQuestion DBType(uniqueidentifier), Length(36,false) */
    val uidquestion: Column[String] = column[String]("uidQuestion", O.Length(36,varying=false))
    /** Database column cdGoal DBType(char), Length(2,false), Default(Some()) */
    val cdgoal: Column[Option[String]] = column[Option[String]]("cdGoal", O.Length(2,varying=false), O.Default(Some("")))
    /** Database column iScore DBType(int), Default(Some(0)) */
    val iscore: Column[Option[Int]] = column[Option[Int]]("iScore", O.Default(Some(0)))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblsatisfyq (database name PK_tblSatisfyQ) */
    val pk = primaryKey("PK_tblSatisfyQ", (uid, uidsatisfy, uidquestion))
  }
  /** Collection-like TableQuery object for table Tblsatisfyq */
  lazy val Tblsatisfyq = new TableQuery(tag => new Tblsatisfyq(tag))
  
  /** Entity class storing rows of table Tblservey
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidcustomer Database column uidCustomer DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param idpatternno Database column idPatternNo DBType(int), Default(1)
   *  @param cdcustno Database column cdCustNo DBType(char), Length(10,false)
   *  @param cdresult Database column cdResult DBType(char), Length(512,false), Default()
   *  @param szremark Database column szRemark DBType(nchar), Length(100,false)
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblserveyRow(uid: String, uidcustomer: String, idpatternno: Int = 1, cdcustno: String, cdresult: String = "", szremark: Option[String], isinvalid: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblserveyRow objects using plain SQL queries */
  implicit def GetResultTblserveyRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]]): GR[TblserveyRow] = GR{
    prs => import prs._
    TblserveyRow.tupled((<<[String], <<[String], <<[Int], <<[String], <<[String], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblServey. Objects of this class serve as prototypes for rows in queries. */
  class Tblservey(_tableTag: Tag) extends Table[TblserveyRow](_tableTag, Some("dbo"), "tblServey") {
    def * = (uid, uidcustomer, idpatternno, cdcustno, cdresult, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblserveyRow.tupled, TblserveyRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidcustomer.?, idpatternno.?, cdcustno.?, cdresult.?, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblserveyRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidCustomer DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uidcustomer: Column[String] = column[String]("uidCustomer", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column idPatternNo DBType(int), Default(1) */
    val idpatternno: Column[Int] = column[Int]("idPatternNo", O.Default(1))
    /** Database column cdCustNo DBType(char), Length(10,false) */
    val cdcustno: Column[String] = column[String]("cdCustNo", O.Length(10,varying=false))
    /** Database column cdResult DBType(char), Length(512,false), Default() */
    val cdresult: Column[String] = column[String]("cdResult", O.Length(512,varying=false), O.Default(""))
    /** Database column szRemark DBType(nchar), Length(100,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(100,varying=false))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblservey */
  lazy val Tblservey = new TableQuery(tag => new Tblservey(tag))
  
  /** Entity class storing rows of table Tblserveycollection
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param cdserveyno Database column cdServeyNo DBType(char), PrimaryKey, Length(8,false), Default()
   *  @param cdpatternno Database column cdPatternNo DBType(char), Length(10,false), Default()
   *  @param dtservey Database column dtServey DBType(datetime)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false), Default(Some())
   *  @param szfullname Database column szFullName DBType(nchar), Length(128,false), Default(Some())
   *  @param uida0005 Database column uidA0005 DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param uida0031 Database column uidA0031 DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param cdresult Database column cdResult DBType(char), Length(512,false), Default(Some())
   *  @param fscore Database column fScore DBType(float), Default(Some(0.0))
   *  @param szremark Database column szRemark DBType(nchar), Length(100,false), Default(Some())
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblserveycollectionRow(uid: String, uidrelation: String, cdserveyno: String = "", cdpatternno: String = "", dtservey: java.sql.Timestamp, cdmember: Option[String] = Some(""), szfullname: Option[String] = Some(""), uida0005: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), uida0031: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), cdresult: Option[String] = Some(""), fscore: Option[Double] = Some(0.0), szremark: Option[String] = Some(""), isinvalid: Option[Boolean] = Some(false), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblserveycollectionRow objects using plain SQL queries */
  implicit def GetResultTblserveycollectionRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[String]], e3: GR[Option[Double]], e4: GR[Option[Boolean]], e5: GR[Option[java.sql.Timestamp]]): GR[TblserveycollectionRow] = GR{
    prs => import prs._
    TblserveycollectionRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Double], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblServeyCollection. Objects of this class serve as prototypes for rows in queries. */
  class Tblserveycollection(_tableTag: Tag) extends Table[TblserveycollectionRow](_tableTag, Some("dbo"), "tblServeyCollection") {
    def * = (uid, uidrelation, cdserveyno, cdpatternno, dtservey, cdmember, szfullname, uida0005, uida0031, cdresult, fscore, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblserveycollectionRow.tupled, TblserveycollectionRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation.?, cdserveyno.?, cdpatternno.?, dtservey.?, cdmember, szfullname, uida0005, uida0031, cdresult, fscore, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblserveycollectionRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column cdServeyNo DBType(char), PrimaryKey, Length(8,false), Default() */
    val cdserveyno: Column[String] = column[String]("cdServeyNo", O.PrimaryKey, O.Length(8,varying=false), O.Default(""))
    /** Database column cdPatternNo DBType(char), Length(10,false), Default() */
    val cdpatternno: Column[String] = column[String]("cdPatternNo", O.Length(10,varying=false), O.Default(""))
    /** Database column dtServey DBType(datetime) */
    val dtservey: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtServey")
    /** Database column cdMember DBType(char), Length(10,false), Default(Some()) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szFullName DBType(nchar), Length(128,false), Default(Some()) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column uidA0005 DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uida0005: Column[Option[String]] = column[Option[String]]("uidA0005", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column uidA0031 DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uida0031: Column[Option[String]] = column[Option[String]]("uidA0031", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column cdResult DBType(char), Length(512,false), Default(Some()) */
    val cdresult: Column[Option[String]] = column[Option[String]]("cdResult", O.Length(512,varying=false), O.Default(Some("")))
    /** Database column fScore DBType(float), Default(Some(0.0)) */
    val fscore: Column[Option[Double]] = column[Option[Double]]("fScore", O.Default(Some(0.0)))
    /** Database column szRemark DBType(nchar), Length(100,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblserveycollection */
  lazy val Tblserveycollection = new TableQuery(tag => new Tblserveycollection(tag))
  
  /** Entity class storing rows of table Tblserveypattern
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpatternno Database column cdPatternNo DBType(char), PrimaryKey, Length(10,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szpatternname Database column szPatternName DBType(nchar), Length(100,false)
   *  @param szremark Database column szRemark DBType(nchar), Length(256,false)
   *  @param isinvalid Database column isInvalid DBType(bit), Default(false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblserveypatternRow(uid: Option[String], cdpatternno: String, cdlanguage: String, szpatternname: String, szremark: Option[String], isinvalid: Boolean = false, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblserveypatternRow objects using plain SQL queries */
  implicit def GetResultTblserveypatternRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Boolean], e3: GR[Option[java.sql.Timestamp]]): GR[TblserveypatternRow] = GR{
    prs => import prs._
    TblserveypatternRow.tupled((<<?[String], <<[String], <<[String], <<[String], <<?[String], <<[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblServeyPattern. Objects of this class serve as prototypes for rows in queries. */
  class Tblserveypattern(_tableTag: Tag) extends Table[TblserveypatternRow](_tableTag, Some("dbo"), "tblServeyPattern") {
    def * = (uid, cdpatternno, cdlanguage, szpatternname, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblserveypatternRow.tupled, TblserveypatternRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdpatternno.?, cdlanguage.?, szpatternname.?, szremark, isinvalid.?, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _2.map(_=> TblserveypatternRow.tupled((_1, _2.get, _3.get, _4.get, _5, _6.get, _7, _8, _9, _10)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdPatternNo DBType(char), PrimaryKey, Length(10,false) */
    val cdpatternno: Column[String] = column[String]("cdPatternNo", O.PrimaryKey, O.Length(10,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szPatternName DBType(nchar), Length(100,false) */
    val szpatternname: Column[String] = column[String]("szPatternName", O.Length(100,varying=false))
    /** Database column szRemark DBType(nchar), Length(256,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(256,varying=false))
    /** Database column isInvalid DBType(bit), Default(false) */
    val isinvalid: Column[Boolean] = column[Boolean]("isInvalid", O.Default(false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblserveypattern */
  lazy val Tblserveypattern = new TableQuery(tag => new Tblserveypattern(tag))
  
  /** Entity class storing rows of table Tblserveypatternqa
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidpattern Database column uidPattern DBType(uniqueidentifier), Length(36,false)
   *  @param idseq Database column idSeq DBType(int), Default(0)
   *  @param szquestion Database column szQuestion DBType(nchar), Length(100,false)
   *  @param cdquestype Database column cdQuesType DBType(char), Length(4,false), Default(-)
   *  @param cdanstype Database column cdAnsType DBType(char), Length(1,false)
   *  @param isscore Database column isScore DBType(int)
   *  @param cditem1 Database column cdItem1 DBType(char), Length(1,false)
   *  @param szans1 Database column szAns1 DBType(nchar), Length(50,false)
   *  @param cditem2 Database column cdItem2 DBType(char), Length(1,false)
   *  @param szans2 Database column szAns2 DBType(nchar), Length(50,false)
   *  @param cditem3 Database column cdItem3 DBType(char), Length(1,false)
   *  @param szans3 Database column szAns3 DBType(nchar), Length(50,false)
   *  @param cditem4 Database column cdItem4 DBType(char), Length(1,false)
   *  @param szans4 Database column szAns4 DBType(nchar), Length(50,false)
   *  @param cditem5 Database column cdItem5 DBType(char), Length(1,false)
   *  @param szans5 Database column szAns5 DBType(nchar), Length(50,false)
   *  @param cditem6 Database column cdItem6 DBType(char), Length(1,false)
   *  @param szans6 Database column szAns6 DBType(nchar), Length(50,false)
   *  @param szother Database column szOther DBType(nchar), Length(100,false)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblserveypatternqaRow(uid: String, uidpattern: String, idseq: Int = 0, szquestion: String, cdquestype: String = "-", cdanstype: Option[String], isscore: Option[Int], cditem1: Option[String], szans1: Option[String], cditem2: Option[String], szans2: Option[String], cditem3: Option[String], szans3: Option[String], cditem4: Option[String], szans4: Option[String], cditem5: Option[String], szans5: Option[String], cditem6: Option[String], szans6: Option[String], szother: Option[String], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblserveypatternqaRow objects using plain SQL queries */
  implicit def GetResultTblserveypatternqaRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]]): GR[TblserveypatternqaRow] = GR{
    prs => import prs._
    TblserveypatternqaRow.tupled((<<[String], <<[String], <<[Int], <<[String], <<[String], <<?[String], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblServeyPatternQA. Objects of this class serve as prototypes for rows in queries. */
  class Tblserveypatternqa(_tableTag: Tag) extends Table[TblserveypatternqaRow](_tableTag, Some("dbo"), "tblServeyPatternQA") {
    def * = (uid, uidpattern, idseq, szquestion, cdquestype, cdanstype, isscore, cditem1, szans1, cditem2, szans2, cditem3, szans3, cditem4, szans4, cditem5, szans5, cditem6, szans6, szother, uidmodifier, dtmodify) <> (TblserveypatternqaRow.tupled, TblserveypatternqaRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidpattern.?, idseq.?, szquestion.?, cdquestype.?, cdanstype, isscore, cditem1, szans1, cditem2, szans2, cditem3, szans3, cditem4, szans4, cditem5, szans5, cditem6, szans6, szother, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblserveypatternqaRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidPattern DBType(uniqueidentifier), Length(36,false) */
    val uidpattern: Column[String] = column[String]("uidPattern", O.Length(36,varying=false))
    /** Database column idSeq DBType(int), Default(0) */
    val idseq: Column[Int] = column[Int]("idSeq", O.Default(0))
    /** Database column szQuestion DBType(nchar), Length(100,false) */
    val szquestion: Column[String] = column[String]("szQuestion", O.Length(100,varying=false))
    /** Database column cdQuesType DBType(char), Length(4,false), Default(-) */
    val cdquestype: Column[String] = column[String]("cdQuesType", O.Length(4,varying=false), O.Default("-"))
    /** Database column cdAnsType DBType(char), Length(1,false) */
    val cdanstype: Column[Option[String]] = column[Option[String]]("cdAnsType", O.Length(1,varying=false))
    /** Database column isScore DBType(int) */
    val isscore: Column[Option[Int]] = column[Option[Int]]("isScore")
    /** Database column cdItem1 DBType(char), Length(1,false) */
    val cditem1: Column[Option[String]] = column[Option[String]]("cdItem1", O.Length(1,varying=false))
    /** Database column szAns1 DBType(nchar), Length(50,false) */
    val szans1: Column[Option[String]] = column[Option[String]]("szAns1", O.Length(50,varying=false))
    /** Database column cdItem2 DBType(char), Length(1,false) */
    val cditem2: Column[Option[String]] = column[Option[String]]("cdItem2", O.Length(1,varying=false))
    /** Database column szAns2 DBType(nchar), Length(50,false) */
    val szans2: Column[Option[String]] = column[Option[String]]("szAns2", O.Length(50,varying=false))
    /** Database column cdItem3 DBType(char), Length(1,false) */
    val cditem3: Column[Option[String]] = column[Option[String]]("cdItem3", O.Length(1,varying=false))
    /** Database column szAns3 DBType(nchar), Length(50,false) */
    val szans3: Column[Option[String]] = column[Option[String]]("szAns3", O.Length(50,varying=false))
    /** Database column cdItem4 DBType(char), Length(1,false) */
    val cditem4: Column[Option[String]] = column[Option[String]]("cdItem4", O.Length(1,varying=false))
    /** Database column szAns4 DBType(nchar), Length(50,false) */
    val szans4: Column[Option[String]] = column[Option[String]]("szAns4", O.Length(50,varying=false))
    /** Database column cdItem5 DBType(char), Length(1,false) */
    val cditem5: Column[Option[String]] = column[Option[String]]("cdItem5", O.Length(1,varying=false))
    /** Database column szAns5 DBType(nchar), Length(50,false) */
    val szans5: Column[Option[String]] = column[Option[String]]("szAns5", O.Length(50,varying=false))
    /** Database column cdItem6 DBType(char), Length(1,false) */
    val cditem6: Column[Option[String]] = column[Option[String]]("cdItem6", O.Length(1,varying=false))
    /** Database column szAns6 DBType(nchar), Length(50,false) */
    val szans6: Column[Option[String]] = column[Option[String]]("szAns6", O.Length(50,varying=false))
    /** Database column szOther DBType(nchar), Length(100,false) */
    val szother: Column[Option[String]] = column[Option[String]]("szOther", O.Length(100,varying=false))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblserveypatternqa (database name PK_tblServeyPatternQA) */
    val pk = primaryKey("PK_tblServeyPatternQA", (uidpattern, idseq))
  }
  /** Collection-like TableQuery object for table Tblserveypatternqa */
  lazy val Tblserveypatternqa = new TableQuery(tag => new Tblserveypatternqa(tag))
  
  /** Row type of table Tblservice */
  type TblserviceRow = HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[Double],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[Boolean],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblserviceRow providing default values if available in the database schema. */
  def TblserviceRow(uid: String, cdcenter: String, cdserviceno: String, cdcustomerid: Option[String], cdmemberid: Option[String], szfullname: Option[String], sztel: Option[String], szmobil: Option[String], szfax: Option[String], cdcountry: Option[String], cdarea: Option[String], cdctiy: Option[String], cdzip: Option[String], szaddress: Option[String], szfulladdr: Option[String], cdorderby: Option[String], cdtakeby: Option[String], szproblem: Option[String], szremark: Option[String], szcustremark: Option[String], cdwaterprod: Option[String], uidkeyin: Option[String], dtkeyin: Option[java.sql.Timestamp], uidevaluate: Option[String], dtevaluate: Option[java.sql.Timestamp], ftotalmoney: Option[Double], uidanswer: Option[String], dtanswer: Option[java.sql.Timestamp], isfix: Option[Boolean], uidfix: Option[String], dtfix: Option[java.sql.Timestamp], cdpayno: Option[String], dtpay: Option[java.sql.Timestamp], uidpayer: Option[String], cdtakeoutno: Option[String], uidtakeout: Option[String], dttakeout: Option[java.sql.Timestamp], cdstatus: Option[String], cdpercent: Option[String], cdcurrency: Option[String], cdemergency: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob]): TblserviceRow = {
    uid :: cdcenter :: cdserviceno :: cdcustomerid :: cdmemberid :: szfullname :: sztel :: szmobil :: szfax :: cdcountry :: cdarea :: cdctiy :: cdzip :: szaddress :: szfulladdr :: cdorderby :: cdtakeby :: szproblem :: szremark :: szcustremark :: cdwaterprod :: uidkeyin :: dtkeyin :: uidevaluate :: dtevaluate :: ftotalmoney :: uidanswer :: dtanswer :: isfix :: uidfix :: dtfix :: cdpayno :: dtpay :: uidpayer :: cdtakeoutno :: uidtakeout :: dttakeout :: cdstatus :: cdpercent :: cdcurrency :: cdemergency :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
  }
  /** GetResult implicit for fetching TblserviceRow objects using plain SQL queries */
  implicit def GetResultTblserviceRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Double]], e4: GR[Option[Boolean]], e5: GR[Option[java.sql.Blob]]): GR[TblserviceRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[Double] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[Boolean] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: HNil
  }
  /** Table description of table tblService. Objects of this class serve as prototypes for rows in queries. */
  class Tblservice(_tableTag: Tag) extends Table[TblserviceRow](_tableTag, Some("dbo"), "tblService") {
    def * = uid :: cdcenter :: cdserviceno :: cdcustomerid :: cdmemberid :: szfullname :: sztel :: szmobil :: szfax :: cdcountry :: cdarea :: cdctiy :: cdzip :: szaddress :: szfulladdr :: cdorderby :: cdtakeby :: szproblem :: szremark :: szcustremark :: cdwaterprod :: uidkeyin :: dtkeyin :: uidevaluate :: dtevaluate :: ftotalmoney :: uidanswer :: dtanswer :: isfix :: uidfix :: dtfix :: cdpayno :: dtpay :: uidpayer :: cdtakeoutno :: uidtakeout :: dttakeout :: cdstatus :: cdpercent :: cdcurrency :: cdemergency :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(2,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(2,varying=false))
    /** Database column cdServiceNo DBType(char), PrimaryKey, Length(15,false) */
    val cdserviceno: Column[String] = column[String]("cdServiceNo", O.PrimaryKey, O.Length(15,varying=false))
    /** Database column cdCustomerId DBType(char), Length(15,false) */
    val cdcustomerid: Column[Option[String]] = column[Option[String]]("cdCustomerId", O.Length(15,varying=false))
    /** Database column cdMemberId DBType(char), Length(15,false) */
    val cdmemberid: Column[Option[String]] = column[Option[String]]("cdMemberId", O.Length(15,varying=false))
    /** Database column szFullName DBType(char), Length(80,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(80,varying=false))
    /** Database column szTel DBType(char), Length(20,false) */
    val sztel: Column[Option[String]] = column[Option[String]]("szTel", O.Length(20,varying=false))
    /** Database column szMobil DBType(char), Length(20,false) */
    val szmobil: Column[Option[String]] = column[Option[String]]("szMobil", O.Length(20,varying=false))
    /** Database column szFax DBType(char), Length(20,false) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(20,varying=false))
    /** Database column cdCountry DBType(char), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdArea DBType(char), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdCtiy DBType(char), Length(10,false) */
    val cdctiy: Column[Option[String]] = column[Option[String]]("cdCtiy", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szAddress DBType(char), Length(128,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(128,varying=false))
    /** Database column szFullAddr DBType(char), Length(255,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(255,varying=false))
    /** Database column cdOrderBy DBType(char), Length(1,false) */
    val cdorderby: Column[Option[String]] = column[Option[String]]("cdOrderBy", O.Length(1,varying=false))
    /** Database column cdTakeBy DBType(char), Length(1,false) */
    val cdtakeby: Column[Option[String]] = column[Option[String]]("cdTakeBy", O.Length(1,varying=false))
    /** Database column szProblem DBType(char), Length(255,false) */
    val szproblem: Column[Option[String]] = column[Option[String]]("szProblem", O.Length(255,varying=false))
    /** Database column szRemark DBType(char), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column szCustRemark DBType(char), Length(255,false) */
    val szcustremark: Column[Option[String]] = column[Option[String]]("szCustRemark", O.Length(255,varying=false))
    /** Database column cdWaterProd DBType(char), Length(2,false) */
    val cdwaterprod: Column[Option[String]] = column[Option[String]]("cdWaterProd", O.Length(2,varying=false))
    /** Database column UidKeyin DBType(uniqueidentifier), Length(36,false) */
    val uidkeyin: Column[Option[String]] = column[Option[String]]("UidKeyin", O.Length(36,varying=false))
    /** Database column dtKeyin DBType(datetime) */
    val dtkeyin: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtKeyin")
    /** Database column uidEvaluate DBType(uniqueidentifier), Length(36,false) */
    val uidevaluate: Column[Option[String]] = column[Option[String]]("uidEvaluate", O.Length(36,varying=false))
    /** Database column dtEvaluate DBType(datetime) */
    val dtevaluate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEvaluate")
    /** Database column fTotalMoney DBType(float) */
    val ftotalmoney: Column[Option[Double]] = column[Option[Double]]("fTotalMoney")
    /** Database column uidAnswer DBType(uniqueidentifier), Length(36,false) */
    val uidanswer: Column[Option[String]] = column[Option[String]]("uidAnswer", O.Length(36,varying=false))
    /** Database column dtAnswer DBType(datetime) */
    val dtanswer: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtAnswer")
    /** Database column isFix DBType(bit) */
    val isfix: Column[Option[Boolean]] = column[Option[Boolean]]("isFix")
    /** Database column uidFix DBType(uniqueidentifier), Length(36,false) */
    val uidfix: Column[Option[String]] = column[Option[String]]("uidFix", O.Length(36,varying=false))
    /** Database column dtFix DBType(datetime) */
    val dtfix: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFix")
    /** Database column cdPayNo DBType(char), Length(20,false) */
    val cdpayno: Column[Option[String]] = column[Option[String]]("cdPayNo", O.Length(20,varying=false))
    /** Database column dtPay DBType(datetime) */
    val dtpay: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPay")
    /** Database column uidPayer DBType(uniqueidentifier), Length(36,false) */
    val uidpayer: Column[Option[String]] = column[Option[String]]("uidPayer", O.Length(36,varying=false))
    /** Database column cdTakeOutNo DBType(char), Length(20,false) */
    val cdtakeoutno: Column[Option[String]] = column[Option[String]]("cdTakeOutNo", O.Length(20,varying=false))
    /** Database column uidTakeOut DBType(uniqueidentifier), Length(36,false) */
    val uidtakeout: Column[Option[String]] = column[Option[String]]("uidTakeOut", O.Length(36,varying=false))
    /** Database column dtTakeOut DBType(datetime) */
    val dttakeout: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtTakeOut")
    /** Database column cdStatus DBType(char), Length(2,false) */
    val cdstatus: Column[Option[String]] = column[Option[String]]("cdStatus", O.Length(2,varying=false))
    /** Database column cdPercent DBType(char), Length(2,false) */
    val cdpercent: Column[Option[String]] = column[Option[String]]("cdPercent", O.Length(2,varying=false))
    /** Database column cdCurrency DBType(char), Length(6,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(6,varying=false))
    /** Database column cdEmergency DBType(char), Length(1,false) */
    val cdemergency: Column[Option[String]] = column[Option[String]]("cdEmergency", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
  }
  /** Collection-like TableQuery object for table Tblservice */
  lazy val Tblservice = new TableQuery(tag => new Tblservice(tag))
  
  /** Entity class storing rows of table Tblserviced
   *  @param uid Database column Uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidservice Database column uidService DBType(uniqueidentifier), Length(36,false)
   *  @param cdproductid Database column cdProductId DBType(char), Length(15,false)
   *  @param iqty Database column iQty DBType(int)
   *  @param cdunit Database column cdUnit DBType(char), Length(3,false)
   *  @param funitprice Database column fUnitPrice DBType(float)
   *  @param fdiscountprice Database column fDiscountPrice DBType(float)
   *  @param istatus Database column iStatus DBType(int)
   *  @param ischecked Database column isChecked DBType(bit)
   *  @param ischeckok Database column isCheckOk DBType(bit)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byts DBType(timestamp)
   *  @param cdcurrency Database column cdCurrency DBType(char), Length(4,false) */
  case class TblservicedRow(uid: String, uidservice: String, cdproductid: String, iqty: Option[Int], cdunit: Option[String], funitprice: Option[Double], fdiscountprice: Option[Double], istatus: Option[Int], ischecked: Option[Boolean], ischeckok: Option[Boolean], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], cdcurrency: Option[String])
  /** GetResult implicit for fetching TblservicedRow objects using plain SQL queries */
  implicit def GetResultTblservicedRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[Double]], e4: GR[Option[Boolean]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TblservicedRow] = GR{
    prs => import prs._
    TblservicedRow.tupled((<<[String], <<[String], <<[String], <<?[Int], <<?[String], <<?[Double], <<?[Double], <<?[Int], <<?[Boolean], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob], <<?[String]))
  }
  /** Table description of table tblServiceD. Objects of this class serve as prototypes for rows in queries. */
  class Tblserviced(_tableTag: Tag) extends Table[TblservicedRow](_tableTag, Some("dbo"), "tblServiceD") {
    def * = (uid, uidservice, cdproductid, iqty, cdunit, funitprice, fdiscountprice, istatus, ischecked, ischeckok, uidmodifier, dtmodify, byts, cdcurrency) <> (TblservicedRow.tupled, TblservicedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidservice.?, cdproductid.?, iqty, cdunit, funitprice, fdiscountprice, istatus, ischecked, ischeckok, uidmodifier, dtmodify, byts, cdcurrency).shaped.<>({r=>import r._; _1.map(_=> TblservicedRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column Uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("Uid", O.Length(36,varying=false))
    /** Database column uidService DBType(uniqueidentifier), Length(36,false) */
    val uidservice: Column[String] = column[String]("uidService", O.Length(36,varying=false))
    /** Database column cdProductId DBType(char), Length(15,false) */
    val cdproductid: Column[String] = column[String]("cdProductId", O.Length(15,varying=false))
    /** Database column iQty DBType(int) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty")
    /** Database column cdUnit DBType(char), Length(3,false) */
    val cdunit: Column[Option[String]] = column[Option[String]]("cdUnit", O.Length(3,varying=false))
    /** Database column fUnitPrice DBType(float) */
    val funitprice: Column[Option[Double]] = column[Option[Double]]("fUnitPrice")
    /** Database column fDiscountPrice DBType(float) */
    val fdiscountprice: Column[Option[Double]] = column[Option[Double]]("fDiscountPrice")
    /** Database column iStatus DBType(int) */
    val istatus: Column[Option[Int]] = column[Option[Int]]("iStatus")
    /** Database column isChecked DBType(bit) */
    val ischecked: Column[Option[Boolean]] = column[Option[Boolean]]("isChecked")
    /** Database column isCheckOk DBType(bit) */
    val ischeckok: Column[Option[Boolean]] = column[Option[Boolean]]("isCheckOk")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    
    /** Primary key of Tblserviced (database name PK_tblServiceD) */
    val pk = primaryKey("PK_tblServiceD", (uidservice, cdproductid))
    
    /** Index over (uidservice) (database name IX_tblServiceD) */
    val index1 = index("IX_tblServiceD", uidservice)
  }
  /** Collection-like TableQuery object for table Tblserviced */
  lazy val Tblserviced = new TableQuery(tag => new Tblserviced(tag))
  
  /** Entity class storing rows of table Tblsetelevate
   *  @param cdgrade Database column cdGrade DBType(char), Length(10,false)
   *  @param cdcourse Database column cdCourse DBType(char), Length(20,false)
   *  @param icount Database column iCount DBType(int), Default(Some(1))
   *  @param ismeeting Database column isMeeting DBType(bit), Default(Some(false)) */
  case class TblsetelevateRow(cdgrade: String, cdcourse: String, icount: Option[Int] = Some(1), ismeeting: Option[Boolean] = Some(false))
  /** GetResult implicit for fetching TblsetelevateRow objects using plain SQL queries */
  implicit def GetResultTblsetelevateRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[Boolean]]): GR[TblsetelevateRow] = GR{
    prs => import prs._
    TblsetelevateRow.tupled((<<[String], <<[String], <<?[Int], <<?[Boolean]))
  }
  /** Table description of table tblSetElevate. Objects of this class serve as prototypes for rows in queries. */
  class Tblsetelevate(_tableTag: Tag) extends Table[TblsetelevateRow](_tableTag, Some("dbo"), "tblSetElevate") {
    def * = (cdgrade, cdcourse, icount, ismeeting) <> (TblsetelevateRow.tupled, TblsetelevateRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdgrade.?, cdcourse.?, icount, ismeeting).shaped.<>({r=>import r._; _1.map(_=> TblsetelevateRow.tupled((_1.get, _2.get, _3, _4)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdGrade DBType(char), Length(10,false) */
    val cdgrade: Column[String] = column[String]("cdGrade", O.Length(10,varying=false))
    /** Database column cdCourse DBType(char), Length(20,false) */
    val cdcourse: Column[String] = column[String]("cdCourse", O.Length(20,varying=false))
    /** Database column iCount DBType(int), Default(Some(1)) */
    val icount: Column[Option[Int]] = column[Option[Int]]("iCount", O.Default(Some(1)))
    /** Database column isMeeting DBType(bit), Default(Some(false)) */
    val ismeeting: Column[Option[Boolean]] = column[Option[Boolean]]("isMeeting", O.Default(Some(false)))
    
    /** Primary key of Tblsetelevate (database name PK_tblSetElevate) */
    val pk = primaryKey("PK_tblSetElevate", (cdgrade, cdcourse))
  }
  /** Collection-like TableQuery object for table Tblsetelevate */
  lazy val Tblsetelevate = new TableQuery(tag => new Tblsetelevate(tag))
  
  /** Entity class storing rows of table Tblsrvparts
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param szprodid Database column szProdId DBType(char), PrimaryKey, Length(15,false)
   *  @param frepairamt Database column fRepairAmt DBType(float)
   *  @param isreplace Database column isReplace DBType(bit)
   *  @param freplaceamt Database column fReplaceAmt DBType(float)
   *  @param sznewprodid Database column szNewProdId DBType(char), Length(15,false)
   *  @param isvendorrepair Database column isVendorRepair DBType(bit)
   *  @param fvendoramt Database column fVendorAmt DBType(float)
   *  @param isfactoryrepair Database column isFactoryRepair DBType(bit)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byts DBType(timestamp) */
  case class TblsrvpartsRow(uid: String, szprodid: String, frepairamt: Option[Double], isreplace: Option[Boolean], freplaceamt: Option[Double], sznewprodid: Option[String], isvendorrepair: Option[Boolean], fvendoramt: Option[Double], isfactoryrepair: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblsrvpartsRow objects using plain SQL queries */
  implicit def GetResultTblsrvpartsRow(implicit e0: GR[String], e1: GR[Option[Double]], e2: GR[Option[Boolean]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[java.sql.Blob]]): GR[TblsrvpartsRow] = GR{
    prs => import prs._
    TblsrvpartsRow.tupled((<<[String], <<[String], <<?[Double], <<?[Boolean], <<?[Double], <<?[String], <<?[Boolean], <<?[Double], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblSrvParts. Objects of this class serve as prototypes for rows in queries. */
  class Tblsrvparts(_tableTag: Tag) extends Table[TblsrvpartsRow](_tableTag, Some("dbo"), "tblSrvParts") {
    def * = (uid, szprodid, frepairamt, isreplace, freplaceamt, sznewprodid, isvendorrepair, fvendoramt, isfactoryrepair, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblsrvpartsRow.tupled, TblsrvpartsRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szprodid.?, frepairamt, isreplace, freplaceamt, sznewprodid, isvendorrepair, fvendoramt, isfactoryrepair, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblsrvpartsRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szProdId DBType(char), PrimaryKey, Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdId", O.PrimaryKey, O.Length(15,varying=false))
    /** Database column fRepairAmt DBType(float) */
    val frepairamt: Column[Option[Double]] = column[Option[Double]]("fRepairAmt")
    /** Database column isReplace DBType(bit) */
    val isreplace: Column[Option[Boolean]] = column[Option[Boolean]]("isReplace")
    /** Database column fReplaceAmt DBType(float) */
    val freplaceamt: Column[Option[Double]] = column[Option[Double]]("fReplaceAmt")
    /** Database column szNewProdId DBType(char), Length(15,false) */
    val sznewprodid: Column[Option[String]] = column[Option[String]]("szNewProdId", O.Length(15,varying=false))
    /** Database column isVendorRepair DBType(bit) */
    val isvendorrepair: Column[Option[Boolean]] = column[Option[Boolean]]("isVendorRepair")
    /** Database column fVendorAmt DBType(float) */
    val fvendoramt: Column[Option[Double]] = column[Option[Double]]("fVendorAmt")
    /** Database column isFactoryRepair DBType(bit) */
    val isfactoryrepair: Column[Option[Boolean]] = column[Option[Boolean]]("isFactoryRepair")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
  }
  /** Collection-like TableQuery object for table Tblsrvparts */
  lazy val Tblsrvparts = new TableQuery(tag => new Tblsrvparts(tag))
  
  /** Entity class storing rows of table Tblstate
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcountry Database column cdCountry DBType(char), Length(4,false)
   *  @param cdstate Database column cdState DBType(char), Length(10,false)
   *  @param cdstatetel Database column cdStateTel DBType(char), Length(4,false), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblstateRow(uid: String, cdcountry: String, cdstate: String, cdstatetel: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblstateRow objects using plain SQL queries */
  implicit def GetResultTblstateRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblstateRow] = GR{
    prs => import prs._
    TblstateRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblState. Objects of this class serve as prototypes for rows in queries. */
  class Tblstate(_tableTag: Tag) extends Table[TblstateRow](_tableTag, Some("dbo"), "tblState") {
    def * = (uid, cdcountry, cdstate, cdstatetel, uidcreator, dtcreate, byts) <> (TblstateRow.tupled, TblstateRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcountry.?, cdstate.?, cdstatetel, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblstateRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[String] = column[String]("cdCountry", O.Length(4,varying=false))
    /** Database column cdState DBType(char), Length(10,false) */
    val cdstate: Column[String] = column[String]("cdState", O.Length(10,varying=false))
    /** Database column cdStateTel DBType(char), Length(4,false), Default(Some()) */
    val cdstatetel: Column[Option[String]] = column[Option[String]]("cdStateTel", O.Length(4,varying=false), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblstate (database name PK_tblArea) */
    val pk = primaryKey("PK_tblArea", (cdcountry, cdstate))
  }
  /** Collection-like TableQuery object for table Tblstate */
  lazy val Tblstate = new TableQuery(tag => new Tblstate(tag))
  
  /** Entity class storing rows of table Tblstated
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidstate Database column uidState DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szshort Database column szShort DBType(nvarchar), Length(50,true), Default(Some())
   *  @param szname Database column szName DBType(nvarchar), Length(50,true), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblstatedRow(uid: String, uidstate: String, cdlanguage: String, szshort: Option[String] = Some(""), szname: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstatedRow objects using plain SQL queries */
  implicit def GetResultTblstatedRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblstatedRow] = GR{
    prs => import prs._
    TblstatedRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStateD. Objects of this class serve as prototypes for rows in queries. */
  class Tblstated(_tableTag: Tag) extends Table[TblstatedRow](_tableTag, Some("dbo"), "tblStateD") {
    def * = (uid, uidstate, cdlanguage, szshort, szname, uidmodifier, dtmodify) <> (TblstatedRow.tupled, TblstatedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidstate.?, cdlanguage.?, szshort, szname, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblstatedRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidState DBType(uniqueidentifier), Length(36,false) */
    val uidstate: Column[String] = column[String]("uidState", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szShort DBType(nvarchar), Length(50,true), Default(Some()) */
    val szshort: Column[Option[String]] = column[Option[String]]("szShort", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column szName DBType(nvarchar), Length(50,true), Default(Some()) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblstated (database name PK_tblAreaD) */
    val pk = primaryKey("PK_tblAreaD", (uidstate, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblstated */
  lazy val Tblstated = new TableQuery(tag => new Tblstated(tag))
  
  /** Row type of table Tblstation */
  type TblstationRow = HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Int,HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblstationRow providing default values if available in the database schema. */
  def TblstationRow(uid: String, cdserviceid: String, uidmem: Option[String], cdmemid: Option[String], cdleader: Option[String], dtfilldate: Option[java.sql.Timestamp], cdstation: Option[String], cdclassify: Option[String], cdmethod: Option[String], cdspace: Option[String], cdnote: Option[String], dtallowdate: Option[java.sql.Timestamp], cdallowman: Option[String], dtconsdate: Option[java.sql.Timestamp], cdconsman: Option[String], cdpaycontent: Option[String], dteffectdate: Option[java.sql.Timestamp], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], cdarea: Option[String], cdstationcondition: Option[String], dtstop: Option[java.sql.Timestamp], dtextend: Option[java.sql.Timestamp], szpicture: Option[String] = Some(""), itimes: Int = 1): TblstationRow = {
    uid :: cdserviceid :: uidmem :: cdmemid :: cdleader :: dtfilldate :: cdstation :: cdclassify :: cdmethod :: cdspace :: cdnote :: dtallowdate :: cdallowman :: dtconsdate :: cdconsman :: cdpaycontent :: dteffectdate :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: cdarea :: cdstationcondition :: dtstop :: dtextend :: szpicture :: itimes :: HNil
  }
  /** GetResult implicit for fetching TblstationRow objects using plain SQL queries */
  implicit def GetResultTblstationRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Int]): GR[TblstationRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<[Int] :: HNil
  }
  /** Table description of table tblStation. Objects of this class serve as prototypes for rows in queries. */
  class Tblstation(_tableTag: Tag) extends Table[TblstationRow](_tableTag, Some("dbo"), "tblStation") {
    def * = uid :: cdserviceid :: uidmem :: cdmemid :: cdleader :: dtfilldate :: cdstation :: cdclassify :: cdmethod :: cdspace :: cdnote :: dtallowdate :: cdallowman :: dtconsdate :: cdconsman :: cdpaycontent :: dteffectdate :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: cdarea :: cdstationcondition :: dtstop :: dtextend :: szpicture :: itimes :: HNil
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdServiceID DBType(nchar), Length(10,false) */
    val cdserviceid: Column[String] = column[String]("cdServiceID", O.Length(10,varying=false))
    /** Database column uidMem DBType(uniqueidentifier), Length(36,false) */
    val uidmem: Column[Option[String]] = column[Option[String]]("uidMem", O.Length(36,varying=false))
    /** Database column cdMemID DBType(nchar), Length(10,false) */
    val cdmemid: Column[Option[String]] = column[Option[String]]("cdMemID", O.Length(10,varying=false))
    /** Database column cdLeader DBType(nchar), Length(10,false) */
    val cdleader: Column[Option[String]] = column[Option[String]]("cdLeader", O.Length(10,varying=false))
    /** Database column dtFillDate DBType(datetime) */
    val dtfilldate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFillDate")
    /** Database column cdStation DBType(nchar), Length(50,false) */
    val cdstation: Column[Option[String]] = column[Option[String]]("cdStation", O.Length(50,varying=false))
    /** Database column cdClassify DBType(nchar), Length(10,false) */
    val cdclassify: Column[Option[String]] = column[Option[String]]("cdClassify", O.Length(10,varying=false))
    /** Database column cdMethod DBType(nchar), Length(10,false) */
    val cdmethod: Column[Option[String]] = column[Option[String]]("cdMethod", O.Length(10,varying=false))
    /** Database column cdSpace DBType(nchar), Length(10,false) */
    val cdspace: Column[Option[String]] = column[Option[String]]("cdSpace", O.Length(10,varying=false))
    /** Database column cdNote DBType(nchar), Length(256,false) */
    val cdnote: Column[Option[String]] = column[Option[String]]("cdNote", O.Length(256,varying=false))
    /** Database column dtAllowDate DBType(datetime) */
    val dtallowdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtAllowDate")
    /** Database column cdAllowMan DBType(nchar), Length(50,false) */
    val cdallowman: Column[Option[String]] = column[Option[String]]("cdAllowMan", O.Length(50,varying=false))
    /** Database column dtConsDate DBType(datetime) */
    val dtconsdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtConsDate")
    /** Database column cdConsman DBType(nchar), Length(50,false) */
    val cdconsman: Column[Option[String]] = column[Option[String]]("cdConsman", O.Length(50,varying=false))
    /** Database column cdPayContent DBType(nchar), Length(1024,false) */
    val cdpaycontent: Column[Option[String]] = column[Option[String]]("cdPayContent", O.Length(1024,varying=false))
    /** Database column dtEffectDate DBType(datetime) */
    val dteffectdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEffectDate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column cdArea DBType(nchar), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdStationCondition DBType(char), Length(1,false) */
    val cdstationcondition: Column[Option[String]] = column[Option[String]]("cdStationCondition", O.Length(1,varying=false))
    /** Database column dtStop DBType(datetime) */
    val dtstop: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStop")
    /** Database column dtExtend DBType(datetime) */
    val dtextend: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtExtend")
    /** Database column szPicture DBType(nchar), Length(20,false), Default(Some()) */
    val szpicture: Column[Option[String]] = column[Option[String]]("szPicture", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column iTimes DBType(int), Default(1) */
    val itimes: Column[Int] = column[Int]("iTimes", O.Default(1))
  }
  /** Collection-like TableQuery object for table Tblstation */
  lazy val Tblstation = new TableQuery(tag => new Tblstation(tag))
  
  /** Entity class storing rows of table Tblstationextend
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param iextendyear Database column iExtendYear DBType(int), PrimaryKey
   *  @param cdcourse Database column cdCourse DBType(char), Length(5,false)
   *  @param dtstrvalidate Database column dtStrValidate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblstationextendRow(uid: String, iextendyear: Int, cdcourse: Option[String], dtstrvalidate: Option[java.sql.Timestamp], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstationextendRow objects using plain SQL queries */
  implicit def GetResultTblstationextendRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblstationextendRow] = GR{
    prs => import prs._
    TblstationextendRow.tupled((<<[String], <<[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStationExtend. Objects of this class serve as prototypes for rows in queries. */
  class Tblstationextend(_tableTag: Tag) extends Table[TblstationextendRow](_tableTag, Some("dbo"), "tblStationExtend") {
    def * = (uid, iextendyear, cdcourse, dtstrvalidate, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblstationextendRow.tupled, TblstationextendRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, iextendyear.?, cdcourse, dtstrvalidate, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblstationextendRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column iExtendYear DBType(int), PrimaryKey */
    val iextendyear: Column[Int] = column[Int]("iExtendYear", O.PrimaryKey)
    /** Database column cdCourse DBType(char), Length(5,false) */
    val cdcourse: Column[Option[String]] = column[Option[String]]("cdCourse", O.Length(5,varying=false))
    /** Database column dtStrValidate DBType(datetime) */
    val dtstrvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrValidate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblstationextend */
  lazy val Tblstationextend = new TableQuery(tag => new Tblstationextend(tag))
  
  /** Entity class storing rows of table Tblstationextendd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param iextendyear Database column iExtendYear DBType(int)
   *  @param cdmemid Database column cdMemID DBType(char), Length(10,false), Default()
   *  @param cdserviceid Database column cdServiceID DBType(char), Length(10,false), Default()
   *  @param szname Database column szName DBType(nchar), Length(100,false), Default(Some())
   *  @param szstationname Database column szStationName DBType(nchar), Length(100,false), Default(Some())
   *  @param dtlastcontractdate Database column dtLastContractDate DBType(datetime)
   *  @param dtextend Database column dtExtend DBType(datetime)
   *  @param dtstrvalidate Database column dtStrValidate DBType(datetime)
   *  @param dtstrvalidate2 Database column dtStrValidate2 DBType(datetime)
   *  @param cdpsyche Database column cdPsyche DBType(char), Length(1,false)
   *  @param cdmachineexpiration Database column cdMachineExpiration DBType(char), Length(1,false), Default()
   *  @param cdextend Database column cdExtend DBType(char), Length(1,false), Default()
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblstationextenddRow(uid: String, iextendyear: Int, cdmemid: String = "", cdserviceid: String = "", szname: Option[String] = Some(""), szstationname: Option[String] = Some(""), dtlastcontractdate: Option[java.sql.Timestamp], dtextend: Option[java.sql.Timestamp], dtstrvalidate: Option[java.sql.Timestamp], dtstrvalidate2: Option[java.sql.Timestamp], cdpsyche: String, cdmachineexpiration: String = "", cdextend: String = "", uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstationextenddRow objects using plain SQL queries */
  implicit def GetResultTblstationextenddRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblstationextenddRow] = GR{
    prs => import prs._
    TblstationextenddRow.tupled((<<[String], <<[Int], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStationExtendD. Objects of this class serve as prototypes for rows in queries. */
  class Tblstationextendd(_tableTag: Tag) extends Table[TblstationextenddRow](_tableTag, Some("dbo"), "tblStationExtendD") {
    def * = (uid, iextendyear, cdmemid, cdserviceid, szname, szstationname, dtlastcontractdate, dtextend, dtstrvalidate, dtstrvalidate2, cdpsyche, cdmachineexpiration, cdextend, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblstationextenddRow.tupled, TblstationextenddRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, iextendyear.?, cdmemid.?, cdserviceid.?, szname, szstationname, dtlastcontractdate, dtextend, dtstrvalidate, dtstrvalidate2, cdpsyche.?, cdmachineexpiration.?, cdextend.?, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblstationextenddRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11.get, _12.get, _13.get, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column iExtendYear DBType(int) */
    val iextendyear: Column[Int] = column[Int]("iExtendYear")
    /** Database column cdMemID DBType(char), Length(10,false), Default() */
    val cdmemid: Column[String] = column[String]("cdMemID", O.Length(10,varying=false), O.Default(""))
    /** Database column cdServiceID DBType(char), Length(10,false), Default() */
    val cdserviceid: Column[String] = column[String]("cdServiceID", O.Length(10,varying=false), O.Default(""))
    /** Database column szName DBType(nchar), Length(100,false), Default(Some()) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column szStationName DBType(nchar), Length(100,false), Default(Some()) */
    val szstationname: Column[Option[String]] = column[Option[String]]("szStationName", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column dtLastContractDate DBType(datetime) */
    val dtlastcontractdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastContractDate")
    /** Database column dtExtend DBType(datetime) */
    val dtextend: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtExtend")
    /** Database column dtStrValidate DBType(datetime) */
    val dtstrvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrValidate")
    /** Database column dtStrValidate2 DBType(datetime) */
    val dtstrvalidate2: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrValidate2")
    /** Database column cdPsyche DBType(char), Length(1,false) */
    val cdpsyche: Column[String] = column[String]("cdPsyche", O.Length(1,varying=false))
    /** Database column cdMachineExpiration DBType(char), Length(1,false), Default() */
    val cdmachineexpiration: Column[String] = column[String]("cdMachineExpiration", O.Length(1,varying=false), O.Default(""))
    /** Database column cdExtend DBType(char), Length(1,false), Default() */
    val cdextend: Column[String] = column[String]("cdExtend", O.Length(1,varying=false), O.Default(""))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblstationextendd (database name PK_tblStationExtendD) */
    val pk = primaryKey("PK_tblStationExtendD", (iextendyear, cdmemid))
  }
  /** Collection-like TableQuery object for table Tblstationextendd */
  lazy val Tblstationextendd = new TableQuery(tag => new Tblstationextendd(tag))
  
  /** Entity class storing rows of table Tblstationopp
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdserviceid Database column cdServiceID DBType(nchar), Length(10,false)
   *  @param dtfax Database column dtFax DBType(datetime)
   *  @param dtoppmeeting Database column dtOPPMeeting DBType(datetime)
   *  @param ioppman Database column iOPPMan DBType(int)
   *  @param cdoppname Database column cdOPPName DBType(nchar), Length(50,false)
   *  @param cdoppcontent Database column cdOPPContent DBType(nchar), Length(1024,false)
   *  @param cdnote Database column cdNote DBType(nchar), Length(1024,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param dtupload Database column dtUpload DBType(datetime) */
  case class TblstationoppRow(uid: String, cdserviceid: String, dtfax: Option[java.sql.Timestamp], dtoppmeeting: Option[java.sql.Timestamp], ioppman: Option[Int], cdoppname: Option[String], cdoppcontent: Option[String], cdnote: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], dtupload: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstationoppRow objects using plain SQL queries */
  implicit def GetResultTblstationoppRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[Int]], e3: GR[Option[String]]): GR[TblstationoppRow] = GR{
    prs => import prs._
    TblstationoppRow.tupled((<<[String], <<[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[Int], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStationOPP. Objects of this class serve as prototypes for rows in queries. */
  class Tblstationopp(_tableTag: Tag) extends Table[TblstationoppRow](_tableTag, Some("dbo"), "tblStationOPP") {
    def * = (uid, cdserviceid, dtfax, dtoppmeeting, ioppman, cdoppname, cdoppcontent, cdnote, uidcreator, dtcreate, uidmodifier, dtmodify, dtupload) <> (TblstationoppRow.tupled, TblstationoppRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdserviceid.?, dtfax, dtoppmeeting, ioppman, cdoppname, cdoppcontent, cdnote, uidcreator, dtcreate, uidmodifier, dtmodify, dtupload).shaped.<>({r=>import r._; _1.map(_=> TblstationoppRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdServiceID DBType(nchar), Length(10,false) */
    val cdserviceid: Column[String] = column[String]("cdServiceID", O.Length(10,varying=false))
    /** Database column dtFax DBType(datetime) */
    val dtfax: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtFax")
    /** Database column dtOPPMeeting DBType(datetime) */
    val dtoppmeeting: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtOPPMeeting")
    /** Database column iOPPMan DBType(int) */
    val ioppman: Column[Option[Int]] = column[Option[Int]]("iOPPMan")
    /** Database column cdOPPName DBType(nchar), Length(50,false) */
    val cdoppname: Column[Option[String]] = column[Option[String]]("cdOPPName", O.Length(50,varying=false))
    /** Database column cdOPPContent DBType(nchar), Length(1024,false) */
    val cdoppcontent: Column[Option[String]] = column[Option[String]]("cdOPPContent", O.Length(1024,varying=false))
    /** Database column cdNote DBType(nchar), Length(1024,false) */
    val cdnote: Column[Option[String]] = column[Option[String]]("cdNote", O.Length(1024,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column dtUpload DBType(datetime) */
    val dtupload: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtUpload")
    
    /** Primary key of Tblstationopp (database name PK_tblStationOPP) */
    val pk = primaryKey("PK_tblStationOPP", (uid, cdserviceid))
  }
  /** Collection-like TableQuery object for table Tblstationopp */
  lazy val Tblstationopp = new TableQuery(tag => new Tblstationopp(tag))
  
  /** Entity class storing rows of table Tblstationpause
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param cdServiceid Database column cd_ServiceID DBType(nchar), Length(10,false)
   *  @param dtpauses Database column dtPauseS DBType(datetime)
   *  @param dtpausee Database column dtPauseE DBType(datetime)
   *  @param cdflag Database column cdFlag DBType(nchar), Length(10,false), Default(Some())
   *  @param szremark Database column szRemark DBType(nchar), Length(256,false), Default(Some())
   *  @param isinvalid Database column isInvalid DBType(bit), Default(Some(false))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblstationpauseRow(uid: String, uidrelation: Option[String], cdServiceid: Option[String], dtpauses: Option[java.sql.Timestamp], dtpausee: Option[java.sql.Timestamp], cdflag: Option[String] = Some(""), szremark: Option[String] = Some(""), isinvalid: Option[Boolean] = Some(false), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstationpauseRow objects using plain SQL queries */
  implicit def GetResultTblstationpauseRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]]): GR[TblstationpauseRow] = GR{
    prs => import prs._
    TblstationpauseRow.tupled((<<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStationPause. Objects of this class serve as prototypes for rows in queries. */
  class Tblstationpause(_tableTag: Tag) extends Table[TblstationpauseRow](_tableTag, Some("dbo"), "tblStationPause") {
    def * = (uid, uidrelation, cdServiceid, dtpauses, dtpausee, cdflag, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblstationpauseRow.tupled, TblstationpauseRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation, cdServiceid, dtpauses, dtpausee, cdflag, szremark, isinvalid, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblstationpauseRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false))
    /** Database column cd_ServiceID DBType(nchar), Length(10,false) */
    val cdServiceid: Column[Option[String]] = column[Option[String]]("cd_ServiceID", O.Length(10,varying=false))
    /** Database column dtPauseS DBType(datetime) */
    val dtpauses: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPauseS")
    /** Database column dtPauseE DBType(datetime) */
    val dtpausee: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtPauseE")
    /** Database column cdFlag DBType(nchar), Length(10,false), Default(Some()) */
    val cdflag: Column[Option[String]] = column[Option[String]]("cdFlag", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(256,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(256,varying=false), O.Default(Some("")))
    /** Database column isInvalid DBType(bit), Default(Some(false)) */
    val isinvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isInvalid", O.Default(Some(false)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblstationpause */
  lazy val Tblstationpause = new TableQuery(tag => new Tblstationpause(tag))
  
  /** Entity class storing rows of table Tblstationtel
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uid2000relation Database column uid2000Relation DBType(uniqueidentifier), Length(36,false)
   *  @param uidstationrelation Database column uidStationRelation DBType(uniqueidentifier), Length(36,false)
   *  @param cdsubtype Database column cdSubType DBType(nchar), Length(10,false)
   *  @param szdetail Database column szDetail DBType(nchar), Length(128,false)
   *  @param cdcountry Database column cdCountry DBType(nchar), Length(10,false)
   *  @param cdarea Database column cdArea DBType(nchar), Length(10,false)
   *  @param cdcity Database column cdCity DBType(nchar), Length(10,false)
   *  @param cdext Database column cdExt DBType(nchar), Length(10,false)
   *  @param isdefault Database column isDefault DBType(bit)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblstationtelRow(uid: String, uid2000relation: Option[String], uidstationrelation: Option[String], cdsubtype: Option[String], szdetail: Option[String], cdcountry: Option[String], cdarea: Option[String], cdcity: Option[String], cdext: Option[String], isdefault: Option[Boolean], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstationtelRow objects using plain SQL queries */
  implicit def GetResultTblstationtelRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Boolean]], e3: GR[Option[java.sql.Timestamp]]): GR[TblstationtelRow] = GR{
    prs => import prs._
    TblstationtelRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStationTel. Objects of this class serve as prototypes for rows in queries. */
  class Tblstationtel(_tableTag: Tag) extends Table[TblstationtelRow](_tableTag, Some("dbo"), "tblStationTel") {
    def * = (uid, uid2000relation, uidstationrelation, cdsubtype, szdetail, cdcountry, cdarea, cdcity, cdext, isdefault, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblstationtelRow.tupled, TblstationtelRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uid2000relation, uidstationrelation, cdsubtype, szdetail, cdcountry, cdarea, cdcity, cdext, isdefault, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblstationtelRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uid2000Relation DBType(uniqueidentifier), Length(36,false) */
    val uid2000relation: Column[Option[String]] = column[Option[String]]("uid2000Relation", O.Length(36,varying=false))
    /** Database column uidStationRelation DBType(uniqueidentifier), Length(36,false) */
    val uidstationrelation: Column[Option[String]] = column[Option[String]]("uidStationRelation", O.Length(36,varying=false))
    /** Database column cdSubType DBType(nchar), Length(10,false) */
    val cdsubtype: Column[Option[String]] = column[Option[String]]("cdSubType", O.Length(10,varying=false))
    /** Database column szDetail DBType(nchar), Length(128,false) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false))
    /** Database column cdCountry DBType(nchar), Length(10,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(10,varying=false))
    /** Database column cdArea DBType(nchar), Length(10,false) */
    val cdarea: Column[Option[String]] = column[Option[String]]("cdArea", O.Length(10,varying=false))
    /** Database column cdCity DBType(nchar), Length(10,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(10,varying=false))
    /** Database column cdExt DBType(nchar), Length(10,false) */
    val cdext: Column[Option[String]] = column[Option[String]]("cdExt", O.Length(10,varying=false))
    /** Database column isDefault DBType(bit) */
    val isdefault: Column[Option[Boolean]] = column[Option[Boolean]]("isDefault")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblstationtel */
  lazy val Tblstationtel = new TableQuery(tag => new Tblstationtel(tag))
  
  /** Row type of table Tblstock */
  type TblstockRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Int],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblstockRow providing default values if available in the database schema. */
  def TblstockRow(uid: String, cdcenter: String, cditem: String, cdwarehouse: String, cdwarehouse1: Option[String], cdwarehouse2: Option[String], cdwarehouse3: Option[String], cdwarehouse4: Option[String], iauditqty: Option[Int], iinhouseqty: Option[Int], iboqty: Option[Int], ifixqty: Option[Int], iuseqty: Option[Int], ipickup: Option[Int], ishelfqty: Option[Int], iwriteoffqty: Option[Int], itmonwayqty: Option[Int], ipoonwayqty: Option[Int], imanifestqty: Option[Int], iddepositoryqty: Option[Int], ipostqty: Option[Int], ipreinvqtyd: Option[Int], iprefixqty: Option[Int], ipreinvqtym: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], icheck: Option[Int]): TblstockRow = {
    uid :: cdcenter :: cditem :: cdwarehouse :: cdwarehouse1 :: cdwarehouse2 :: cdwarehouse3 :: cdwarehouse4 :: iauditqty :: iinhouseqty :: iboqty :: ifixqty :: iuseqty :: ipickup :: ishelfqty :: iwriteoffqty :: itmonwayqty :: ipoonwayqty :: imanifestqty :: iddepositoryqty :: ipostqty :: ipreinvqtyd :: iprefixqty :: ipreinvqtym :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icheck :: HNil
  }
  /** GetResult implicit for fetching TblstockRow objects using plain SQL queries */
  implicit def GetResultTblstockRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblstockRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Int] :: HNil
  }
  /** Table description of table tblStock. Objects of this class serve as prototypes for rows in queries. */
  class Tblstock(_tableTag: Tag) extends Table[TblstockRow](_tableTag, Some("dbo"), "tblStock") {
    def * = uid :: cdcenter :: cditem :: cdwarehouse :: cdwarehouse1 :: cdwarehouse2 :: cdwarehouse3 :: cdwarehouse4 :: iauditqty :: iinhouseqty :: iboqty :: ifixqty :: iuseqty :: ipickup :: ishelfqty :: iwriteoffqty :: itmonwayqty :: ipoonwayqty :: imanifestqty :: iddepositoryqty :: ipostqty :: ipreinvqtyd :: iprefixqty :: ipreinvqtym :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icheck :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdItem DBType(char), Length(15,false) */
    val cditem: Column[String] = column[String]("cdItem", O.Length(15,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column cdWareHouse1 DBType(char), Length(6,false) */
    val cdwarehouse1: Column[Option[String]] = column[Option[String]]("cdWareHouse1", O.Length(6,varying=false))
    /** Database column cdWareHouse2 DBType(char), Length(6,false) */
    val cdwarehouse2: Column[Option[String]] = column[Option[String]]("cdWareHouse2", O.Length(6,varying=false))
    /** Database column cdWareHouse3 DBType(char), Length(6,false) */
    val cdwarehouse3: Column[Option[String]] = column[Option[String]]("cdWareHouse3", O.Length(6,varying=false))
    /** Database column cdWareHouse4 DBType(char), Length(6,false) */
    val cdwarehouse4: Column[Option[String]] = column[Option[String]]("cdWareHouse4", O.Length(6,varying=false))
    /** Database column iAuditQty DBType(int) */
    val iauditqty: Column[Option[Int]] = column[Option[Int]]("iAuditQty")
    /** Database column iInHouseQty DBType(int) */
    val iinhouseqty: Column[Option[Int]] = column[Option[Int]]("iInHouseQty")
    /** Database column iBoQty DBType(int) */
    val iboqty: Column[Option[Int]] = column[Option[Int]]("iBoQty")
    /** Database column iFixQty DBType(int) */
    val ifixqty: Column[Option[Int]] = column[Option[Int]]("iFixQty")
    /** Database column iUseQty DBType(int) */
    val iuseqty: Column[Option[Int]] = column[Option[Int]]("iUseQty")
    /** Database column iPickUp DBType(int) */
    val ipickup: Column[Option[Int]] = column[Option[Int]]("iPickUp")
    /** Database column iShelfQty DBType(int) */
    val ishelfqty: Column[Option[Int]] = column[Option[Int]]("iShelfQty")
    /** Database column iWriteOffQty DBType(int) */
    val iwriteoffqty: Column[Option[Int]] = column[Option[Int]]("iWriteOffQty")
    /** Database column iTmOnWayQty DBType(int) */
    val itmonwayqty: Column[Option[Int]] = column[Option[Int]]("iTmOnWayQty")
    /** Database column iPoOnWayQty DBType(int) */
    val ipoonwayqty: Column[Option[Int]] = column[Option[Int]]("iPoOnWayQty")
    /** Database column iManifestQty DBType(int) */
    val imanifestqty: Column[Option[Int]] = column[Option[Int]]("iManifestQty")
    /** Database column iDdepositoryQty DBType(int) */
    val iddepositoryqty: Column[Option[Int]] = column[Option[Int]]("iDdepositoryQty")
    /** Database column iPostQty DBType(int) */
    val ipostqty: Column[Option[Int]] = column[Option[Int]]("iPostQty")
    /** Database column iPreInvQtyD DBType(int) */
    val ipreinvqtyd: Column[Option[Int]] = column[Option[Int]]("iPreInvQtyD")
    /** Database column iPreFixQty DBType(int) */
    val iprefixqty: Column[Option[Int]] = column[Option[Int]]("iPreFixQty")
    /** Database column iPreInvQtyM DBType(int) */
    val ipreinvqtym: Column[Option[Int]] = column[Option[Int]]("iPreInvQtyM")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column iCheck DBType(int) */
    val icheck: Column[Option[Int]] = column[Option[Int]]("iCheck")
    
    /** Primary key of Tblstock (database name PK_tblStock) */
    val pk = primaryKey("PK_tblStock", cdcenter :: cditem :: cdwarehouse :: HNil)
  }
  /** Collection-like TableQuery object for table Tblstock */
  lazy val Tblstock = new TableQuery(tag => new Tblstock(tag))
  
  /** Entity class storing rows of table TblstockLog
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param cditem Database column cdItem DBType(char), Length(15,false)
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param dtupdate Database column dtUpdate DBType(datetime)
   *  @param ibeforeqty Database column iBeforeQty DBType(int)
   *  @param iafterqty Database column iAfterQty DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblstockLogRow(uid: String, cdcenter: String, cditem: String, cdwarehouse: String, dtupdate: java.sql.Timestamp, ibeforeqty: Option[Int], iafterqty: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstockLogRow objects using plain SQL queries */
  implicit def GetResultTblstockLogRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[Int]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]]): GR[TblstockLogRow] = GR{
    prs => import prs._
    TblstockLogRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[java.sql.Timestamp], <<?[Int], <<?[Int], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStock_Log. Objects of this class serve as prototypes for rows in queries. */
  class TblstockLog(_tableTag: Tag) extends Table[TblstockLogRow](_tableTag, Some("dbo"), "tblStock_Log") {
    def * = (uid, cdcenter, cditem, cdwarehouse, dtupdate, ibeforeqty, iafterqty, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblstockLogRow.tupled, TblstockLogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcenter.?, cditem.?, cdwarehouse.?, dtupdate.?, ibeforeqty, iafterqty, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblstockLogRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdItem DBType(char), Length(15,false) */
    val cditem: Column[String] = column[String]("cdItem", O.Length(15,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column dtUpdate DBType(datetime) */
    val dtupdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtUpdate")
    /** Database column iBeforeQty DBType(int) */
    val ibeforeqty: Column[Option[Int]] = column[Option[Int]]("iBeforeQty")
    /** Database column iAfterQty DBType(int) */
    val iafterqty: Column[Option[Int]] = column[Option[Int]]("iAfterQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table TblstockLog */
  lazy val TblstockLog = new TableQuery(tag => new TblstockLog(tag))
  
  /** Row type of table TblstockTmp */
  type TblstockTmpRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[Int],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblstockTmpRow providing default values if available in the database schema. */
  def TblstockTmpRow(uid: String, cdcenter: String, cditem: String, cdwarehouse: String, iauditqty: Option[Int], iinhouseqty: Option[Int], iboqty: Option[Int], ifixqty: Option[Int], iuseqty: Option[Int], ipickup: Option[Int], ishelfqty: Option[Int], iwriteoffqty: Option[Int], itmonwayqty: Option[Int], ipoonwayqty: Option[Int], imanifestqty: Option[Int], iddepositoryqty: Option[Int], ipostqty: Option[Int], iprefixqty: Option[Int], iinhousevarqty: Option[Int], ifixvarqty: Option[Int], ipreinvqtyd: Option[Int], ipreinvqtym: Option[Int], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], icheck: Option[Int]): TblstockTmpRow = {
    uid :: cdcenter :: cditem :: cdwarehouse :: iauditqty :: iinhouseqty :: iboqty :: ifixqty :: iuseqty :: ipickup :: ishelfqty :: iwriteoffqty :: itmonwayqty :: ipoonwayqty :: imanifestqty :: iddepositoryqty :: ipostqty :: iprefixqty :: iinhousevarqty :: ifixvarqty :: ipreinvqtyd :: ipreinvqtym :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: icheck :: HNil
  }
  /** GetResult implicit for fetching TblstockTmpRow objects using plain SQL queries */
  implicit def GetResultTblstockTmpRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblstockTmpRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[Int] :: HNil
  }
  /** Table description of table tblStock_Tmp. Objects of this class serve as prototypes for rows in queries. */
  class TblstockTmp(_tableTag: Tag) extends Table[TblstockTmpRow](_tableTag, Some("dbo"), "tblStock_Tmp") {
    def * = uid :: cdcenter :: cditem :: cdwarehouse :: iauditqty :: iinhouseqty :: iboqty :: ifixqty :: iuseqty :: ipickup :: ishelfqty :: iwriteoffqty :: itmonwayqty :: ipoonwayqty :: imanifestqty :: iddepositoryqty :: ipostqty :: iprefixqty :: iinhousevarqty :: ifixvarqty :: ipreinvqtyd :: ipreinvqtym :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: icheck :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdItem DBType(char), Length(15,false) */
    val cditem: Column[String] = column[String]("cdItem", O.Length(15,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column iAuditQty DBType(int) */
    val iauditqty: Column[Option[Int]] = column[Option[Int]]("iAuditQty")
    /** Database column iInHouseQty DBType(int) */
    val iinhouseqty: Column[Option[Int]] = column[Option[Int]]("iInHouseQty")
    /** Database column iBoQty DBType(int) */
    val iboqty: Column[Option[Int]] = column[Option[Int]]("iBoQty")
    /** Database column iFixQty DBType(int) */
    val ifixqty: Column[Option[Int]] = column[Option[Int]]("iFixQty")
    /** Database column iUseQty DBType(int) */
    val iuseqty: Column[Option[Int]] = column[Option[Int]]("iUseQty")
    /** Database column iPickUp DBType(int) */
    val ipickup: Column[Option[Int]] = column[Option[Int]]("iPickUp")
    /** Database column iShelfQty DBType(int) */
    val ishelfqty: Column[Option[Int]] = column[Option[Int]]("iShelfQty")
    /** Database column iWriteOffQty DBType(int) */
    val iwriteoffqty: Column[Option[Int]] = column[Option[Int]]("iWriteOffQty")
    /** Database column iTmOnWayQty DBType(int) */
    val itmonwayqty: Column[Option[Int]] = column[Option[Int]]("iTmOnWayQty")
    /** Database column iPoOnWayQty DBType(int) */
    val ipoonwayqty: Column[Option[Int]] = column[Option[Int]]("iPoOnWayQty")
    /** Database column iManifestQty DBType(int) */
    val imanifestqty: Column[Option[Int]] = column[Option[Int]]("iManifestQty")
    /** Database column iDdepositoryQty DBType(int) */
    val iddepositoryqty: Column[Option[Int]] = column[Option[Int]]("iDdepositoryQty")
    /** Database column iPostQty DBType(int) */
    val ipostqty: Column[Option[Int]] = column[Option[Int]]("iPostQty")
    /** Database column iPreFixQty DBType(int) */
    val iprefixqty: Column[Option[Int]] = column[Option[Int]]("iPreFixQty")
    /** Database column iInHouseVarQty DBType(int) */
    val iinhousevarqty: Column[Option[Int]] = column[Option[Int]]("iInHouseVarQty")
    /** Database column iFixVarQty DBType(int) */
    val ifixvarqty: Column[Option[Int]] = column[Option[Int]]("iFixVarQty")
    /** Database column iPreInvQtyD DBType(int) */
    val ipreinvqtyd: Column[Option[Int]] = column[Option[Int]]("iPreInvQtyD")
    /** Database column iPreInvQtyM DBType(int) */
    val ipreinvqtym: Column[Option[Int]] = column[Option[Int]]("iPreInvQtyM")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column iCheck DBType(int) */
    val icheck: Column[Option[Int]] = column[Option[Int]]("iCheck")
    
    /** Primary key of TblstockTmp (database name PK_tblStock_Tmp) */
    val pk = primaryKey("PK_tblStock_Tmp", cdcenter :: cditem :: cdwarehouse :: HNil)
  }
  /** Collection-like TableQuery object for table TblstockTmp */
  lazy val TblstockTmp = new TableQuery(tag => new TblstockTmp(tag))
  
  /** Entity class storing rows of table Tblstorewarehouse
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param szstoreid Database column szStoreID DBType(char), PrimaryKey, Length(14,false)
   *  @param cdcenter Database column cdCenter DBType(char), Length(4,false)
   *  @param dtstoredate Database column dtStoreDate DBType(datetime)
   *  @param cdwarehouse Database column cdWareHouse DBType(char), Length(4,false)
   *  @param sztransfilename Database column szTransFileName DBType(char), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblstorewarehouseRow(uid: String, szstoreid: String, cdcenter: String, dtstoredate: Option[java.sql.Timestamp], cdwarehouse: Option[String], sztransfilename: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstorewarehouseRow objects using plain SQL queries */
  implicit def GetResultTblstorewarehouseRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]]): GR[TblstorewarehouseRow] = GR{
    prs => import prs._
    TblstorewarehouseRow.tupled((<<[String], <<[String], <<[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStoreWareHouse. Objects of this class serve as prototypes for rows in queries. */
  class Tblstorewarehouse(_tableTag: Tag) extends Table[TblstorewarehouseRow](_tableTag, Some("dbo"), "tblStoreWareHouse") {
    def * = (uid, szstoreid, cdcenter, dtstoredate, cdwarehouse, sztransfilename, uidcreator, dtcreate) <> (TblstorewarehouseRow.tupled, TblstorewarehouseRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szstoreid.?, cdcenter.?, dtstoredate, cdwarehouse, sztransfilename, uidcreator, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblstorewarehouseRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szStoreID DBType(char), PrimaryKey, Length(14,false) */
    val szstoreid: Column[String] = column[String]("szStoreID", O.PrimaryKey, O.Length(14,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column dtStoreDate DBType(datetime) */
    val dtstoredate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStoreDate")
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[Option[String]] = column[Option[String]]("cdWareHouse", O.Length(4,varying=false))
    /** Database column szTransFileName DBType(char), Length(255,false) */
    val sztransfilename: Column[Option[String]] = column[Option[String]]("szTransFileName", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
  }
  /** Collection-like TableQuery object for table Tblstorewarehouse */
  lazy val Tblstorewarehouse = new TableQuery(tag => new Tblstorewarehouse(tag))
  
  /** Entity class storing rows of table Tblstorewarehoused
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidstorehouse Database column uidStoreHouse DBType(uniqueidentifier), Length(36,false)
   *  @param iseq Database column iSeq DBType(int)
   *  @param szprodid Database column szProdID DBType(char), Length(15,false)
   *  @param szprodids Database column szProdIDs DBType(char), Length(15,false)
   *  @param cdwareid Database column cdWareID DBType(char), Length(15,false)
   *  @param istorenum Database column iStoreNum DBType(int)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblstorewarehousedRow(uid: String, uidstorehouse: String, iseq: Int, szprodid: String, szprodids: Option[String], cdwareid: Option[String], istorenum: Int, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblstorewarehousedRow objects using plain SQL queries */
  implicit def GetResultTblstorewarehousedRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblstorewarehousedRow] = GR{
    prs => import prs._
    TblstorewarehousedRow.tupled((<<[String], <<[String], <<[Int], <<[String], <<?[String], <<?[String], <<[Int], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblStoreWareHouseD. Objects of this class serve as prototypes for rows in queries. */
  class Tblstorewarehoused(_tableTag: Tag) extends Table[TblstorewarehousedRow](_tableTag, Some("dbo"), "tblStoreWareHouseD") {
    def * = (uid, uidstorehouse, iseq, szprodid, szprodids, cdwareid, istorenum, uidcreator, dtcreate) <> (TblstorewarehousedRow.tupled, TblstorewarehousedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidstorehouse.?, iseq.?, szprodid.?, szprodids, cdwareid, istorenum.?, uidcreator, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblstorewarehousedRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7.get, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidStoreHouse DBType(uniqueidentifier), Length(36,false) */
    val uidstorehouse: Column[String] = column[String]("uidStoreHouse", O.Length(36,varying=false))
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column szProdIDs DBType(char), Length(15,false) */
    val szprodids: Column[Option[String]] = column[Option[String]]("szProdIDs", O.Length(15,varying=false))
    /** Database column cdWareID DBType(char), Length(15,false) */
    val cdwareid: Column[Option[String]] = column[Option[String]]("cdWareID", O.Length(15,varying=false))
    /** Database column iStoreNum DBType(int) */
    val istorenum: Column[Int] = column[Int]("iStoreNum")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    
    /** Primary key of Tblstorewarehoused (database name PK_tblStoreWareHouseD) */
    val pk = primaryKey("PK_tblStoreWareHouseD", (uidstorehouse, iseq))
  }
  /** Collection-like TableQuery object for table Tblstorewarehoused */
  lazy val Tblstorewarehoused = new TableQuery(tag => new Tblstorewarehoused(tag))
  
  /** Row type of table Tblswhlog */
  type TblswhlogRow = HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[String,HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblswhlogRow providing default values if available in the database schema. */
  def TblswhlogRow(uid: String, cdcenter: String, dtupdate: java.sql.Timestamp, cdidheader: String, cdid: String, cdiotype: Int, iseq: Int, cditem: String, cdwarehouse: String, iinhousediffqty: Option[Int], iauditdiffqty: Option[Int] = Some(0), iusediffqty: Option[Int] = Some(0), ipickupdiffqty: Option[Int] = Some(0), ishelfdiffqty: Option[Int] = Some(0), iwriteoffqty: Option[Int] = Some(0), itmonwayqty: Option[Int] = Some(0), ipoonwayqty: Option[Int] = Some(0), imanifestqty: Option[Int] = Some(0), iddepositoryqty: Option[Int] = Some(0), ipostdiffqty: Option[Int] = Some(0), ibodiffqty: Option[Int] = Some(0), ifixdiffqty: Option[Int] = Some(0), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): TblswhlogRow = {
    uid :: cdcenter :: dtupdate :: cdidheader :: cdid :: cdiotype :: iseq :: cditem :: cdwarehouse :: iinhousediffqty :: iauditdiffqty :: iusediffqty :: ipickupdiffqty :: ishelfdiffqty :: iwriteoffqty :: itmonwayqty :: ipoonwayqty :: imanifestqty :: iddepositoryqty :: ipostdiffqty :: ibodiffqty :: ifixdiffqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching TblswhlogRow objects using plain SQL queries */
  implicit def GetResultTblswhlogRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Int], e3: GR[Option[Int]], e4: GR[Option[String]], e5: GR[Option[java.sql.Timestamp]]): GR[TblswhlogRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblSWHLog. Objects of this class serve as prototypes for rows in queries. */
  class Tblswhlog(_tableTag: Tag) extends Table[TblswhlogRow](_tableTag, Some("dbo"), "tblSWHLog") {
    def * = uid :: cdcenter :: dtupdate :: cdidheader :: cdid :: cdiotype :: iseq :: cditem :: cdwarehouse :: iinhousediffqty :: iauditdiffqty :: iusediffqty :: ipickupdiffqty :: ishelfdiffqty :: iwriteoffqty :: itmonwayqty :: ipoonwayqty :: imanifestqty :: iddepositoryqty :: ipostdiffqty :: ibodiffqty :: ifixdiffqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column dtUpdate DBType(datetime) */
    val dtupdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtUpdate")
    /** Database column cdIdHeader DBType(char), Length(2,false) */
    val cdidheader: Column[String] = column[String]("cdIdHeader", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(14,false) */
    val cdid: Column[String] = column[String]("cdId", O.Length(14,varying=false))
    /** Database column cdIoType DBType(int) */
    val cdiotype: Column[Int] = column[Int]("cdIoType")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdItem DBType(char), Length(15,false) */
    val cditem: Column[String] = column[String]("cdItem", O.Length(15,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column iInHouseDiffQty DBType(int) */
    val iinhousediffqty: Column[Option[Int]] = column[Option[Int]]("iInHouseDiffQty")
    /** Database column iAuditDiffQty DBType(int), Default(Some(0)) */
    val iauditdiffqty: Column[Option[Int]] = column[Option[Int]]("iAuditDiffQty", O.Default(Some(0)))
    /** Database column iUseDiffQty DBType(int), Default(Some(0)) */
    val iusediffqty: Column[Option[Int]] = column[Option[Int]]("iUseDiffQty", O.Default(Some(0)))
    /** Database column iPickUpDiffQty DBType(int), Default(Some(0)) */
    val ipickupdiffqty: Column[Option[Int]] = column[Option[Int]]("iPickUpDiffQty", O.Default(Some(0)))
    /** Database column iShelfDiffQty DBType(int), Default(Some(0)) */
    val ishelfdiffqty: Column[Option[Int]] = column[Option[Int]]("iShelfDiffQty", O.Default(Some(0)))
    /** Database column iWriteOffQty DBType(int), Default(Some(0)) */
    val iwriteoffqty: Column[Option[Int]] = column[Option[Int]]("iWriteOffQty", O.Default(Some(0)))
    /** Database column iTmOnWayQty DBType(int), Default(Some(0)) */
    val itmonwayqty: Column[Option[Int]] = column[Option[Int]]("iTmOnWayQty", O.Default(Some(0)))
    /** Database column iPoOnWayQty DBType(int), Default(Some(0)) */
    val ipoonwayqty: Column[Option[Int]] = column[Option[Int]]("iPoOnWayQty", O.Default(Some(0)))
    /** Database column iManifestQty DBType(int), Default(Some(0)) */
    val imanifestqty: Column[Option[Int]] = column[Option[Int]]("iManifestQty", O.Default(Some(0)))
    /** Database column iDdepositoryQty DBType(int), Default(Some(0)) */
    val iddepositoryqty: Column[Option[Int]] = column[Option[Int]]("iDdepositoryQty", O.Default(Some(0)))
    /** Database column iPostDiffQty DBType(int), Default(Some(0)) */
    val ipostdiffqty: Column[Option[Int]] = column[Option[Int]]("iPostDiffQty", O.Default(Some(0)))
    /** Database column iBoDiffQty DBType(int), Default(Some(0)) */
    val ibodiffqty: Column[Option[Int]] = column[Option[Int]]("iBoDiffQty", O.Default(Some(0)))
    /** Database column iFixDiffQty DBType(int), Default(Some(0)) */
    val ifixdiffqty: Column[Option[Int]] = column[Option[Int]]("iFixDiffQty", O.Default(Some(0)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblswhlog (database name PK_tblSWHLog) */
    val pk = primaryKey("PK_tblSWHLog", dtupdate :: cdid :: iseq :: cditem :: cdwarehouse :: HNil)
  }
  /** Collection-like TableQuery object for table Tblswhlog */
  lazy val Tblswhlog = new TableQuery(tag => new Tblswhlog(tag))
  
  /** Row type of table TblswhlogTmp */
  type TblswhlogTmpRow = HCons[String,HCons[String,HCons[java.sql.Timestamp,HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[String,HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TblswhlogTmpRow providing default values if available in the database schema. */
  def TblswhlogTmpRow(uid: String, cdcenter: String, dtupdate: java.sql.Timestamp, cdidheader: String, cdid: String, cdiotype: Int, iseq: Int, cditem: String, cdwarehouse: String, iinhousediffqty: Option[Int], iauditdiffqty: Option[Int] = Some(0), iusediffqty: Option[Int] = Some(0), ipickupdiffqty: Option[Int] = Some(0), ishelfdiffqty: Option[Int] = Some(0), iwriteoffqty: Option[Int] = Some(0), itmonwayqty: Option[Int] = Some(0), ipoonwayqty: Option[Int] = Some(0), imanifestqty: Option[Int] = Some(0), iddepositoryqty: Option[Int] = Some(0), ipostdiffqty: Option[Int] = Some(0), ibodiffqty: Option[Int] = Some(0), ifixdiffqty: Option[Int] = Some(0), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): TblswhlogTmpRow = {
    uid :: cdcenter :: dtupdate :: cdidheader :: cdid :: cdiotype :: iseq :: cditem :: cdwarehouse :: iinhousediffqty :: iauditdiffqty :: iusediffqty :: ipickupdiffqty :: ishelfdiffqty :: iwriteoffqty :: itmonwayqty :: ipoonwayqty :: imanifestqty :: iddepositoryqty :: ipostdiffqty :: ibodiffqty :: ifixdiffqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching TblswhlogTmpRow objects using plain SQL queries */
  implicit def GetResultTblswhlogTmpRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Int], e3: GR[Option[Int]], e4: GR[Option[String]], e5: GR[Option[java.sql.Timestamp]]): GR[TblswhlogTmpRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[java.sql.Timestamp] :: <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<[String] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table tblSWHLog_Tmp. Objects of this class serve as prototypes for rows in queries. */
  class TblswhlogTmp(_tableTag: Tag) extends Table[TblswhlogTmpRow](_tableTag, Some("dbo"), "tblSWHLog_Tmp") {
    def * = uid :: cdcenter :: dtupdate :: cdidheader :: cdid :: cdiotype :: iseq :: cditem :: cdwarehouse :: iinhousediffqty :: iauditdiffqty :: iusediffqty :: ipickupdiffqty :: ishelfdiffqty :: iwriteoffqty :: itmonwayqty :: ipoonwayqty :: imanifestqty :: iddepositoryqty :: ipostdiffqty :: ibodiffqty :: ifixdiffqty :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column dtUpdate DBType(datetime) */
    val dtupdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtUpdate")
    /** Database column cdIdHeader DBType(char), Length(2,false) */
    val cdidheader: Column[String] = column[String]("cdIdHeader", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(14,false) */
    val cdid: Column[String] = column[String]("cdId", O.Length(14,varying=false))
    /** Database column cdIoType DBType(int) */
    val cdiotype: Column[Int] = column[Int]("cdIoType")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column cdItem DBType(char), Length(15,false) */
    val cditem: Column[String] = column[String]("cdItem", O.Length(15,varying=false))
    /** Database column cdWareHouse DBType(char), Length(4,false) */
    val cdwarehouse: Column[String] = column[String]("cdWareHouse", O.Length(4,varying=false))
    /** Database column iInHouseDiffQty DBType(int) */
    val iinhousediffqty: Column[Option[Int]] = column[Option[Int]]("iInHouseDiffQty")
    /** Database column iAuditDiffQty DBType(int), Default(Some(0)) */
    val iauditdiffqty: Column[Option[Int]] = column[Option[Int]]("iAuditDiffQty", O.Default(Some(0)))
    /** Database column iUseDiffQty DBType(int), Default(Some(0)) */
    val iusediffqty: Column[Option[Int]] = column[Option[Int]]("iUseDiffQty", O.Default(Some(0)))
    /** Database column iPickUpDiffQty DBType(int), Default(Some(0)) */
    val ipickupdiffqty: Column[Option[Int]] = column[Option[Int]]("iPickUpDiffQty", O.Default(Some(0)))
    /** Database column iShelfDiffQty DBType(int), Default(Some(0)) */
    val ishelfdiffqty: Column[Option[Int]] = column[Option[Int]]("iShelfDiffQty", O.Default(Some(0)))
    /** Database column iWriteOffQty DBType(int), Default(Some(0)) */
    val iwriteoffqty: Column[Option[Int]] = column[Option[Int]]("iWriteOffQty", O.Default(Some(0)))
    /** Database column iTmOnWayQty DBType(int), Default(Some(0)) */
    val itmonwayqty: Column[Option[Int]] = column[Option[Int]]("iTmOnWayQty", O.Default(Some(0)))
    /** Database column iPoOnWayQty DBType(int), Default(Some(0)) */
    val ipoonwayqty: Column[Option[Int]] = column[Option[Int]]("iPoOnWayQty", O.Default(Some(0)))
    /** Database column iManifestQty DBType(int), Default(Some(0)) */
    val imanifestqty: Column[Option[Int]] = column[Option[Int]]("iManifestQty", O.Default(Some(0)))
    /** Database column iDdepositoryQty DBType(int), Default(Some(0)) */
    val iddepositoryqty: Column[Option[Int]] = column[Option[Int]]("iDdepositoryQty", O.Default(Some(0)))
    /** Database column iPostDiffQty DBType(int), Default(Some(0)) */
    val ipostdiffqty: Column[Option[Int]] = column[Option[Int]]("iPostDiffQty", O.Default(Some(0)))
    /** Database column iBoDiffQty DBType(int), Default(Some(0)) */
    val ibodiffqty: Column[Option[Int]] = column[Option[Int]]("iBoDiffQty", O.Default(Some(0)))
    /** Database column iFixDiffQty DBType(int), Default(Some(0)) */
    val ifixdiffqty: Column[Option[Int]] = column[Option[Int]]("iFixDiffQty", O.Default(Some(0)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of TblswhlogTmp (database name PK_tblSWHLog_Tmp) */
    val pk = primaryKey("PK_tblSWHLog_Tmp", dtupdate :: cdid :: iseq :: cditem :: cdwarehouse :: HNil)
  }
  /** Collection-like TableQuery object for table TblswhlogTmp */
  lazy val TblswhlogTmp = new TableQuery(tag => new TblswhlogTmp(tag))
  
  /** Entity class storing rows of table Tblsyslog
   *  @param id Database column id DBType(int identity), AutoInc
   *  @param cdprgcode Database column cdPrgCode DBType(nvarchar), Length(50,true), Default(Some())
   *  @param szaction Database column szAction DBType(nvarchar), Length(50,true), Default(Some())
   *  @param szcontent Database column szContent DBType(nvarchar), Length(1024,true)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
  case class TblsyslogRow(id: Int, cdprgcode: Option[String] = Some(""), szaction: Option[String] = Some(""), szcontent: Option[String], dtcreate: Option[java.sql.Timestamp], uidcreator: Option[String])
  /** GetResult implicit for fetching TblsyslogRow objects using plain SQL queries */
  implicit def GetResultTblsyslogRow(implicit e0: GR[Int], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblsyslogRow] = GR{
    prs => import prs._
    TblsyslogRow.tupled((<<[Int], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblSysLog. Objects of this class serve as prototypes for rows in queries. */
  class Tblsyslog(_tableTag: Tag) extends Table[TblsyslogRow](_tableTag, Some("dbo"), "tblSysLog") {
    def * = (id, cdprgcode, szaction, szcontent, dtcreate, uidcreator) <> (TblsyslogRow.tupled, TblsyslogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, cdprgcode, szaction, szcontent, dtcreate, uidcreator).shaped.<>({r=>import r._; _1.map(_=> TblsyslogRow.tupled((_1.get, _2, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(int identity), AutoInc */
    val id: Column[Int] = column[Int]("id", O.AutoInc)
    /** Database column cdPrgCode DBType(nvarchar), Length(50,true), Default(Some()) */
    val cdprgcode: Column[Option[String]] = column[Option[String]]("cdPrgCode", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column szAction DBType(nvarchar), Length(50,true), Default(Some()) */
    val szaction: Column[Option[String]] = column[Option[String]]("szAction", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column szContent DBType(nvarchar), Length(1024,true) */
    val szcontent: Column[Option[String]] = column[Option[String]]("szContent", O.Length(1024,varying=true))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    
    /** Index over (cdprgcode,szaction) (database name IX_tblSysLog) */
    val index1 = index("IX_tblSysLog", (cdprgcode, szaction))
    /** Index over (dtcreate) (database name IX_tblSysLog_1) */
    val index2 = index("IX_tblSysLog_1", dtcreate)
  }
  /** Collection-like TableQuery object for table Tblsyslog */
  lazy val Tblsyslog = new TableQuery(tag => new Tblsyslog(tag))
  
  /** Entity class storing rows of table Tblsysparameter
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdseq Database column cdSeq DBType(char), PrimaryKey, Length(8,false)
   *  @param szleading Database column szLeading DBType(char), Length(50,false)
   *  @param ikeylength Database column iKeyLength DBType(int), Default(Some(0))
   *  @param isshowlength Database column isShowLength DBType(bit), Default(Some(false))
   *  @param cduplayer Database column cdUpLayer DBType(char), Length(8,false)
   *  @param cdcompany Database column cdCompany DBType(char), Length(4,false), Default(Some(DDSC))
   *  @param cdfunction Database column cdFunction DBType(char), Length(20,false), Default(Some(CONFIG))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param cdgroup01 Database column cdGroup01 DBType(varchar), Length(50,true)
   *  @param cdgroup02 Database column cdGroup02 DBType(varchar), Length(50,true)
   *  @param cdgroup03 Database column cdGroup03 DBType(varchar), Length(50,true) */
  case class TblsysparameterRow(uid: String, cdseq: String, szleading: Option[String], ikeylength: Option[Int] = Some(0), isshowlength: Option[Boolean] = Some(false), cduplayer: Option[String], cdcompany: Option[String] = Some("DDSC"), cdfunction: Option[String] = Some("CONFIG"), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], cdgroup01: Option[String], cdgroup02: Option[String], cdgroup03: Option[String])
  /** GetResult implicit for fetching TblsysparameterRow objects using plain SQL queries */
  implicit def GetResultTblsysparameterRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[Boolean]], e4: GR[Option[java.sql.Timestamp]]): GR[TblsysparameterRow] = GR{
    prs => import prs._
    TblsysparameterRow.tupled((<<[String], <<[String], <<?[String], <<?[Int], <<?[Boolean], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblSysParameter. Objects of this class serve as prototypes for rows in queries. */
  class Tblsysparameter(_tableTag: Tag) extends Table[TblsysparameterRow](_tableTag, Some("dbo"), "tblSysParameter") {
    def * = (uid, cdseq, szleading, ikeylength, isshowlength, cduplayer, cdcompany, cdfunction, uidcreator, dtcreate, cdgroup01, cdgroup02, cdgroup03) <> (TblsysparameterRow.tupled, TblsysparameterRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdseq.?, szleading, ikeylength, isshowlength, cduplayer, cdcompany, cdfunction, uidcreator, dtcreate, cdgroup01, cdgroup02, cdgroup03).shaped.<>({r=>import r._; _1.map(_=> TblsysparameterRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdSeq DBType(char), PrimaryKey, Length(8,false) */
    val cdseq: Column[String] = column[String]("cdSeq", O.PrimaryKey, O.Length(8,varying=false))
    /** Database column szLeading DBType(char), Length(50,false) */
    val szleading: Column[Option[String]] = column[Option[String]]("szLeading", O.Length(50,varying=false))
    /** Database column iKeyLength DBType(int), Default(Some(0)) */
    val ikeylength: Column[Option[Int]] = column[Option[Int]]("iKeyLength", O.Default(Some(0)))
    /** Database column isShowLength DBType(bit), Default(Some(false)) */
    val isshowlength: Column[Option[Boolean]] = column[Option[Boolean]]("isShowLength", O.Default(Some(false)))
    /** Database column cdUpLayer DBType(char), Length(8,false) */
    val cduplayer: Column[Option[String]] = column[Option[String]]("cdUpLayer", O.Length(8,varying=false))
    /** Database column cdCompany DBType(char), Length(4,false), Default(Some(DDSC)) */
    val cdcompany: Column[Option[String]] = column[Option[String]]("cdCompany", O.Length(4,varying=false), O.Default(Some("DDSC")))
    /** Database column cdFunction DBType(char), Length(20,false), Default(Some(CONFIG)) */
    val cdfunction: Column[Option[String]] = column[Option[String]]("cdFunction", O.Length(20,varying=false), O.Default(Some("CONFIG")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column cdGroup01 DBType(varchar), Length(50,true) */
    val cdgroup01: Column[Option[String]] = column[Option[String]]("cdGroup01", O.Length(50,varying=true))
    /** Database column cdGroup02 DBType(varchar), Length(50,true) */
    val cdgroup02: Column[Option[String]] = column[Option[String]]("cdGroup02", O.Length(50,varying=true))
    /** Database column cdGroup03 DBType(varchar), Length(50,true) */
    val cdgroup03: Column[Option[String]] = column[Option[String]]("cdGroup03", O.Length(50,varying=true))
  }
  /** Collection-like TableQuery object for table Tblsysparameter */
  lazy val Tblsysparameter = new TableQuery(tag => new Tblsysparameter(tag))
  
  /** Entity class storing rows of table Tblsysparameterd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidsysparameter Database column uidSysParameter DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szfunctiondesc Database column szFunctionDesc DBType(nchar), Length(50,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblsysparameterdRow(uid: String, uidsysparameter: String, cdlanguage: String, szfunctiondesc: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblsysparameterdRow objects using plain SQL queries */
  implicit def GetResultTblsysparameterdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblsysparameterdRow] = GR{
    prs => import prs._
    TblsysparameterdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblSysParameterD. Objects of this class serve as prototypes for rows in queries. */
  class Tblsysparameterd(_tableTag: Tag) extends Table[TblsysparameterdRow](_tableTag, Some("dbo"), "tblSysParameterD") {
    def * = (uid, uidsysparameter, cdlanguage, szfunctiondesc, uidmodifier, dtmodify) <> (TblsysparameterdRow.tupled, TblsysparameterdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidsysparameter.?, cdlanguage.?, szfunctiondesc, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblsysparameterdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidSysParameter DBType(uniqueidentifier), Length(36,false) */
    val uidsysparameter: Column[String] = column[String]("uidSysParameter", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szFunctionDesc DBType(nchar), Length(50,false), Default(Some()) */
    val szfunctiondesc: Column[Option[String]] = column[Option[String]]("szFunctionDesc", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblsysparameterd (database name PK_tblSysParameterD) */
    val pk = primaryKey("PK_tblSysParameterD", (uidsysparameter, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblsysparameterd */
  lazy val Tblsysparameterd = new TableQuery(tag => new Tblsysparameterd(tag))
  
  /** Entity class storing rows of table Tblsysparameterdata
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidsysparameter Database column uidSysParameter DBType(uniqueidentifier), Length(36,false)
   *  @param szleading Database column szLeading DBType(char), Length(50,false)
   *  @param szkey Database column szKey DBType(char), Length(50,false)
   *  @param ilength Database column iLength DBType(int), Default(Some(0))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TblsysparameterdataRow(uid: String, uidsysparameter: String, szleading: String, szkey: String, ilength: Option[Int] = Some(0), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblsysparameterdataRow objects using plain SQL queries */
  implicit def GetResultTblsysparameterdataRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]]): GR[TblsysparameterdataRow] = GR{
    prs => import prs._
    TblsysparameterdataRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblSysParameterData. Objects of this class serve as prototypes for rows in queries. */
  class Tblsysparameterdata(_tableTag: Tag) extends Table[TblsysparameterdataRow](_tableTag, Some("dbo"), "tblSysParameterData") {
    def * = (uid, uidsysparameter, szleading, szkey, ilength, uidcreator, dtcreate) <> (TblsysparameterdataRow.tupled, TblsysparameterdataRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidsysparameter.?, szleading.?, szkey.?, ilength, uidcreator, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TblsysparameterdataRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidSysParameter DBType(uniqueidentifier), Length(36,false) */
    val uidsysparameter: Column[String] = column[String]("uidSysParameter", O.Length(36,varying=false))
    /** Database column szLeading DBType(char), Length(50,false) */
    val szleading: Column[String] = column[String]("szLeading", O.Length(50,varying=false))
    /** Database column szKey DBType(char), Length(50,false) */
    val szkey: Column[String] = column[String]("szKey", O.Length(50,varying=false))
    /** Database column iLength DBType(int), Default(Some(0)) */
    val ilength: Column[Option[Int]] = column[Option[Int]]("iLength", O.Default(Some(0)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    
    /** Primary key of Tblsysparameterdata (database name PK_tblSysParameterData) */
    val pk = primaryKey("PK_tblSysParameterData", (szleading, szkey))
  }
  /** Collection-like TableQuery object for table Tblsysparameterdata */
  lazy val Tblsysparameterdata = new TableQuery(tag => new Tblsysparameterdata(tag))
  
  /** Entity class storing rows of table Tblsysparameterdatad
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidsysparameterdata Database column uidSysParameterData DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szdesc Database column szDesc DBType(nchar), Length(128,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblsysparameterdatadRow(uid: String, uidsysparameterdata: String, cdlanguage: String, szdesc: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblsysparameterdatadRow objects using plain SQL queries */
  implicit def GetResultTblsysparameterdatadRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblsysparameterdatadRow] = GR{
    prs => import prs._
    TblsysparameterdatadRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblSysParameterDataD. Objects of this class serve as prototypes for rows in queries. */
  class Tblsysparameterdatad(_tableTag: Tag) extends Table[TblsysparameterdatadRow](_tableTag, Some("dbo"), "tblSysParameterDataD") {
    def * = (uid, uidsysparameterdata, cdlanguage, szdesc, uidmodifier, dtmodify) <> (TblsysparameterdatadRow.tupled, TblsysparameterdatadRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidsysparameterdata.?, cdlanguage.?, szdesc, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblsysparameterdatadRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidSysParameterData DBType(uniqueidentifier), Length(36,false) */
    val uidsysparameterdata: Column[String] = column[String]("uidSysParameterData", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szDesc DBType(nchar), Length(128,false), Default(Some()) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblsysparameterdatad (database name PK_tblSysParameterDataD) */
    val pk = primaryKey("PK_tblSysParameterDataD", (uidsysparameterdata, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblsysparameterdatad */
  lazy val Tblsysparameterdatad = new TableQuery(tag => new Tblsysparameterdatad(tag))
  
  /** Entity class storing rows of table Tblsystemsettings
   *  @param uid Database column UID DBType(uniqueidentifier), Length(36,false)
   *  @param szsection Database column szSection DBType(char), Length(35,false)
   *  @param szkey Database column szKey DBType(char), Length(25,false)
   *  @param szvalue Database column szValue DBType(nvarchar), Length(256,true)
   *  @param szdesc Database column szDesc DBType(nvarchar), Length(50,true)
   *  @param fserveronly Database column fServerOnly DBType(bit)
   *  @param fcache Database column fCache DBType(bit)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblsystemsettingsRow(uid: String, szsection: String, szkey: String, szvalue: String, szdesc: Option[String], fserveronly: Boolean, fcache: Boolean, uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblsystemsettingsRow objects using plain SQL queries */
  implicit def GetResultTblsystemsettingsRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Boolean], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TblsystemsettingsRow] = GR{
    prs => import prs._
    TblsystemsettingsRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<[Boolean], <<[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblSystemSettings. Objects of this class serve as prototypes for rows in queries. */
  class Tblsystemsettings(_tableTag: Tag) extends Table[TblsystemsettingsRow](_tableTag, Some("dbo"), "tblSystemSettings") {
    def * = (uid, szsection, szkey, szvalue, szdesc, fserveronly, fcache, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblsystemsettingsRow.tupled, TblsystemsettingsRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szsection.?, szkey.?, szvalue.?, szdesc, fserveronly.?, fcache.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblsystemsettingsRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6.get, _7.get, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column UID DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("UID", O.Length(36,varying=false))
    /** Database column szSection DBType(char), Length(35,false) */
    val szsection: Column[String] = column[String]("szSection", O.Length(35,varying=false))
    /** Database column szKey DBType(char), Length(25,false) */
    val szkey: Column[String] = column[String]("szKey", O.Length(25,varying=false))
    /** Database column szValue DBType(nvarchar), Length(256,true) */
    val szvalue: Column[String] = column[String]("szValue", O.Length(256,varying=true))
    /** Database column szDesc DBType(nvarchar), Length(50,true) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(50,varying=true))
    /** Database column fServerOnly DBType(bit) */
    val fserveronly: Column[Boolean] = column[Boolean]("fServerOnly")
    /** Database column fCache DBType(bit) */
    val fcache: Column[Boolean] = column[Boolean]("fCache")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblsystemsettings (database name PK_tblSystemSettings) */
    val pk = primaryKey("PK_tblSystemSettings", (szsection, szkey))
  }
  /** Collection-like TableQuery object for table Tblsystemsettings */
  lazy val Tblsystemsettings = new TableQuery(tag => new Tblsystemsettings(tag))
  
  /** Entity class storing rows of table Tbltabledesc
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdtype Database column cdType DBType(char), Length(50,false)
   *  @param cdmastertable Database column cdMasterTable DBType(char), Length(50,false), Default()
   *  @param cdfieldname Database column cdFieldName DBType(char), Length(50,false), Default()
   *  @param ifieldno Database column iFieldNo DBType(int), Default(Some(0))
   *  @param isdetailfield Database column isDetailField DBType(bit), Default(Some(false))
   *  @param szfieldtype Database column szFieldType DBType(char), Length(50,false), Default(Some(char))
   *  @param ifieldlength Database column iFieldLength DBType(int), Default(Some(0))
   *  @param iqueryindex Database column iQueryIndex DBType(int), Default(Some(0))
   *  @param idefaultshowindex Database column iDefaultShowIndex DBType(int), Default(Some(0))
   *  @param iqueryfieldcount Database column iQueryFieldCount DBType(int), Default(Some(2))
   *  @param szshowobject Database column szShowObject DBType(char), Length(20,false), Default(Some(TextBox))
   *  @param isreference Database column isReference DBType(bit), Default(Some(false))
   *  @param cdreftable Database column cdRefTable DBType(char), Length(50,false), Default(Some())
   *  @param cdrefkeyfield Database column cdRefKeyField DBType(char), Length(50,false), Default(Some())
   *  @param cdrefshowfield Database column cdRefShowField DBType(char), Length(50,false), Default(Some())
   *  @param isrefparameter Database column isRefParameter DBType(bit), Default(Some(false))
   *  @param cdrefparfield Database column cdRefParField DBType(char), Length(100,false), Default(Some())
   *  @param cdrefparameter Database column cdRefParameter DBType(char), Length(100,false), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TbltabledescRow(uid: String, cdtype: String, cdmastertable: String = "", cdfieldname: String = "", ifieldno: Option[Int] = Some(0), isdetailfield: Option[Boolean] = Some(false), szfieldtype: Option[String] = Some("char"), ifieldlength: Option[Int] = Some(0), iqueryindex: Option[Int] = Some(0), idefaultshowindex: Option[Int] = Some(0), iqueryfieldcount: Option[Int] = Some(2), szshowobject: Option[String] = Some("TextBox"), isreference: Option[Boolean] = Some(false), cdreftable: Option[String] = Some(""), cdrefkeyfield: Option[String] = Some(""), cdrefshowfield: Option[String] = Some(""), isrefparameter: Option[Boolean] = Some(false), cdrefparfield: Option[String] = Some(""), cdrefparameter: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbltabledescRow objects using plain SQL queries */
  implicit def GetResultTbltabledescRow(implicit e0: GR[String], e1: GR[Option[Int]], e2: GR[Option[Boolean]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]]): GR[TbltabledescRow] = GR{
    prs => import prs._
    TbltabledescRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[Int], <<?[Boolean], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[Int], <<?[String], <<?[Boolean], <<?[String], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblTableDesc. Objects of this class serve as prototypes for rows in queries. */
  class Tbltabledesc(_tableTag: Tag) extends Table[TbltabledescRow](_tableTag, Some("dbo"), "tblTableDesc") {
    def * = (uid, cdtype, cdmastertable, cdfieldname, ifieldno, isdetailfield, szfieldtype, ifieldlength, iqueryindex, idefaultshowindex, iqueryfieldcount, szshowobject, isreference, cdreftable, cdrefkeyfield, cdrefshowfield, isrefparameter, cdrefparfield, cdrefparameter, uidcreator, dtcreate) <> (TbltabledescRow.tupled, TbltabledescRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdtype.?, cdmastertable.?, cdfieldname.?, ifieldno, isdetailfield, szfieldtype, ifieldlength, iqueryindex, idefaultshowindex, iqueryfieldcount, szshowobject, isreference, cdreftable, cdrefkeyfield, cdrefshowfield, isrefparameter, cdrefparfield, cdrefparameter, uidcreator, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TbltabledescRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdType DBType(char), Length(50,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(50,varying=false))
    /** Database column cdMasterTable DBType(char), Length(50,false), Default() */
    val cdmastertable: Column[String] = column[String]("cdMasterTable", O.Length(50,varying=false), O.Default(""))
    /** Database column cdFieldName DBType(char), Length(50,false), Default() */
    val cdfieldname: Column[String] = column[String]("cdFieldName", O.Length(50,varying=false), O.Default(""))
    /** Database column iFieldNo DBType(int), Default(Some(0)) */
    val ifieldno: Column[Option[Int]] = column[Option[Int]]("iFieldNo", O.Default(Some(0)))
    /** Database column isDetailField DBType(bit), Default(Some(false)) */
    val isdetailfield: Column[Option[Boolean]] = column[Option[Boolean]]("isDetailField", O.Default(Some(false)))
    /** Database column szFieldType DBType(char), Length(50,false), Default(Some(char)) */
    val szfieldtype: Column[Option[String]] = column[Option[String]]("szFieldType", O.Length(50,varying=false), O.Default(Some("char")))
    /** Database column iFieldLength DBType(int), Default(Some(0)) */
    val ifieldlength: Column[Option[Int]] = column[Option[Int]]("iFieldLength", O.Default(Some(0)))
    /** Database column iQueryIndex DBType(int), Default(Some(0)) */
    val iqueryindex: Column[Option[Int]] = column[Option[Int]]("iQueryIndex", O.Default(Some(0)))
    /** Database column iDefaultShowIndex DBType(int), Default(Some(0)) */
    val idefaultshowindex: Column[Option[Int]] = column[Option[Int]]("iDefaultShowIndex", O.Default(Some(0)))
    /** Database column iQueryFieldCount DBType(int), Default(Some(2)) */
    val iqueryfieldcount: Column[Option[Int]] = column[Option[Int]]("iQueryFieldCount", O.Default(Some(2)))
    /** Database column szShowObject DBType(char), Length(20,false), Default(Some(TextBox)) */
    val szshowobject: Column[Option[String]] = column[Option[String]]("szShowObject", O.Length(20,varying=false), O.Default(Some("TextBox")))
    /** Database column isReference DBType(bit), Default(Some(false)) */
    val isreference: Column[Option[Boolean]] = column[Option[Boolean]]("isReference", O.Default(Some(false)))
    /** Database column cdRefTable DBType(char), Length(50,false), Default(Some()) */
    val cdreftable: Column[Option[String]] = column[Option[String]]("cdRefTable", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column cdRefKeyField DBType(char), Length(50,false), Default(Some()) */
    val cdrefkeyfield: Column[Option[String]] = column[Option[String]]("cdRefKeyField", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column cdRefShowField DBType(char), Length(50,false), Default(Some()) */
    val cdrefshowfield: Column[Option[String]] = column[Option[String]]("cdRefShowField", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column isRefParameter DBType(bit), Default(Some(false)) */
    val isrefparameter: Column[Option[Boolean]] = column[Option[Boolean]]("isRefParameter", O.Default(Some(false)))
    /** Database column cdRefParField DBType(char), Length(100,false), Default(Some()) */
    val cdrefparfield: Column[Option[String]] = column[Option[String]]("cdRefParField", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column cdRefParameter DBType(char), Length(100,false), Default(Some()) */
    val cdrefparameter: Column[Option[String]] = column[Option[String]]("cdRefParameter", O.Length(100,varying=false), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    
    /** Primary key of Tbltabledesc (database name PK_tblTableDesc) */
    val pk = primaryKey("PK_tblTableDesc", (cdtype, cdmastertable, cdfieldname))
    
    /** Index over (uid) (database name IX_tblTableDesc) */
    val index1 = index("IX_tblTableDesc", uid)
    /** Index over (cdmastertable,ifieldno) (database name IX_tblTableDesc_1) */
    val index2 = index("IX_tblTableDesc_1", (cdmastertable, ifieldno))
    /** Index over (cdmastertable,idefaultshowindex) (database name IX_tblTableDesc_2) */
    val index3 = index("IX_tblTableDesc_2", (cdmastertable, idefaultshowindex))
  }
  /** Collection-like TableQuery object for table Tbltabledesc */
  lazy val Tbltabledesc = new TableQuery(tag => new Tbltabledesc(tag))
  
  /** Entity class storing rows of table Tbltabledescd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidtabledesc Database column uidTableDesc DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param szfielddesc Database column szFieldDesc DBType(nvarchar), Length(100,true), Default(Some())
   *  @param ishowlength1 Database column iShowLength1 DBType(int), Default(Some(50))
   *  @param ishowlength2 Database column iShowLength2 DBType(int), Default(Some(100))
   *  @param ishowlength3 Database column iShowLength3 DBType(int), Default(Some(150))
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbltabledescdRow(uid: String, uidtabledesc: String, cdlanguage: String = "zh-CHT", szfielddesc: Option[String] = Some(""), ishowlength1: Option[Int] = Some(50), ishowlength2: Option[Int] = Some(100), ishowlength3: Option[Int] = Some(150), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: java.sql.Timestamp)
  /** GetResult implicit for fetching TbltabledescdRow objects using plain SQL queries */
  implicit def GetResultTbltabledescdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[java.sql.Timestamp]): GR[TbltabledescdRow] = GR{
    prs => import prs._
    TbltabledescdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[Int], <<?[Int], <<?[Int], <<?[String], <<[java.sql.Timestamp]))
  }
  /** Table description of table tblTableDescD. Objects of this class serve as prototypes for rows in queries. */
  class Tbltabledescd(_tableTag: Tag) extends Table[TbltabledescdRow](_tableTag, Some("dbo"), "tblTableDescD") {
    def * = (uid, uidtabledesc, cdlanguage, szfielddesc, ishowlength1, ishowlength2, ishowlength3, uidmodifier, dtmodify) <> (TbltabledescdRow.tupled, TbltabledescdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidtabledesc.?, cdlanguage.?, szfielddesc, ishowlength1, ishowlength2, ishowlength3, uidmodifier, dtmodify.?).shaped.<>({r=>import r._; _1.map(_=> TbltabledescdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidTableDesc DBType(uniqueidentifier), Length(36,false) */
    val uidtabledesc: Column[String] = column[String]("uidTableDesc", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column szFieldDesc DBType(nvarchar), Length(100,true), Default(Some()) */
    val szfielddesc: Column[Option[String]] = column[Option[String]]("szFieldDesc", O.Length(100,varying=true), O.Default(Some("")))
    /** Database column iShowLength1 DBType(int), Default(Some(50)) */
    val ishowlength1: Column[Option[Int]] = column[Option[Int]]("iShowLength1", O.Default(Some(50)))
    /** Database column iShowLength2 DBType(int), Default(Some(100)) */
    val ishowlength2: Column[Option[Int]] = column[Option[Int]]("iShowLength2", O.Default(Some(100)))
    /** Database column iShowLength3 DBType(int), Default(Some(150)) */
    val ishowlength3: Column[Option[Int]] = column[Option[Int]]("iShowLength3", O.Default(Some(150)))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtModify")
    
    /** Primary key of Tbltabledescd (database name PK_tblTableDescD) */
    val pk = primaryKey("PK_tblTableDescD", (uidtabledesc, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tbltabledescd */
  lazy val Tbltabledescd = new TableQuery(tag => new Tbltabledescd(tag))
  
  /** Entity class storing rows of table Tbltablename
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdtype Database column cdType DBType(char), Length(50,false)
   *  @param cdmastertable Database column cdMasterTable DBType(char), Length(50,false)
   *  @param cdkeyfield Database column cdKeyField DBType(char), Length(50,false), Default(Some())
   *  @param cdconnectkey Database column cdConnectKey DBType(char), Length(50,false), Default(Some())
   *  @param cddetailtable Database column cdDetailTable DBType(char), Length(50,false), Default(Some())
   *  @param cddetailconnectkey Database column cdDetailConnectKey DBType(char), Length(50,false), Default(Some())
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime) */
  case class TbltablenameRow(uid: String, cdtype: String, cdmastertable: String, cdkeyfield: Option[String] = Some(""), cdconnectkey: Option[String] = Some(""), cddetailtable: Option[String] = Some(""), cddetailconnectkey: Option[String] = Some(""), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbltablenameRow objects using plain SQL queries */
  implicit def GetResultTbltablenameRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TbltablenameRow] = GR{
    prs => import prs._
    TbltablenameRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblTableName. Objects of this class serve as prototypes for rows in queries. */
  class Tbltablename(_tableTag: Tag) extends Table[TbltablenameRow](_tableTag, Some("dbo"), "tblTableName") {
    def * = (uid, cdtype, cdmastertable, cdkeyfield, cdconnectkey, cddetailtable, cddetailconnectkey, uidcreator, dtcreate) <> (TbltablenameRow.tupled, TbltablenameRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdtype.?, cdmastertable.?, cdkeyfield, cdconnectkey, cddetailtable, cddetailconnectkey, uidcreator, dtcreate).shaped.<>({r=>import r._; _1.map(_=> TbltablenameRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdType DBType(char), Length(50,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(50,varying=false))
    /** Database column cdMasterTable DBType(char), Length(50,false) */
    val cdmastertable: Column[String] = column[String]("cdMasterTable", O.Length(50,varying=false))
    /** Database column cdKeyField DBType(char), Length(50,false), Default(Some()) */
    val cdkeyfield: Column[Option[String]] = column[Option[String]]("cdKeyField", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column cdConnectKey DBType(char), Length(50,false), Default(Some()) */
    val cdconnectkey: Column[Option[String]] = column[Option[String]]("cdConnectKey", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column cdDetailTable DBType(char), Length(50,false), Default(Some()) */
    val cddetailtable: Column[Option[String]] = column[Option[String]]("cdDetailTable", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column cdDetailConnectKey DBType(char), Length(50,false), Default(Some()) */
    val cddetailconnectkey: Column[Option[String]] = column[Option[String]]("cdDetailConnectKey", O.Length(50,varying=false), O.Default(Some("")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    
    /** Primary key of Tbltablename (database name PK_tblTableName) */
    val pk = primaryKey("PK_tblTableName", (cdtype, cdmastertable))
    
    /** Index over (uid) (database name IX_tblTableName) */
    val index1 = index("IX_tblTableName", uid)
  }
  /** Collection-like TableQuery object for table Tbltablename */
  lazy val Tbltablename = new TableQuery(tag => new Tbltablename(tag))
  
  /** Entity class storing rows of table Tbltablenamed
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidtablename Database column uidTableName DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param sztablename Database column szTableName DBType(nchar), Length(60,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbltablenamedRow(uid: String, uidtablename: String, cdlanguage: String = "zh-CHT", sztablename: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbltablenamedRow objects using plain SQL queries */
  implicit def GetResultTbltablenamedRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TbltablenamedRow] = GR{
    prs => import prs._
    TbltablenamedRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblTableNameD. Objects of this class serve as prototypes for rows in queries. */
  class Tbltablenamed(_tableTag: Tag) extends Table[TbltablenamedRow](_tableTag, Some("dbo"), "tblTableNameD") {
    def * = (uid, uidtablename, cdlanguage, sztablename, uidmodifier, dtmodify) <> (TbltablenamedRow.tupled, TbltablenamedRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidtablename.?, cdlanguage.?, sztablename, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TbltablenamedRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidTableName DBType(uniqueidentifier), Length(36,false) */
    val uidtablename: Column[String] = column[String]("uidTableName", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column szTableName DBType(nchar), Length(60,false), Default(Some()) */
    val sztablename: Column[Option[String]] = column[Option[String]]("szTableName", O.Length(60,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tbltablenamed (database name PK_tblTableNameD) */
    val pk = primaryKey("PK_tblTableNameD", (uidtablename, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tbltablenamed */
  lazy val Tbltablenamed = new TableQuery(tag => new Tbltablenamed(tag))
  
  /** Entity class storing rows of table Tbltarget
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidcourse Database column uidCourse DBType(uniqueidentifier), Length(36,false)
   *  @param iseq Database column iSeq DBType(smallint), Default(0)
   *  @param cdstatus Database column cdStatus DBType(char), Length(1,false)
   *  @param cdgrade Database column cdGrade DBType(char), Length(2,false), Default()
   *  @param isabove Database column isAbove DBType(bit), Default(Some(true))
   *  @param isorstation Database column isOrStation DBType(bit), Default(Some(false))
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbltargetRow(uid: String, uidcourse: String, iseq: Short = 0, cdstatus: String, cdgrade: String = "", isabove: Option[Boolean] = Some(true), isorstation: Option[Boolean] = Some(false), uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbltargetRow objects using plain SQL queries */
  implicit def GetResultTbltargetRow(implicit e0: GR[String], e1: GR[Short], e2: GR[Option[Boolean]], e3: GR[Option[String]], e4: GR[Option[java.sql.Timestamp]]): GR[TbltargetRow] = GR{
    prs => import prs._
    TbltargetRow.tupled((<<[String], <<[String], <<[Short], <<[String], <<[String], <<?[Boolean], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblTarget. Objects of this class serve as prototypes for rows in queries. */
  class Tbltarget(_tableTag: Tag) extends Table[TbltargetRow](_tableTag, Some("dbo"), "tblTarget") {
    def * = (uid, uidcourse, iseq, cdstatus, cdgrade, isabove, isorstation, uidmodifier, dtmodify) <> (TbltargetRow.tupled, TbltargetRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidcourse.?, iseq.?, cdstatus.?, cdgrade.?, isabove, isorstation, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TbltargetRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidCourse DBType(uniqueidentifier), Length(36,false) */
    val uidcourse: Column[String] = column[String]("uidCourse", O.Length(36,varying=false))
    /** Database column iSeq DBType(smallint), Default(0) */
    val iseq: Column[Short] = column[Short]("iSeq", O.Default(0))
    /** Database column cdStatus DBType(char), Length(1,false) */
    val cdstatus: Column[String] = column[String]("cdStatus", O.Length(1,varying=false))
    /** Database column cdGrade DBType(char), Length(2,false), Default() */
    val cdgrade: Column[String] = column[String]("cdGrade", O.Length(2,varying=false), O.Default(""))
    /** Database column isAbove DBType(bit), Default(Some(true)) */
    val isabove: Column[Option[Boolean]] = column[Option[Boolean]]("isAbove", O.Default(Some(true)))
    /** Database column isOrStation DBType(bit), Default(Some(false)) */
    val isorstation: Column[Option[Boolean]] = column[Option[Boolean]]("isOrStation", O.Default(Some(false)))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tbltarget (database name PK_tblTarget) */
    val pk = primaryKey("PK_tblTarget", (uidcourse, iseq, cdstatus, cdgrade))
  }
  /** Collection-like TableQuery object for table Tbltarget */
  lazy val Tbltarget = new TableQuery(tag => new Tbltarget(tag))
  
  /** Entity class storing rows of table Tbltax01
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param szitem01 Database column szItem01 DBType(char), Length(20,false)
   *  @param szitem02 Database column szItem02 DBType(datetime)
   *  @param szitem03 Database column szItem03 DBType(nchar), Length(128,false)
   *  @param szitem04 Database column szItem04 DBType(nchar), Length(128,false)
   *  @param szitem05 Database column szItem05 DBType(char), Length(128,false)
   *  @param szitem06 Database column szItem06 DBType(nchar), Length(128,false)
   *  @param szitem07 Database column szItem07 DBType(char), Length(20,false)
   *  @param szitem08 Database column szItem08 DBType(char), Length(20,false)
   *  @param szitem09 Database column szItem09 DBType(char), Length(20,false)
   *  @param szitem10 Database column szItem10 DBType(char), Length(20,false)
   *  @param szitem11 Database column szItem11 DBType(int)
   *  @param szitem12 Database column szItem12 DBType(char), Length(20,false)
   *  @param szitem13 Database column szItem13 DBType(nchar), Length(128,false)
   *  @param szitem14 Database column szItem14 DBType(int)
   *  @param szitem15 Database column szItem15 DBType(float)
   *  @param szitem16 Database column szItem16 DBType(float)
   *  @param szitem17 Database column szItem17 DBType(float)
   *  @param szitem18 Database column szItem18 DBType(int)
   *  @param szitem19 Database column szItem19 DBType(int)
   *  @param szitem20 Database column szItem20 DBType(int) */
  case class Tbltax01Row(uid: String, szitem01: Option[String], szitem02: Option[java.sql.Timestamp], szitem03: Option[String], szitem04: Option[String], szitem05: Option[String], szitem06: Option[String], szitem07: Option[String], szitem08: Option[String], szitem09: Option[String], szitem10: Option[String], szitem11: Option[Int], szitem12: Option[String], szitem13: Option[String], szitem14: Option[Int], szitem15: Option[Double], szitem16: Option[Double], szitem17: Option[Double], szitem18: Option[Int], szitem19: Option[Int], szitem20: Option[Int])
  /** GetResult implicit for fetching Tbltax01Row objects using plain SQL queries */
  implicit def GetResultTbltax01Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Int]], e4: GR[Option[Double]]): GR[Tbltax01Row] = GR{
    prs => import prs._
    Tbltax01Row.tupled((<<[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Int], <<?[String], <<?[String], <<?[Int], <<?[Double], <<?[Double], <<?[Double], <<?[Int], <<?[Int], <<?[Int]))
  }
  /** Table description of table tblTAX01. Objects of this class serve as prototypes for rows in queries. */
  class Tbltax01(_tableTag: Tag) extends Table[Tbltax01Row](_tableTag, Some("dbo"), "tblTAX01") {
    def * = (uid, szitem01, szitem02, szitem03, szitem04, szitem05, szitem06, szitem07, szitem08, szitem09, szitem10, szitem11, szitem12, szitem13, szitem14, szitem15, szitem16, szitem17, szitem18, szitem19, szitem20) <> (Tbltax01Row.tupled, Tbltax01Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, szitem01, szitem02, szitem03, szitem04, szitem05, szitem06, szitem07, szitem08, szitem09, szitem10, szitem11, szitem12, szitem13, szitem14, szitem15, szitem16, szitem17, szitem18, szitem19, szitem20).shaped.<>({r=>import r._; _1.map(_=> Tbltax01Row.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szItem01 DBType(char), Length(20,false) */
    val szitem01: Column[Option[String]] = column[Option[String]]("szItem01", O.Length(20,varying=false))
    /** Database column szItem02 DBType(datetime) */
    val szitem02: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("szItem02")
    /** Database column szItem03 DBType(nchar), Length(128,false) */
    val szitem03: Column[Option[String]] = column[Option[String]]("szItem03", O.Length(128,varying=false))
    /** Database column szItem04 DBType(nchar), Length(128,false) */
    val szitem04: Column[Option[String]] = column[Option[String]]("szItem04", O.Length(128,varying=false))
    /** Database column szItem05 DBType(char), Length(128,false) */
    val szitem05: Column[Option[String]] = column[Option[String]]("szItem05", O.Length(128,varying=false))
    /** Database column szItem06 DBType(nchar), Length(128,false) */
    val szitem06: Column[Option[String]] = column[Option[String]]("szItem06", O.Length(128,varying=false))
    /** Database column szItem07 DBType(char), Length(20,false) */
    val szitem07: Column[Option[String]] = column[Option[String]]("szItem07", O.Length(20,varying=false))
    /** Database column szItem08 DBType(char), Length(20,false) */
    val szitem08: Column[Option[String]] = column[Option[String]]("szItem08", O.Length(20,varying=false))
    /** Database column szItem09 DBType(char), Length(20,false) */
    val szitem09: Column[Option[String]] = column[Option[String]]("szItem09", O.Length(20,varying=false))
    /** Database column szItem10 DBType(char), Length(20,false) */
    val szitem10: Column[Option[String]] = column[Option[String]]("szItem10", O.Length(20,varying=false))
    /** Database column szItem11 DBType(int) */
    val szitem11: Column[Option[Int]] = column[Option[Int]]("szItem11")
    /** Database column szItem12 DBType(char), Length(20,false) */
    val szitem12: Column[Option[String]] = column[Option[String]]("szItem12", O.Length(20,varying=false))
    /** Database column szItem13 DBType(nchar), Length(128,false) */
    val szitem13: Column[Option[String]] = column[Option[String]]("szItem13", O.Length(128,varying=false))
    /** Database column szItem14 DBType(int) */
    val szitem14: Column[Option[Int]] = column[Option[Int]]("szItem14")
    /** Database column szItem15 DBType(float) */
    val szitem15: Column[Option[Double]] = column[Option[Double]]("szItem15")
    /** Database column szItem16 DBType(float) */
    val szitem16: Column[Option[Double]] = column[Option[Double]]("szItem16")
    /** Database column szItem17 DBType(float) */
    val szitem17: Column[Option[Double]] = column[Option[Double]]("szItem17")
    /** Database column szItem18 DBType(int) */
    val szitem18: Column[Option[Int]] = column[Option[Int]]("szItem18")
    /** Database column szItem19 DBType(int) */
    val szitem19: Column[Option[Int]] = column[Option[Int]]("szItem19")
    /** Database column szItem20 DBType(int) */
    val szitem20: Column[Option[Int]] = column[Option[Int]]("szItem20")
  }
  /** Collection-like TableQuery object for table Tbltax01 */
  lazy val Tbltax01 = new TableQuery(tag => new Tbltax01(tag))
  
  /** Row type of table Tbltax02 */
  type Tbltax02Row = HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[Double],HCons[Option[Double],HCons[Option[Long],HCons[Option[Long],HCons[Option[Double],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbltax02Row providing default values if available in the database schema. */
  def Tbltax02Row(uid: String, szitem01: Option[java.sql.Timestamp], szitem02: Option[String], szitem03: Option[String], szitem04: Option[String], szitem05: Option[String], szitem06: Option[String], szitem07: Option[String], szitem08: Option[String], szitem09: Option[String], szitem10: Option[String], szitem11: Option[String], szitem12: Option[String], szitem13: Option[Int], szitem14: Option[String], szitem15: Option[String], szitem16: Option[Int], szitem17: Option[String], szitem18: Option[Double], szitem19: Option[Double], szitem20: Option[Long], szitem21: Option[Long], szitem22: Option[Double], szitem23: Option[Int], szitem24: Option[Int], szitem25: Option[Int], szitem26: Option[String], szitem27: Option[Double], szitem28: Option[String], szitem29: Option[String], szitem30: Option[String], szitem31: Option[String], szitem32: Option[String], szitem33: Option[String]): Tbltax02Row = {
    uid :: szitem01 :: szitem02 :: szitem03 :: szitem04 :: szitem05 :: szitem06 :: szitem07 :: szitem08 :: szitem09 :: szitem10 :: szitem11 :: szitem12 :: szitem13 :: szitem14 :: szitem15 :: szitem16 :: szitem17 :: szitem18 :: szitem19 :: szitem20 :: szitem21 :: szitem22 :: szitem23 :: szitem24 :: szitem25 :: szitem26 :: szitem27 :: szitem28 :: szitem29 :: szitem30 :: szitem31 :: szitem32 :: szitem33 :: HNil
  }
  /** GetResult implicit for fetching Tbltax02Row objects using plain SQL queries */
  implicit def GetResultTbltax02Row(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]], e3: GR[Option[Int]], e4: GR[Option[Double]], e5: GR[Option[Long]]): GR[Tbltax02Row] = GR{
    prs => import prs._
    <<[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[Double] :: <<?[Double] :: <<?[Long] :: <<?[Long] :: <<?[Double] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblTAX02. Objects of this class serve as prototypes for rows in queries. */
  class Tbltax02(_tableTag: Tag) extends Table[Tbltax02Row](_tableTag, Some("dbo"), "tblTAX02") {
    def * = uid :: szitem01 :: szitem02 :: szitem03 :: szitem04 :: szitem05 :: szitem06 :: szitem07 :: szitem08 :: szitem09 :: szitem10 :: szitem11 :: szitem12 :: szitem13 :: szitem14 :: szitem15 :: szitem16 :: szitem17 :: szitem18 :: szitem19 :: szitem20 :: szitem21 :: szitem22 :: szitem23 :: szitem24 :: szitem25 :: szitem26 :: szitem27 :: szitem28 :: szitem29 :: szitem30 :: szitem31 :: szitem32 :: szitem33 :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szItem01 DBType(datetime) */
    val szitem01: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("szItem01")
    /** Database column szItem02 DBType(char), Length(128,false) */
    val szitem02: Column[Option[String]] = column[Option[String]]("szItem02", O.Length(128,varying=false))
    /** Database column szItem03 DBType(nchar), Length(128,false) */
    val szitem03: Column[Option[String]] = column[Option[String]]("szItem03", O.Length(128,varying=false))
    /** Database column szItem04 DBType(nchar), Length(128,false) */
    val szitem04: Column[Option[String]] = column[Option[String]]("szItem04", O.Length(128,varying=false))
    /** Database column szItem05 DBType(char), Length(128,false) */
    val szitem05: Column[Option[String]] = column[Option[String]]("szItem05", O.Length(128,varying=false))
    /** Database column szItem06 DBType(char), Length(128,false) */
    val szitem06: Column[Option[String]] = column[Option[String]]("szItem06", O.Length(128,varying=false))
    /** Database column szItem07 DBType(char), Length(128,false) */
    val szitem07: Column[Option[String]] = column[Option[String]]("szItem07", O.Length(128,varying=false))
    /** Database column szItem08 DBType(char), Length(128,false) */
    val szitem08: Column[Option[String]] = column[Option[String]]("szItem08", O.Length(128,varying=false))
    /** Database column szItem09 DBType(char), Length(128,false) */
    val szitem09: Column[Option[String]] = column[Option[String]]("szItem09", O.Length(128,varying=false))
    /** Database column szItem10 DBType(char), Length(128,false) */
    val szitem10: Column[Option[String]] = column[Option[String]]("szItem10", O.Length(128,varying=false))
    /** Database column szItem11 DBType(char), Length(128,false) */
    val szitem11: Column[Option[String]] = column[Option[String]]("szItem11", O.Length(128,varying=false))
    /** Database column szItem12 DBType(char), Length(128,false) */
    val szitem12: Column[Option[String]] = column[Option[String]]("szItem12", O.Length(128,varying=false))
    /** Database column szItem13 DBType(int) */
    val szitem13: Column[Option[Int]] = column[Option[Int]]("szItem13")
    /** Database column szItem14 DBType(char), Length(128,false) */
    val szitem14: Column[Option[String]] = column[Option[String]]("szItem14", O.Length(128,varying=false))
    /** Database column szItem15 DBType(nchar), Length(128,false) */
    val szitem15: Column[Option[String]] = column[Option[String]]("szItem15", O.Length(128,varying=false))
    /** Database column szItem16 DBType(int) */
    val szitem16: Column[Option[Int]] = column[Option[Int]]("szItem16")
    /** Database column szItem17 DBType(char), Length(20,false) */
    val szitem17: Column[Option[String]] = column[Option[String]]("szItem17", O.Length(20,varying=false))
    /** Database column szItem18 DBType(float) */
    val szitem18: Column[Option[Double]] = column[Option[Double]]("szItem18")
    /** Database column szItem19 DBType(float) */
    val szitem19: Column[Option[Double]] = column[Option[Double]]("szItem19")
    /** Database column szItem20 DBType(bigint) */
    val szitem20: Column[Option[Long]] = column[Option[Long]]("szItem20")
    /** Database column szItem21 DBType(bigint) */
    val szitem21: Column[Option[Long]] = column[Option[Long]]("szItem21")
    /** Database column szItem22 DBType(float) */
    val szitem22: Column[Option[Double]] = column[Option[Double]]("szItem22")
    /** Database column szItem23 DBType(int) */
    val szitem23: Column[Option[Int]] = column[Option[Int]]("szItem23")
    /** Database column szItem24 DBType(int) */
    val szitem24: Column[Option[Int]] = column[Option[Int]]("szItem24")
    /** Database column szItem25 DBType(int) */
    val szitem25: Column[Option[Int]] = column[Option[Int]]("szItem25")
    /** Database column szItem26 DBType(char), Length(128,false) */
    val szitem26: Column[Option[String]] = column[Option[String]]("szItem26", O.Length(128,varying=false))
    /** Database column szItem27 DBType(float) */
    val szitem27: Column[Option[Double]] = column[Option[Double]]("szItem27")
    /** Database column szItem28 DBType(nchar), Length(128,false) */
    val szitem28: Column[Option[String]] = column[Option[String]]("szItem28", O.Length(128,varying=false))
    /** Database column szItem29 DBType(char), Length(128,false) */
    val szitem29: Column[Option[String]] = column[Option[String]]("szItem29", O.Length(128,varying=false))
    /** Database column szItem30 DBType(char), Length(128,false) */
    val szitem30: Column[Option[String]] = column[Option[String]]("szItem30", O.Length(128,varying=false))
    /** Database column szItem31 DBType(char), Length(128,false) */
    val szitem31: Column[Option[String]] = column[Option[String]]("szItem31", O.Length(128,varying=false))
    /** Database column szItem32 DBType(nchar), Length(128,false) */
    val szitem32: Column[Option[String]] = column[Option[String]]("szItem32", O.Length(128,varying=false))
    /** Database column szItem33 DBType(char), Length(128,false) */
    val szitem33: Column[Option[String]] = column[Option[String]]("szItem33", O.Length(128,varying=false))
  }
  /** Collection-like TableQuery object for table Tbltax02 */
  lazy val Tbltax02 = new TableQuery(tag => new Tbltax02(tag))
  
  /** Row type of table Tbltax03 */
  type Tbltax03Row = HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tbltax03Row providing default values if available in the database schema. */
  def Tbltax03Row(uid: String, szitem01: Option[String], szitem02: Option[String], szitem03: Option[String], szitem04: Option[String], szitem05: Option[String], szitem06: Option[String], szitem07: Option[String], szitem08: Option[String], szitem09: Option[String], szitem10: Option[String], szitem11: Option[String], szitem12: Option[String], szitem13: Option[String], szitem14: Option[String], szitem15: Option[String], szitem16: Option[String], szitem17: Option[String], szitem18: Option[String], szitem19: Option[String], szitem20: Option[String], szitem21: Option[String], szitem22: Option[String], szitem23: Option[String], szitem24: Option[String], szitem25: Option[String], szitem26: Option[String], szitem27: Option[String]): Tbltax03Row = {
    uid :: szitem01 :: szitem02 :: szitem03 :: szitem04 :: szitem05 :: szitem06 :: szitem07 :: szitem08 :: szitem09 :: szitem10 :: szitem11 :: szitem12 :: szitem13 :: szitem14 :: szitem15 :: szitem16 :: szitem17 :: szitem18 :: szitem19 :: szitem20 :: szitem21 :: szitem22 :: szitem23 :: szitem24 :: szitem25 :: szitem26 :: szitem27 :: HNil
  }
  /** GetResult implicit for fetching Tbltax03Row objects using plain SQL queries */
  implicit def GetResultTbltax03Row(implicit e0: GR[String], e1: GR[Option[String]]): GR[Tbltax03Row] = GR{
    prs => import prs._
    <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblTAX03. Objects of this class serve as prototypes for rows in queries. */
  class Tbltax03(_tableTag: Tag) extends Table[Tbltax03Row](_tableTag, Some("dbo"), "tblTAX03") {
    def * = uid :: szitem01 :: szitem02 :: szitem03 :: szitem04 :: szitem05 :: szitem06 :: szitem07 :: szitem08 :: szitem09 :: szitem10 :: szitem11 :: szitem12 :: szitem13 :: szitem14 :: szitem15 :: szitem16 :: szitem17 :: szitem18 :: szitem19 :: szitem20 :: szitem21 :: szitem22 :: szitem23 :: szitem24 :: szitem25 :: szitem26 :: szitem27 :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column szItem01 DBType(char), Length(128,false) */
    val szitem01: Column[Option[String]] = column[Option[String]]("szItem01", O.Length(128,varying=false))
    /** Database column szItem02 DBType(char), Length(128,false) */
    val szitem02: Column[Option[String]] = column[Option[String]]("szItem02", O.Length(128,varying=false))
    /** Database column szItem03 DBType(char), Length(128,false) */
    val szitem03: Column[Option[String]] = column[Option[String]]("szItem03", O.Length(128,varying=false))
    /** Database column szItem04 DBType(char), Length(128,false) */
    val szitem04: Column[Option[String]] = column[Option[String]]("szItem04", O.Length(128,varying=false))
    /** Database column szItem05 DBType(nchar), Length(128,false) */
    val szitem05: Column[Option[String]] = column[Option[String]]("szItem05", O.Length(128,varying=false))
    /** Database column szItem06 DBType(char), Length(128,false) */
    val szitem06: Column[Option[String]] = column[Option[String]]("szItem06", O.Length(128,varying=false))
    /** Database column szItem07 DBType(char), Length(128,false) */
    val szitem07: Column[Option[String]] = column[Option[String]]("szItem07", O.Length(128,varying=false))
    /** Database column szItem08 DBType(nchar), Length(128,false) */
    val szitem08: Column[Option[String]] = column[Option[String]]("szItem08", O.Length(128,varying=false))
    /** Database column szItem09 DBType(nchar), Length(128,false) */
    val szitem09: Column[Option[String]] = column[Option[String]]("szItem09", O.Length(128,varying=false))
    /** Database column szItem10 DBType(char), Length(128,false) */
    val szitem10: Column[Option[String]] = column[Option[String]]("szItem10", O.Length(128,varying=false))
    /** Database column szItem11 DBType(nchar), Length(128,false) */
    val szitem11: Column[Option[String]] = column[Option[String]]("szItem11", O.Length(128,varying=false))
    /** Database column szItem12 DBType(char), Length(128,false) */
    val szitem12: Column[Option[String]] = column[Option[String]]("szItem12", O.Length(128,varying=false))
    /** Database column szItem13 DBType(nchar), Length(128,false) */
    val szitem13: Column[Option[String]] = column[Option[String]]("szItem13", O.Length(128,varying=false))
    /** Database column szItem14 DBType(nchar), Length(128,false) */
    val szitem14: Column[Option[String]] = column[Option[String]]("szItem14", O.Length(128,varying=false))
    /** Database column szItem15 DBType(char), Length(128,false) */
    val szitem15: Column[Option[String]] = column[Option[String]]("szItem15", O.Length(128,varying=false))
    /** Database column szItem16 DBType(nchar), Length(128,false) */
    val szitem16: Column[Option[String]] = column[Option[String]]("szItem16", O.Length(128,varying=false))
    /** Database column szItem17 DBType(char), Length(128,false) */
    val szitem17: Column[Option[String]] = column[Option[String]]("szItem17", O.Length(128,varying=false))
    /** Database column szItem18 DBType(char), Length(128,false) */
    val szitem18: Column[Option[String]] = column[Option[String]]("szItem18", O.Length(128,varying=false))
    /** Database column szItem19 DBType(char), Length(128,false) */
    val szitem19: Column[Option[String]] = column[Option[String]]("szItem19", O.Length(128,varying=false))
    /** Database column szItem20 DBType(char), Length(128,false) */
    val szitem20: Column[Option[String]] = column[Option[String]]("szItem20", O.Length(128,varying=false))
    /** Database column szItem21 DBType(char), Length(128,false) */
    val szitem21: Column[Option[String]] = column[Option[String]]("szItem21", O.Length(128,varying=false))
    /** Database column szItem22 DBType(char), Length(128,false) */
    val szitem22: Column[Option[String]] = column[Option[String]]("szItem22", O.Length(128,varying=false))
    /** Database column szItem23 DBType(char), Length(128,false) */
    val szitem23: Column[Option[String]] = column[Option[String]]("szItem23", O.Length(128,varying=false))
    /** Database column szItem24 DBType(char), Length(128,false) */
    val szitem24: Column[Option[String]] = column[Option[String]]("szItem24", O.Length(128,varying=false))
    /** Database column szItem25 DBType(char), Length(128,false) */
    val szitem25: Column[Option[String]] = column[Option[String]]("szItem25", O.Length(128,varying=false))
    /** Database column szItem26 DBType(char), Length(128,false) */
    val szitem26: Column[Option[String]] = column[Option[String]]("szItem26", O.Length(128,varying=false))
    /** Database column szItem27 DBType(char), Length(128,false) */
    val szitem27: Column[Option[String]] = column[Option[String]]("szItem27", O.Length(128,varying=false))
  }
  /** Collection-like TableQuery object for table Tbltax03 */
  lazy val Tbltax03 = new TableQuery(tag => new Tbltax03(tag))
  
  /** Row type of table Tbltaxm */
  type TbltaxmRow = HCons[Option[String],HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[String],HCons[Option[String],HCons[String,HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TbltaxmRow providing default values if available in the database schema. */
  def TbltaxmRow(uid: Option[String], cdbonuscode: String, cdmember: String, cdtype: String, cdtaxrate: String, cdmemkind: String, cdcid: Option[String], cdid: Option[String], fzbonus: Option[Double] = Some(0.0), fzbonusquota: Option[Double] = Some(0.0), fzbonusorg: Option[Double] = Some(0.0), fzbonusleader: Option[Double] = Some(0.0), fzbonusilife: Option[Double] = Some(0.0), fzbonusorgilife: Option[Double] = Some(0.0), fzbonusshare: Option[Double] = Some(0.0), fzbonusleaderpay: Option[Double] = Some(0.0), fzbonustax1: Option[Double] = Some(0.0), fzbonustax2: Option[Double] = Some(0.0), fzservicecharge: Option[Double] = Some(0.0), fzbonusnet: Option[Double] = Some(0.0), uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], szfullname: Option[String] = Some(""), szremark: Option[String] = Some(""), cdprodid: String, szprodname: Option[String]): TbltaxmRow = {
    uid :: cdbonuscode :: cdmember :: cdtype :: cdtaxrate :: cdmemkind :: cdcid :: cdid :: fzbonus :: fzbonusquota :: fzbonusorg :: fzbonusleader :: fzbonusilife :: fzbonusorgilife :: fzbonusshare :: fzbonusleaderpay :: fzbonustax1 :: fzbonustax2 :: fzservicecharge :: fzbonusnet :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: szfullname :: szremark :: cdprodid :: szprodname :: HNil
  }
  /** GetResult implicit for fetching TbltaxmRow objects using plain SQL queries */
  implicit def GetResultTbltaxmRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Option[Double]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[java.sql.Blob]]): GR[TbltaxmRow] = GR{
    prs => import prs._
    <<?[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[String] :: <<?[String] :: <<[String] :: <<?[String] :: HNil
  }
  /** Table description of table tblTaxM. Objects of this class serve as prototypes for rows in queries. */
  class Tbltaxm(_tableTag: Tag) extends Table[TbltaxmRow](_tableTag, Some("dbo"), "tblTaxM") {
    def * = uid :: cdbonuscode :: cdmember :: cdtype :: cdtaxrate :: cdmemkind :: cdcid :: cdid :: fzbonus :: fzbonusquota :: fzbonusorg :: fzbonusleader :: fzbonusilife :: fzbonusorgilife :: fzbonusshare :: fzbonusleaderpay :: fzbonustax1 :: fzbonustax2 :: fzservicecharge :: fzbonusnet :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: szfullname :: szremark :: cdprodid :: szprodname :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdBonusCode DBType(char), Length(8,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(8,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(1,varying=false))
    /** Database column cdTaxRate DBType(char), Length(2,false) */
    val cdtaxrate: Column[String] = column[String]("cdTaxRate", O.Length(2,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[String] = column[String]("cdMemKind", O.Length(1,varying=false))
    /** Database column cdCid DBType(char), Length(1,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(1,varying=false))
    /** Database column cdId DBType(char), Length(10,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(10,varying=false))
    /** Database column fzBonus DBType(float), Default(Some(0.0)) */
    val fzbonus: Column[Option[Double]] = column[Option[Double]]("fzBonus", O.Default(Some(0.0)))
    /** Database column fzBonusQuota DBType(float), Default(Some(0.0)) */
    val fzbonusquota: Column[Option[Double]] = column[Option[Double]]("fzBonusQuota", O.Default(Some(0.0)))
    /** Database column fzBonusOrg DBType(float), Default(Some(0.0)) */
    val fzbonusorg: Column[Option[Double]] = column[Option[Double]]("fzBonusOrg", O.Default(Some(0.0)))
    /** Database column fzBonusLeader DBType(float), Default(Some(0.0)) */
    val fzbonusleader: Column[Option[Double]] = column[Option[Double]]("fzBonusLeader", O.Default(Some(0.0)))
    /** Database column fzBonusiLife DBType(float), Default(Some(0.0)) */
    val fzbonusilife: Column[Option[Double]] = column[Option[Double]]("fzBonusiLife", O.Default(Some(0.0)))
    /** Database column fzBonusOrgiLife DBType(float), Default(Some(0.0)) */
    val fzbonusorgilife: Column[Option[Double]] = column[Option[Double]]("fzBonusOrgiLife", O.Default(Some(0.0)))
    /** Database column fzBonusShare DBType(float), Default(Some(0.0)) */
    val fzbonusshare: Column[Option[Double]] = column[Option[Double]]("fzBonusShare", O.Default(Some(0.0)))
    /** Database column fzBonusLeaderPay DBType(float), Default(Some(0.0)) */
    val fzbonusleaderpay: Column[Option[Double]] = column[Option[Double]]("fzBonusLeaderPay", O.Default(Some(0.0)))
    /** Database column fzBonusTax1 DBType(float), Default(Some(0.0)) */
    val fzbonustax1: Column[Option[Double]] = column[Option[Double]]("fzBonusTax1", O.Default(Some(0.0)))
    /** Database column fzBonusTax2 DBType(float), Default(Some(0.0)) */
    val fzbonustax2: Column[Option[Double]] = column[Option[Double]]("fzBonusTax2", O.Default(Some(0.0)))
    /** Database column fzServiceCharge DBType(float), Default(Some(0.0)) */
    val fzservicecharge: Column[Option[Double]] = column[Option[Double]]("fzServiceCharge", O.Default(Some(0.0)))
    /** Database column fzBonusNet DBType(float), Default(Some(0.0)) */
    val fzbonusnet: Column[Option[Double]] = column[Option[Double]]("fzBonusNet", O.Default(Some(0.0)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byts DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byts")
    /** Database column szFullName DBType(nchar), Length(128,false), Default(Some()) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(128,varying=false), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column cdProdId DBType(nchar), Length(20,false) */
    val cdprodid: Column[String] = column[String]("cdProdId", O.Length(20,varying=false))
    /** Database column szProdName DBType(nchar), Length(128,false) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(128,varying=false))
    
    /** Primary key of Tbltaxm (database name PK_tblTaxM) */
    val pk = primaryKey("PK_tblTaxM", cdbonuscode :: cdmember :: cdtype :: cdtaxrate :: cdmemkind :: cdprodid :: HNil)
    
    /** Index over (cdbonuscode,cdmemkind,cdid) (database name IX_tblTaxM) */
    val index1 = index("IX_tblTaxM", cdbonuscode :: cdmemkind :: cdid :: HNil)
  }
  /** Collection-like TableQuery object for table Tbltaxm */
  lazy val Tbltaxm = new TableQuery(tag => new Tbltaxm(tag))
  
  /** Entity class storing rows of table Tbltaxy
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdyear Database column cdYear DBType(char), Length(4,false)
   *  @param cdtype Database column cdType DBType(char), Length(1,false)
   *  @param cdid Database column cdId DBType(char), Length(10,false)
   *  @param cdtaxid Database column cdTaxId DBType(char), Length(2,false)
   *  @param cdtaxtype Database column cdTaxType DBType(char), Length(2,false)
   *  @param cdids Database column cdIds DBType(char), Length(1,false)
   *  @param cdcomp Database column cdComp DBType(char), Length(8,false)
   *  @param fzpay Database column fzPay DBType(float)
   *  @param fztax Database column fzTax DBType(float)
   *  @param fznet Database column fzNet DBType(float)
   *  @param szname Database column szName DBType(char), Length(12,false)
   *  @param szaddress Database column szAddress DBType(nchar), Length(60,false)
   *  @param cdmember Database column cdMember DBType(nchar), Length(10,false)
   *  @param cdserial Database column cdSerial DBType(nchar), Length(7,false)
   *  @param cdmember1 Database column cdMember1 DBType(nchar), Length(10,false) */
  case class TbltaxyRow(uid: String, cdyear: String, cdtype: String, cdid: String, cdtaxid: Option[String], cdtaxtype: Option[String], cdids: Option[String], cdcomp: Option[String], fzpay: Option[Double], fztax: Option[Double], fznet: Option[Double], szname: Option[String], szaddress: Option[String], cdmember: Option[String], cdserial: Option[String], cdmember1: Option[String])
  /** GetResult implicit for fetching TbltaxyRow objects using plain SQL queries */
  implicit def GetResultTbltaxyRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Double]]): GR[TbltaxyRow] = GR{
    prs => import prs._
    TbltaxyRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[Double], <<?[Double], <<?[Double], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String]))
  }
  /** Table description of table tblTaxY. Objects of this class serve as prototypes for rows in queries. */
  class Tbltaxy(_tableTag: Tag) extends Table[TbltaxyRow](_tableTag, Some("dbo"), "tblTaxY") {
    def * = (uid, cdyear, cdtype, cdid, cdtaxid, cdtaxtype, cdids, cdcomp, fzpay, fztax, fznet, szname, szaddress, cdmember, cdserial, cdmember1) <> (TbltaxyRow.tupled, TbltaxyRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdyear.?, cdtype.?, cdid.?, cdtaxid, cdtaxtype, cdids, cdcomp, fzpay, fztax, fznet, szname, szaddress, cdmember, cdserial, cdmember1).shaped.<>({r=>import r._; _1.map(_=> TbltaxyRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdYear DBType(char), Length(4,false) */
    val cdyear: Column[String] = column[String]("cdYear", O.Length(4,varying=false))
    /** Database column cdType DBType(char), Length(1,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(1,varying=false))
    /** Database column cdId DBType(char), Length(10,false) */
    val cdid: Column[String] = column[String]("cdId", O.Length(10,varying=false))
    /** Database column cdTaxId DBType(char), Length(2,false) */
    val cdtaxid: Column[Option[String]] = column[Option[String]]("cdTaxId", O.Length(2,varying=false))
    /** Database column cdTaxType DBType(char), Length(2,false) */
    val cdtaxtype: Column[Option[String]] = column[Option[String]]("cdTaxType", O.Length(2,varying=false))
    /** Database column cdIds DBType(char), Length(1,false) */
    val cdids: Column[Option[String]] = column[Option[String]]("cdIds", O.Length(1,varying=false))
    /** Database column cdComp DBType(char), Length(8,false) */
    val cdcomp: Column[Option[String]] = column[Option[String]]("cdComp", O.Length(8,varying=false))
    /** Database column fzPay DBType(float) */
    val fzpay: Column[Option[Double]] = column[Option[Double]]("fzPay")
    /** Database column fzTax DBType(float) */
    val fztax: Column[Option[Double]] = column[Option[Double]]("fzTax")
    /** Database column fzNet DBType(float) */
    val fznet: Column[Option[Double]] = column[Option[Double]]("fzNet")
    /** Database column szName DBType(char), Length(12,false) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(12,varying=false))
    /** Database column szAddress DBType(nchar), Length(60,false) */
    val szaddress: Column[Option[String]] = column[Option[String]]("szAddress", O.Length(60,varying=false))
    /** Database column cdMember DBType(nchar), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column cdSerial DBType(nchar), Length(7,false) */
    val cdserial: Column[Option[String]] = column[Option[String]]("cdSerial", O.Length(7,varying=false))
    /** Database column cdMember1 DBType(nchar), Length(10,false) */
    val cdmember1: Column[Option[String]] = column[Option[String]]("cdMember1", O.Length(10,varying=false))
    
    /** Index over (cdyear,cdtype,cdtaxid,cdtaxtype) (database name IX_tblTaxY) */
    val index1 = index("IX_tblTaxY", (cdyear, cdtype, cdtaxid, cdtaxtype))
  }
  /** Collection-like TableQuery object for table Tbltaxy */
  lazy val Tbltaxy = new TableQuery(tag => new Tbltaxy(tag))
  
  /** Entity class storing rows of table Tbltchappr
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdpersa Database column cdPerSa DBType(char), Length(4,false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param uidclass Database column uidClass DBType(uniqueidentifier), Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(12,false)
   *  @param uidperson Database column uidPerson DBType(uniqueidentifier), Length(36,false)
   *  @param iavgscore Database column iAvgScore DBType(int), Default(Some(0))
   *  @param iscertificate Database column isCertificate DBType(bit), Default(Some(false))
   *  @param cdcertificate Database column cdCertificate DBType(char), Length(20,false), Default(Some())
   *  @param dtcertificated Database column dtCertificated DBType(datetime)
   *  @param dtstrvalidate Database column dtStrValidate DBType(datetime)
   *  @param dtendvalidate Database column dtEndValidate DBType(datetime)
   *  @param cdstudenttype Database column cdStudentType DBType(char), Length(1,false), Default(Some(1))
   *  @param cdstudentno Database column cdStudentNo DBType(char), Length(12,false), Default(Some())
   *  @param cdid Database column cdID DBType(char), Length(20,false), Default(Some())
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TbltchapprRow(uid: String, cdpersa: String, dtstrdate: java.sql.Timestamp, dtenddate: java.sql.Timestamp, uidclass: String, cdmember: String, uidperson: String, iavgscore: Option[Int] = Some(0), iscertificate: Option[Boolean] = Some(false), cdcertificate: Option[String] = Some(""), dtcertificated: Option[java.sql.Timestamp], dtstrvalidate: Option[java.sql.Timestamp], dtendvalidate: Option[java.sql.Timestamp], cdstudenttype: Option[String] = Some("1"), cdstudentno: Option[String] = Some(""), cdid: Option[String] = Some(""), uidrelation: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TbltchapprRow objects using plain SQL queries */
  implicit def GetResultTbltchapprRow(implicit e0: GR[String], e1: GR[java.sql.Timestamp], e2: GR[Option[Int]], e3: GR[Option[Boolean]], e4: GR[Option[String]], e5: GR[Option[java.sql.Timestamp]], e6: GR[Option[java.sql.Blob]]): GR[TbltchapprRow] = GR{
    prs => import prs._
    TbltchapprRow.tupled((<<[String], <<[String], <<[java.sql.Timestamp], <<[java.sql.Timestamp], <<[String], <<[String], <<[String], <<?[Int], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblTCHAppr. Objects of this class serve as prototypes for rows in queries. */
  class Tbltchappr(_tableTag: Tag) extends Table[TbltchapprRow](_tableTag, Some("dbo"), "tblTCHAppr") {
    def * = (uid, cdpersa, dtstrdate, dtenddate, uidclass, cdmember, uidperson, iavgscore, iscertificate, cdcertificate, dtcertificated, dtstrvalidate, dtendvalidate, cdstudenttype, cdstudentno, cdid, uidrelation, uidcreator, dtcreate, byts) <> (TbltchapprRow.tupled, TbltchapprRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdpersa.?, dtstrdate.?, dtenddate.?, uidclass.?, cdmember.?, uidperson.?, iavgscore, iscertificate, cdcertificate, dtcertificated, dtstrvalidate, dtendvalidate, cdstudenttype, cdstudentno, cdid, uidrelation, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TbltchapprRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6.get, _7.get, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column uidClass DBType(uniqueidentifier), Length(36,false) */
    val uidclass: Column[String] = column[String]("uidClass", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(12,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(12,varying=false))
    /** Database column uidPerson DBType(uniqueidentifier), Length(36,false) */
    val uidperson: Column[String] = column[String]("uidPerson", O.Length(36,varying=false))
    /** Database column iAvgScore DBType(int), Default(Some(0)) */
    val iavgscore: Column[Option[Int]] = column[Option[Int]]("iAvgScore", O.Default(Some(0)))
    /** Database column isCertificate DBType(bit), Default(Some(false)) */
    val iscertificate: Column[Option[Boolean]] = column[Option[Boolean]]("isCertificate", O.Default(Some(false)))
    /** Database column cdCertificate DBType(char), Length(20,false), Default(Some()) */
    val cdcertificate: Column[Option[String]] = column[Option[String]]("cdCertificate", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column dtCertificated DBType(datetime) */
    val dtcertificated: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCertificated")
    /** Database column dtStrValidate DBType(datetime) */
    val dtstrvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrValidate")
    /** Database column dtEndValidate DBType(datetime) */
    val dtendvalidate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndValidate")
    /** Database column cdStudentType DBType(char), Length(1,false), Default(Some(1)) */
    val cdstudenttype: Column[Option[String]] = column[Option[String]]("cdStudentType", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column cdStudentNo DBType(char), Length(12,false), Default(Some()) */
    val cdstudentno: Column[Option[String]] = column[Option[String]]("cdStudentNo", O.Length(12,varying=false), O.Default(Some("")))
    /** Database column cdID DBType(char), Length(20,false), Default(Some()) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=false), O.Default(Some("")))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidrelation: Column[Option[String]] = column[Option[String]]("uidRelation", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tbltchappr (database name PK_tblTCHAppr) */
    val pk = primaryKey("PK_tblTCHAppr", (cdpersa, dtenddate, uidclass, cdmember, uidperson))
    
    /** Index over (cdpersa,uidclass) (database name IX_tblTCHAppr) */
    val index1 = index("IX_tblTCHAppr", (cdpersa, uidclass))
  }
  /** Collection-like TableQuery object for table Tbltchappr */
  lazy val Tbltchappr = new TableQuery(tag => new Tbltchappr(tag))
  
  /** Entity class storing rows of table Tbltchapprd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param uidtchappr Database column uidTCHAppr DBType(uniqueidentifier), Length(36,false)
   *  @param szname Database column szName DBType(nchar), Length(120,false), Default(Some())
   *  @param szsuggestion Database column szSuggestion DBType(nchar), Length(255,false), Default(Some())
   *  @param szdefect Database column szDefect DBType(nchar), Length(255,false), Default(Some())
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbltchapprdRow(uid: String, cdlanguage: String = "zh-CHT", uidtchappr: String, szname: Option[String] = Some(""), szsuggestion: Option[String] = Some(""), szdefect: Option[String] = Some(""), szremark: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbltchapprdRow objects using plain SQL queries */
  implicit def GetResultTbltchapprdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TbltchapprdRow] = GR{
    prs => import prs._
    TbltchapprdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblTCHApprD. Objects of this class serve as prototypes for rows in queries. */
  class Tbltchapprd(_tableTag: Tag) extends Table[TbltchapprdRow](_tableTag, Some("dbo"), "tblTCHApprD") {
    def * = (uid, cdlanguage, uidtchappr, szname, szsuggestion, szdefect, szremark, uidmodifier, dtmodify) <> (TbltchapprdRow.tupled, TbltchapprdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdlanguage.?, uidtchappr.?, szname, szsuggestion, szdefect, szremark, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TbltchapprdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column uidTCHAppr DBType(uniqueidentifier), Length(36,false) */
    val uidtchappr: Column[String] = column[String]("uidTCHAppr", O.Length(36,varying=false))
    /** Database column szName DBType(nchar), Length(120,false), Default(Some()) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(120,varying=false), O.Default(Some("")))
    /** Database column szSuggestion DBType(nchar), Length(255,false), Default(Some()) */
    val szsuggestion: Column[Option[String]] = column[Option[String]]("szSuggestion", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szDefect DBType(nchar), Length(255,false), Default(Some()) */
    val szdefect: Column[Option[String]] = column[Option[String]]("szDefect", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column szRemark DBType(nchar), Length(255,false), Default(Some()) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tbltchapprd (database name PK_tblTCHApprD) */
    val pk = primaryKey("PK_tblTCHApprD", (cdlanguage, uidtchappr))
  }
  /** Collection-like TableQuery object for table Tbltchapprd */
  lazy val Tbltchapprd = new TableQuery(tag => new Tbltchapprd(tag))
  
  /** Entity class storing rows of table Tbltchapprq
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidtchappr Database column uidTCHAppr DBType(uniqueidentifier), Length(36,false)
   *  @param uidquestion Database column uidQuestion DBType(uniqueidentifier), Length(36,false)
   *  @param cdgoal Database column cdGoal DBType(char), Length(2,false)
   *  @param iscore Database column iScore DBType(int), Default(Some(0))
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbltchapprqRow(uid: String, uidtchappr: String, uidquestion: String, cdgoal: Option[String], iscore: Option[Int] = Some(0), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbltchapprqRow objects using plain SQL queries */
  implicit def GetResultTbltchapprqRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]]): GR[TbltchapprqRow] = GR{
    prs => import prs._
    TbltchapprqRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[Int], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblTCHApprQ. Objects of this class serve as prototypes for rows in queries. */
  class Tbltchapprq(_tableTag: Tag) extends Table[TbltchapprqRow](_tableTag, Some("dbo"), "tblTCHApprQ") {
    def * = (uid, uidtchappr, uidquestion, cdgoal, iscore, uidmodifier, dtmodify) <> (TbltchapprqRow.tupled, TbltchapprqRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidtchappr.?, uidquestion.?, cdgoal, iscore, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TbltchapprqRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidTCHAppr DBType(uniqueidentifier), Length(36,false) */
    val uidtchappr: Column[String] = column[String]("uidTCHAppr", O.Length(36,varying=false))
    /** Database column uidQuestion DBType(uniqueidentifier), Length(36,false) */
    val uidquestion: Column[String] = column[String]("uidQuestion", O.Length(36,varying=false))
    /** Database column cdGoal DBType(char), Length(2,false) */
    val cdgoal: Column[Option[String]] = column[Option[String]]("cdGoal", O.Length(2,varying=false))
    /** Database column iScore DBType(int), Default(Some(0)) */
    val iscore: Column[Option[Int]] = column[Option[Int]]("iScore", O.Default(Some(0)))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tbltchapprq (database name PK_tblTCHApprQ) */
    val pk = primaryKey("PK_tblTCHApprQ", (uidtchappr, uidquestion))
  }
  /** Collection-like TableQuery object for table Tbltchapprq */
  lazy val Tbltchapprq = new TableQuery(tag => new Tbltchapprq(tag))
  
  /** Entity class storing rows of table Tblteacher
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param idperson Database column idPerson DBType(int identity), AutoInc, PrimaryKey
   *  @param cdpersonkind Database column cdPersonKind DBType(char), Length(1,false)
   *  @param cdteacher Database column cdTeacher DBType(char), Length(30,false)
   *  @param szfirstname Database column szFirstName DBType(nchar), Length(60,false)
   *  @param szlastname Database column szLastName DBType(nchar), Length(60,false)
   *  @param szfullname Database column szFullName DBType(nchar), Length(120,false)
   *  @param dtbirthday Database column dtBirthday DBType(datetime)
   *  @param cdsex Database column cdSex DBType(char), Length(1,false)
   *  @param cdtel Database column cdTEL DBType(char), Length(15,false)
   *  @param cdfax Database column cdFAX DBType(char), Length(15,false)
   *  @param isvalid Database column isValid DBType(bit), Default(true)
   *  @param szremark Database column szRemark DBType(nchar), Length(255,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblteacherRow(uid: String, idperson: Int, cdpersonkind: String, cdteacher: Option[String], szfirstname: Option[String], szlastname: Option[String], szfullname: Option[String], dtbirthday: Option[java.sql.Timestamp], cdsex: Option[String], cdtel: Option[String], cdfax: Option[String], isvalid: Boolean = true, szremark: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblteacherRow objects using plain SQL queries */
  implicit def GetResultTblteacherRow(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Boolean]): GR[TblteacherRow] = GR{
    prs => import prs._
    TblteacherRow.tupled((<<[String], <<[Int], <<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[String], <<?[String], <<[Boolean], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblTeacher. Objects of this class serve as prototypes for rows in queries. */
  class Tblteacher(_tableTag: Tag) extends Table[TblteacherRow](_tableTag, Some("dbo"), "tblTeacher") {
    def * = (uid, idperson, cdpersonkind, cdteacher, szfirstname, szlastname, szfullname, dtbirthday, cdsex, cdtel, cdfax, isvalid, szremark, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblteacherRow.tupled, TblteacherRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, idperson.?, cdpersonkind.?, cdteacher, szfirstname, szlastname, szfullname, dtbirthday, cdsex, cdtel, cdfax, isvalid.?, szremark, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblteacherRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7, _8, _9, _10, _11, _12.get, _13, _14, _15, _16, _17)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column idPerson DBType(int identity), AutoInc, PrimaryKey */
    val idperson: Column[Int] = column[Int]("idPerson", O.AutoInc, O.PrimaryKey)
    /** Database column cdPersonKind DBType(char), Length(1,false) */
    val cdpersonkind: Column[String] = column[String]("cdPersonKind", O.Length(1,varying=false))
    /** Database column cdTeacher DBType(char), Length(30,false) */
    val cdteacher: Column[Option[String]] = column[Option[String]]("cdTeacher", O.Length(30,varying=false))
    /** Database column szFirstName DBType(nchar), Length(60,false) */
    val szfirstname: Column[Option[String]] = column[Option[String]]("szFirstName", O.Length(60,varying=false))
    /** Database column szLastName DBType(nchar), Length(60,false) */
    val szlastname: Column[Option[String]] = column[Option[String]]("szLastName", O.Length(60,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column cdTEL DBType(char), Length(15,false) */
    val cdtel: Column[Option[String]] = column[Option[String]]("cdTEL", O.Length(15,varying=false))
    /** Database column cdFAX DBType(char), Length(15,false) */
    val cdfax: Column[Option[String]] = column[Option[String]]("cdFAX", O.Length(15,varying=false))
    /** Database column isValid DBType(bit), Default(true) */
    val isvalid: Column[Boolean] = column[Boolean]("isValid", O.Default(true))
    /** Database column szRemark DBType(nchar), Length(255,false) */
    val szremark: Column[Option[String]] = column[Option[String]]("szRemark", O.Length(255,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Tblteacher */
  lazy val Tblteacher = new TableQuery(tag => new Tblteacher(tag))
  
  /** Entity class storing rows of table Tblthcomparison
   *  @param `type` Database column type DBType(char), Length(10,false)
   *  @param szchinese Database column szChinese DBType(nvarchar), Length(100,true)
   *  @param szforeign Database column szForeign DBType(nvarchar), Length(256,true) */
  case class TblthcomparisonRow(`type`: String, szchinese: String, szforeign: Option[String])
  /** GetResult implicit for fetching TblthcomparisonRow objects using plain SQL queries */
  implicit def GetResultTblthcomparisonRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[TblthcomparisonRow] = GR{
    prs => import prs._
    TblthcomparisonRow.tupled((<<[String], <<[String], <<?[String]))
  }
  /** Table description of table tblThComparison. Objects of this class serve as prototypes for rows in queries.
   *  NOTE: The following names collided with Scala keywords and were escaped: type */
  class Tblthcomparison(_tableTag: Tag) extends Table[TblthcomparisonRow](_tableTag, Some("dbo"), "tblThComparison") {
    def * = (`type`, szchinese, szforeign) <> (TblthcomparisonRow.tupled, TblthcomparisonRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (`type`.?, szchinese.?, szforeign).shaped.<>({r=>import r._; _1.map(_=> TblthcomparisonRow.tupled((_1.get, _2.get, _3)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column type DBType(char), Length(10,false)
     *  NOTE: The name was escaped because it collided with a Scala keyword. */
    val `type`: Column[String] = column[String]("type", O.Length(10,varying=false))
    /** Database column szChinese DBType(nvarchar), Length(100,true) */
    val szchinese: Column[String] = column[String]("szChinese", O.Length(100,varying=true))
    /** Database column szForeign DBType(nvarchar), Length(256,true) */
    val szforeign: Column[Option[String]] = column[Option[String]]("szForeign", O.Length(256,varying=true))
    
    /** Primary key of Tblthcomparison (database name PK_tblThComparison) */
    val pk = primaryKey("PK_tblThComparison", (`type`, szchinese))
  }
  /** Collection-like TableQuery object for table Tblthcomparison */
  lazy val Tblthcomparison = new TableQuery(tag => new Tblthcomparison(tag))
  
  /** Entity class storing rows of table Tblthing
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcourse Database column cdCourse DBType(char), Length(5,false), Default(SYS)
   *  @param cdthingtype Database column cdThingType DBType(char), Length(1,false)
   *  @param cdthing Database column cdThing DBType(char), Length(3,false)
   *  @param cdunit Database column cdUnit DBType(char), Length(4,false)
   *  @param szthingdesc Database column szThingDesc DBType(nchar), Length(255,false)
   *  @param ischecked Database column isChecked DBType(bit), Default(false)
   *  @param isinvalid Database column isInvalid DBType(bit), Default(false)
   *  @param dtstrdate Database column dtStrDate DBType(datetime)
   *  @param dtenddate Database column dtEndDate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblthingRow(uid: String, cdcourse: String = "SYS", cdthingtype: String, cdthing: String, cdunit: Option[String], szthingdesc: Option[String], ischecked: Boolean = false, isinvalid: Boolean = false, dtstrdate: Option[java.sql.Timestamp], dtenddate: java.sql.Timestamp, uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblthingRow objects using plain SQL queries */
  implicit def GetResultTblthingRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Boolean], e3: GR[Option[java.sql.Timestamp]], e4: GR[java.sql.Timestamp], e5: GR[Option[java.sql.Blob]]): GR[TblthingRow] = GR{
    prs => import prs._
    TblthingRow.tupled((<<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<[Boolean], <<[Boolean], <<?[java.sql.Timestamp], <<[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblThing. Objects of this class serve as prototypes for rows in queries. */
  class Tblthing(_tableTag: Tag) extends Table[TblthingRow](_tableTag, Some("dbo"), "tblThing") {
    def * = (uid, cdcourse, cdthingtype, cdthing, cdunit, szthingdesc, ischecked, isinvalid, dtstrdate, dtenddate, uidcreator, dtcreate, uidmodifier, dtmodify, byts) <> (TblthingRow.tupled, TblthingRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcourse.?, cdthingtype.?, cdthing.?, cdunit, szthingdesc, ischecked.?, isinvalid.?, dtstrdate, dtenddate.?, uidcreator, dtcreate, uidmodifier, dtmodify, byts).shaped.<>({r=>import r._; _1.map(_=> TblthingRow.tupled((_1.get, _2.get, _3.get, _4.get, _5, _6, _7.get, _8.get, _9, _10.get, _11, _12, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCourse DBType(char), Length(5,false), Default(SYS) */
    val cdcourse: Column[String] = column[String]("cdCourse", O.Length(5,varying=false), O.Default("SYS"))
    /** Database column cdThingType DBType(char), Length(1,false) */
    val cdthingtype: Column[String] = column[String]("cdThingType", O.Length(1,varying=false))
    /** Database column cdThing DBType(char), Length(3,false) */
    val cdthing: Column[String] = column[String]("cdThing", O.Length(3,varying=false))
    /** Database column cdUnit DBType(char), Length(4,false) */
    val cdunit: Column[Option[String]] = column[Option[String]]("cdUnit", O.Length(4,varying=false))
    /** Database column szThingDesc DBType(nchar), Length(255,false) */
    val szthingdesc: Column[Option[String]] = column[Option[String]]("szThingDesc", O.Length(255,varying=false))
    /** Database column isChecked DBType(bit), Default(false) */
    val ischecked: Column[Boolean] = column[Boolean]("isChecked", O.Default(false))
    /** Database column isInvalid DBType(bit), Default(false) */
    val isinvalid: Column[Boolean] = column[Boolean]("isInvalid", O.Default(false))
    /** Database column dtStrDate DBType(datetime) */
    val dtstrdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrDate")
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtEndDate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblthing (database name PK_tblThing) */
    val pk = primaryKey("PK_tblThing", (cdcourse, cdthingtype, cdthing, dtenddate))
  }
  /** Collection-like TableQuery object for table Tblthing */
  lazy val Tblthing = new TableQuery(tag => new Tblthing(tag))
  
  /** Entity class storing rows of table Tbltmpproduct
   *  @param cduser Database column cdUser DBType(varchar), Length(50,true)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param iyear Database column iYear DBType(int)
   *  @param cdmonth Database column cdMonth DBType(char), Length(2,false)
   *  @param iqty Database column iQty DBType(int) */
  case class TbltmpproductRow(cduser: Option[String], cdmember: Option[String], iyear: Option[Int], cdmonth: Option[String], iqty: Option[Int])
  /** GetResult implicit for fetching TbltmpproductRow objects using plain SQL queries */
  implicit def GetResultTbltmpproductRow(implicit e0: GR[Option[String]], e1: GR[Option[Int]]): GR[TbltmpproductRow] = GR{
    prs => import prs._
    TbltmpproductRow.tupled((<<?[String], <<?[String], <<?[Int], <<?[String], <<?[Int]))
  }
  /** Table description of table tblTmpProduct. Objects of this class serve as prototypes for rows in queries. */
  class Tbltmpproduct(_tableTag: Tag) extends Table[TbltmpproductRow](_tableTag, Some("dbo"), "tblTmpProduct") {
    def * = (cduser, cdmember, iyear, cdmonth, iqty) <> (TbltmpproductRow.tupled, TbltmpproductRow.unapply)
    
    /** Database column cdUser DBType(varchar), Length(50,true) */
    val cduser: Column[Option[String]] = column[Option[String]]("cdUser", O.Length(50,varying=true))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column iYear DBType(int) */
    val iyear: Column[Option[Int]] = column[Option[Int]]("iYear")
    /** Database column cdMonth DBType(char), Length(2,false) */
    val cdmonth: Column[Option[String]] = column[Option[String]]("cdMonth", O.Length(2,varying=false))
    /** Database column iQty DBType(int) */
    val iqty: Column[Option[Int]] = column[Option[Int]]("iQty")
  }
  /** Collection-like TableQuery object for table Tbltmpproduct */
  lazy val Tbltmpproduct = new TableQuery(tag => new Tbltmpproduct(tag))
  
  /** Entity class storing rows of table Tbltrainproduct
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcourse Database column cdCourse DBType(char), Length(5,false), Default()
   *  @param cdproductid Database column cdProductID DBType(char), Length(15,false), Default()
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TbltrainproductRow(uid: String, cdcourse: String = "", cdproductid: String = "", uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TbltrainproductRow objects using plain SQL queries */
  implicit def GetResultTbltrainproductRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TbltrainproductRow] = GR{
    prs => import prs._
    TbltrainproductRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblTrainProduct. Objects of this class serve as prototypes for rows in queries. */
  class Tbltrainproduct(_tableTag: Tag) extends Table[TbltrainproductRow](_tableTag, Some("dbo"), "tblTrainProduct") {
    def * = (uid, cdcourse, cdproductid, uidcreator, dtcreate, byts) <> (TbltrainproductRow.tupled, TbltrainproductRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcourse.?, cdproductid.?, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TbltrainproductRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCourse DBType(char), Length(5,false), Default() */
    val cdcourse: Column[String] = column[String]("cdCourse", O.Length(5,varying=false), O.Default(""))
    /** Database column cdProductID DBType(char), Length(15,false), Default() */
    val cdproductid: Column[String] = column[String]("cdProductID", O.Length(15,varying=false), O.Default(""))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tbltrainproduct (database name PK_tblTrainProdect) */
    val pk = primaryKey("PK_tblTrainProdect", (cdcourse, cdproductid))
  }
  /** Collection-like TableQuery object for table Tbltrainproduct */
  lazy val Tbltrainproduct = new TableQuery(tag => new Tbltrainproduct(tag))
  
  /** Entity class storing rows of table Tbltrainproductd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidtrainproduct Database column uidTrainProduct DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT)
   *  @param szdesc Database column szDesc DBType(nchar), Length(255,false), Default(Some())
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TbltrainproductdRow(uid: String, uidtrainproduct: String, cdlanguage: String = "zh-CHT", szdesc: Option[String] = Some(""), uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TbltrainproductdRow objects using plain SQL queries */
  implicit def GetResultTbltrainproductdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TbltrainproductdRow] = GR{
    prs => import prs._
    TbltrainproductdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblTrainProductD. Objects of this class serve as prototypes for rows in queries. */
  class Tbltrainproductd(_tableTag: Tag) extends Table[TbltrainproductdRow](_tableTag, Some("dbo"), "tblTrainProductD") {
    def * = (uid, uidtrainproduct, cdlanguage, szdesc, uidmodifier, dtmodify) <> (TbltrainproductdRow.tupled, TbltrainproductdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidtrainproduct.?, cdlanguage.?, szdesc, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TbltrainproductdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidTrainProduct DBType(uniqueidentifier), Length(36,false) */
    val uidtrainproduct: Column[String] = column[String]("uidTrainProduct", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false), Default(zh-CHT) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false), O.Default("zh-CHT"))
    /** Database column szDesc DBType(nchar), Length(255,false), Default(Some()) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(255,varying=false), O.Default(Some("")))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tbltrainproductd (database name PK_tblTrainProdectD) */
    val pk = primaryKey("PK_tblTrainProdectD", (uidtrainproduct, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tbltrainproductd */
  lazy val Tbltrainproductd = new TableQuery(tag => new Tbltrainproductd(tag))
  
  /** Entity class storing rows of table Tblusers
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidrelation Database column uidRelation DBType(uniqueidentifier), Length(36,false)
   *  @param cdtype Database column cdType DBType(char), Length(10,false)
   *  @param szalias Database column szAlias DBType(char), PrimaryKey, Length(40,false)
   *  @param szpassword Database column szPassword DBType(char), Length(40,false), Default()
   *  @param sztable Database column szTable DBType(char), Length(40,false)
   *  @param szgroup Database column szGroup DBType(char), Length(40,false)
   *  @param ynavailable Database column ynAvailable DBType(bit), Default(Some(true))
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblusersRow(uid: String, uidrelation: String, cdtype: String, szalias: String, szpassword: String = "", sztable: Option[String], szgroup: Option[String], ynavailable: Option[Boolean] = Some(true), uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblusersRow objects using plain SQL queries */
  implicit def GetResultTblusersRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Boolean]], e3: GR[Option[java.sql.Timestamp]]): GR[TblusersRow] = GR{
    prs => import prs._
    TblusersRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[Boolean], <<?[String], <<?[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblUsers. Objects of this class serve as prototypes for rows in queries. */
  class Tblusers(_tableTag: Tag) extends Table[TblusersRow](_tableTag, Some("dbo"), "tblUsers") {
    def * = (uid, uidrelation, cdtype, szalias, szpassword, sztable, szgroup, ynavailable, uidcreator, dtcreate, uidmodifier, dtmodify) <> (TblusersRow.tupled, TblusersRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidrelation.?, cdtype.?, szalias.?, szpassword.?, sztable, szgroup, ynavailable, uidcreator, dtcreate, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblusersRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8, _9, _10, _11, _12)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidRelation DBType(uniqueidentifier), Length(36,false) */
    val uidrelation: Column[String] = column[String]("uidRelation", O.Length(36,varying=false))
    /** Database column cdType DBType(char), Length(10,false) */
    val cdtype: Column[String] = column[String]("cdType", O.Length(10,varying=false))
    /** Database column szAlias DBType(char), PrimaryKey, Length(40,false) */
    val szalias: Column[String] = column[String]("szAlias", O.PrimaryKey, O.Length(40,varying=false))
    /** Database column szPassword DBType(char), Length(40,false), Default() */
    val szpassword: Column[String] = column[String]("szPassword", O.Length(40,varying=false), O.Default(""))
    /** Database column szTable DBType(char), Length(40,false) */
    val sztable: Column[Option[String]] = column[Option[String]]("szTable", O.Length(40,varying=false))
    /** Database column szGroup DBType(char), Length(40,false) */
    val szgroup: Column[Option[String]] = column[Option[String]]("szGroup", O.Length(40,varying=false))
    /** Database column ynAvailable DBType(bit), Default(Some(true)) */
    val ynavailable: Column[Option[Boolean]] = column[Option[Boolean]]("ynAvailable", O.Default(Some(true)))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Index over (cdtype,szalias) (database name IX_tblUsers) */
    val index1 = index("IX_tblUsers", (cdtype, szalias))
  }
  /** Collection-like TableQuery object for table Tblusers */
  lazy val Tblusers = new TableQuery(tag => new Tblusers(tag))
  
  /** Entity class storing rows of table Tblvisa
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdvisa Database column cdVisa DBType(char), Length(16,false)
   *  @param cdauthorization Database column cdAuthorization DBType(char), Length(6,false)
   *  @param dtbusinessdate Database column dtBusinessDate DBType(datetime)
   *  @param cdorderno Database column cdOrderNo DBType(char), Length(15,false) */
  case class TblvisaRow(uid: String, cdvisa: String, cdauthorization: String, dtbusinessdate: Option[java.sql.Timestamp], cdorderno: Option[String])
  /** GetResult implicit for fetching TblvisaRow objects using plain SQL queries */
  implicit def GetResultTblvisaRow(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]], e2: GR[Option[String]]): GR[TblvisaRow] = GR{
    prs => import prs._
    TblvisaRow.tupled((<<[String], <<[String], <<[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblVisa. Objects of this class serve as prototypes for rows in queries. */
  class Tblvisa(_tableTag: Tag) extends Table[TblvisaRow](_tableTag, Some("dbo"), "tblVisa") {
    def * = (uid, cdvisa, cdauthorization, dtbusinessdate, cdorderno) <> (TblvisaRow.tupled, TblvisaRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdvisa.?, cdauthorization.?, dtbusinessdate, cdorderno).shaped.<>({r=>import r._; _1.map(_=> TblvisaRow.tupled((_1.get, _2.get, _3.get, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdVisa DBType(char), Length(16,false) */
    val cdvisa: Column[String] = column[String]("cdVisa", O.Length(16,varying=false))
    /** Database column cdAuthorization DBType(char), Length(6,false) */
    val cdauthorization: Column[String] = column[String]("cdAuthorization", O.Length(6,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdOrderNo DBType(char), Length(15,false) */
    val cdorderno: Column[Option[String]] = column[Option[String]]("cdOrderNo", O.Length(15,varying=false))
    
    /** Index over (cdvisa,cdauthorization) (database name IX_tblVisa) */
    val index1 = index("IX_tblVisa", (cdvisa, cdauthorization))
  }
  /** Collection-like TableQuery object for table Tblvisa */
  lazy val Tblvisa = new TableQuery(tag => new Tblvisa(tag))
  
  /** Entity class storing rows of table Tblweblog
   *  @param id Database column id DBType(int identity), AutoInc
   *  @param cdprgcode Database column cdPrgCode DBType(nvarchar), Length(50,true), Default(Some())
   *  @param szaction Database column szAction DBType(nvarchar), Length(50,true), Default(Some())
   *  @param szcontent Database column szContent DBType(nvarchar), Length(1024,true)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
  case class TblweblogRow(id: Int, cdprgcode: Option[String] = Some(""), szaction: Option[String] = Some(""), szcontent: Option[String], dtcreate: Option[java.sql.Timestamp], uidcreator: Option[String])
  /** GetResult implicit for fetching TblweblogRow objects using plain SQL queries */
  implicit def GetResultTblweblogRow(implicit e0: GR[Int], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblweblogRow] = GR{
    prs => import prs._
    TblweblogRow.tupled((<<[Int], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblWebLog. Objects of this class serve as prototypes for rows in queries. */
  class Tblweblog(_tableTag: Tag) extends Table[TblweblogRow](_tableTag, Some("dbo"), "tblWebLog") {
    def * = (id, cdprgcode, szaction, szcontent, dtcreate, uidcreator) <> (TblweblogRow.tupled, TblweblogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, cdprgcode, szaction, szcontent, dtcreate, uidcreator).shaped.<>({r=>import r._; _1.map(_=> TblweblogRow.tupled((_1.get, _2, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(int identity), AutoInc */
    val id: Column[Int] = column[Int]("id", O.AutoInc)
    /** Database column cdPrgCode DBType(nvarchar), Length(50,true), Default(Some()) */
    val cdprgcode: Column[Option[String]] = column[Option[String]]("cdPrgCode", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column szAction DBType(nvarchar), Length(50,true), Default(Some()) */
    val szaction: Column[Option[String]] = column[Option[String]]("szAction", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column szContent DBType(nvarchar), Length(1024,true) */
    val szcontent: Column[Option[String]] = column[Option[String]]("szContent", O.Length(1024,varying=true))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
  }
  /** Collection-like TableQuery object for table Tblweblog */
  lazy val Tblweblog = new TableQuery(tag => new Tblweblog(tag))
  
  /** Entity class storing rows of table Tblwebloginlog
   *  @param uid Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false)
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param szmember Database column szMember DBType(nchar), Length(50,false)
   *  @param dtlogin Database column dtLogin DBType(datetime)
   *  @param cdip Database column cdIP DBType(char), Length(50,false) */
  case class TblwebloginlogRow(uid: String, cdmember: Option[String], szmember: Option[String], dtlogin: Option[java.sql.Timestamp], cdip: Option[String])
  /** GetResult implicit for fetching TblwebloginlogRow objects using plain SQL queries */
  implicit def GetResultTblwebloginlogRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblwebloginlogRow] = GR{
    prs => import prs._
    TblwebloginlogRow.tupled((<<[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table tblWebLoginLog. Objects of this class serve as prototypes for rows in queries. */
  class Tblwebloginlog(_tableTag: Tag) extends Table[TblwebloginlogRow](_tableTag, Some("dbo"), "tblWebLoginLog") {
    def * = (uid, cdmember, szmember, dtlogin, cdip) <> (TblwebloginlogRow.tupled, TblwebloginlogRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdmember, szmember, dtlogin, cdip).shaped.<>({r=>import r._; _1.map(_=> TblwebloginlogRow.tupled((_1.get, _2, _3, _4, _5)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), PrimaryKey, Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.PrimaryKey, O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szMember DBType(nchar), Length(50,false) */
    val szmember: Column[Option[String]] = column[Option[String]]("szMember", O.Length(50,varying=false))
    /** Database column dtLogin DBType(datetime) */
    val dtlogin: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLogin")
    /** Database column cdIP DBType(char), Length(50,false) */
    val cdip: Column[Option[String]] = column[Option[String]]("cdIP", O.Length(50,varying=false))
  }
  /** Collection-like TableQuery object for table Tblwebloginlog */
  lazy val Tblwebloginlog = new TableQuery(tag => new Tblwebloginlog(tag))
  
  /** Entity class storing rows of table Tblzip
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdcountry Database column cdCountry DBType(char), Length(4,false)
   *  @param cdstate Database column cdState DBType(char), Length(10,false)
   *  @param cdcity Database column cdCity DBType(char), Length(5,false)
   *  @param cdzip Database column cdZip DBType(char), Length(6,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblzipRow(uid: String, cdcountry: String, cdstate: String, cdcity: String, cdzip: String, uidcreator: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblzipRow objects using plain SQL queries */
  implicit def GetResultTblzipRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblzipRow] = GR{
    prs => import prs._
    TblzipRow.tupled((<<[String], <<[String], <<[String], <<[String], <<[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblZip. Objects of this class serve as prototypes for rows in queries. */
  class Tblzip(_tableTag: Tag) extends Table[TblzipRow](_tableTag, Some("dbo"), "tblZip") {
    def * = (uid, cdcountry, cdstate, cdcity, cdzip, uidcreator, dtcreate, byts) <> (TblzipRow.tupled, TblzipRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdcountry.?, cdstate.?, cdcity.?, cdzip.?, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblzipRow.tupled((_1.get, _2.get, _3.get, _4.get, _5.get, _6, _7, _8)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[String] = column[String]("cdCountry", O.Length(4,varying=false))
    /** Database column cdState DBType(char), Length(10,false) */
    val cdstate: Column[String] = column[String]("cdState", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(5,false) */
    val cdcity: Column[String] = column[String]("cdCity", O.Length(5,varying=false))
    /** Database column cdZip DBType(char), Length(6,false) */
    val cdzip: Column[String] = column[String]("cdZip", O.Length(6,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    
    /** Primary key of Tblzip (database name PK_tblZip) */
    val pk = primaryKey("PK_tblZip", (cdcountry, cdstate, cdcity, cdzip))
  }
  /** Collection-like TableQuery object for table Tblzip */
  lazy val Tblzip = new TableQuery(tag => new Tblzip(tag))
  
  /** Entity class storing rows of table Tblzipd
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidzip Database column uidZip DBType(uniqueidentifier), Length(36,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szshort Database column szShort DBType(nvarchar), Length(50,true)
   *  @param szname Database column szName DBType(nvarchar), Length(50,true)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000}))
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class TblzipdRow(uid: String, uidzip: String, cdlanguage: String, szshort: Option[String], szname: Option[String], uidmodifier: Option[String] = Some("{00000000-0000-0000-0000-000000000000}"), dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching TblzipdRow objects using plain SQL queries */
  implicit def GetResultTblzipdRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]]): GR[TblzipdRow] = GR{
    prs => import prs._
    TblzipdRow.tupled((<<[String], <<[String], <<[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tblZipD. Objects of this class serve as prototypes for rows in queries. */
  class Tblzipd(_tableTag: Tag) extends Table[TblzipdRow](_tableTag, Some("dbo"), "tblZipD") {
    def * = (uid, uidzip, cdlanguage, szshort, szname, uidmodifier, dtmodify) <> (TblzipdRow.tupled, TblzipdRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidzip.?, cdlanguage.?, szshort, szname, uidmodifier, dtmodify).shaped.<>({r=>import r._; _1.map(_=> TblzipdRow.tupled((_1.get, _2.get, _3.get, _4, _5, _6, _7)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidZip DBType(uniqueidentifier), Length(36,false) */
    val uidzip: Column[String] = column[String]("uidZip", O.Length(36,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[String] = column[String]("cdLanguage", O.Length(10,varying=false))
    /** Database column szShort DBType(nvarchar), Length(50,true) */
    val szshort: Column[Option[String]] = column[Option[String]]("szShort", O.Length(50,varying=true))
    /** Database column szName DBType(nvarchar), Length(50,true) */
    val szname: Column[Option[String]] = column[Option[String]]("szName", O.Length(50,varying=true))
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false), Default(Some({00000000-0000-0000-0000-000000000000})) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false), O.Default(Some("{00000000-0000-0000-0000-000000000000}")))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Tblzipd (database name PK_tblZipD) */
    val pk = primaryKey("PK_tblZipD", (uidzip, cdlanguage))
  }
  /** Collection-like TableQuery object for table Tblzipd */
  lazy val Tblzipd = new TableQuery(tag => new Tblzipd(tag))
  
  /** Entity class storing rows of table Tblzipdetail
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param uidzip Database column uidZip DBType(uniqueidentifier), Length(36,false)
   *  @param cdcountry Database column cdCountry DBType(char), Length(4,false)
   *  @param cdstate Database column cdState DBType(char), Length(10,false)
   *  @param cdcity Database column cdCity DBType(char), Length(4,false)
   *  @param cdzipfull Database column cdZipFull DBType(char), Length(6,false)
   *  @param cdzip Database column cdZip DBType(char), Length(6,false)
   *  @param cdsubzip Database column cdSubZip DBType(char), Length(6,false)
   *  @param cdlanguage Database column cdLanguage DBType(char), Length(10,false)
   *  @param szroad Database column szRoad DBType(nchar), Length(40,false)
   *  @param szdesc Database column szDesc DBType(nchar), Length(40,false)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param byts Database column byTs DBType(timestamp) */
  case class TblzipdetailRow(uid: String, uidzip: Option[String], cdcountry: Option[String], cdstate: Option[String], cdcity: Option[String], cdzipfull: Option[String], cdzip: Option[String], cdsubzip: Option[String], cdlanguage: Option[String], szroad: Option[String], szdesc: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], byts: Option[java.sql.Blob])
  /** GetResult implicit for fetching TblzipdetailRow objects using plain SQL queries */
  implicit def GetResultTblzipdetailRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[java.sql.Blob]]): GR[TblzipdetailRow] = GR{
    prs => import prs._
    TblzipdetailRow.tupled((<<[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[String], <<?[java.sql.Timestamp], <<?[java.sql.Blob]))
  }
  /** Table description of table tblZipDetail. Objects of this class serve as prototypes for rows in queries. */
  class Tblzipdetail(_tableTag: Tag) extends Table[TblzipdetailRow](_tableTag, Some("dbo"), "tblZipDetail") {
    def * = (uid, uidzip, cdcountry, cdstate, cdcity, cdzipfull, cdzip, cdsubzip, cdlanguage, szroad, szdesc, uidcreator, dtcreate, byts) <> (TblzipdetailRow.tupled, TblzipdetailRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, uidzip, cdcountry, cdstate, cdcity, cdzipfull, cdzip, cdsubzip, cdlanguage, szroad, szdesc, uidcreator, dtcreate, byts).shaped.<>({r=>import r._; _1.map(_=> TblzipdetailRow.tupled((_1.get, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column uidZip DBType(uniqueidentifier), Length(36,false) */
    val uidzip: Column[Option[String]] = column[Option[String]]("uidZip", O.Length(36,varying=false))
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column cdState DBType(char), Length(10,false) */
    val cdstate: Column[Option[String]] = column[Option[String]]("cdState", O.Length(10,varying=false))
    /** Database column cdCity DBType(char), Length(4,false) */
    val cdcity: Column[Option[String]] = column[Option[String]]("cdCity", O.Length(4,varying=false))
    /** Database column cdZipFull DBType(char), Length(6,false) */
    val cdzipfull: Column[Option[String]] = column[Option[String]]("cdZipFull", O.Length(6,varying=false))
    /** Database column cdZip DBType(char), Length(6,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(6,varying=false))
    /** Database column cdSubZip DBType(char), Length(6,false) */
    val cdsubzip: Column[Option[String]] = column[Option[String]]("cdSubZip", O.Length(6,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column szRoad DBType(nchar), Length(40,false) */
    val szroad: Column[Option[String]] = column[Option[String]]("szRoad", O.Length(40,varying=false))
    /** Database column szDesc DBType(nchar), Length(40,false) */
    val szdesc: Column[Option[String]] = column[Option[String]]("szDesc", O.Length(40,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
  }
  /** Collection-like TableQuery object for table Tblzipdetail */
  lazy val Tblzipdetail = new TableQuery(tag => new Tblzipdetail(tag))
  
  /** Entity class storing rows of table TempPpvCalc
   *  @param id Database column id DBType(numeric() identity), AutoInc, PrimaryKey
   *  @param currentPpv Database column current_ppv DBType(varchar), Length(255,true)
   *  @param mainMemberCode Database column main_member_code DBType(varchar), Length(255,true)
   *  @param subMemberCode Database column sub_member_code DBType(varchar), Length(255,true) */
  case class TempPpvCalcRow(id: scala.math.BigDecimal, currentPpv: String, mainMemberCode: String, subMemberCode: String)
  /** GetResult implicit for fetching TempPpvCalcRow objects using plain SQL queries */
  implicit def GetResultTempPpvCalcRow(implicit e0: GR[scala.math.BigDecimal], e1: GR[String]): GR[TempPpvCalcRow] = GR{
    prs => import prs._
    TempPpvCalcRow.tupled((<<[scala.math.BigDecimal], <<[String], <<[String], <<[String]))
  }
  /** Table description of table temp_ppv_calc. Objects of this class serve as prototypes for rows in queries. */
  class TempPpvCalc(_tableTag: Tag) extends Table[TempPpvCalcRow](_tableTag, Some("dbo"), "temp_ppv_calc") {
    def * = (id, currentPpv, mainMemberCode, subMemberCode) <> (TempPpvCalcRow.tupled, TempPpvCalcRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (id.?, currentPpv.?, mainMemberCode.?, subMemberCode.?).shaped.<>({r=>import r._; _1.map(_=> TempPpvCalcRow.tupled((_1.get, _2.get, _3.get, _4.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column id DBType(numeric() identity), AutoInc, PrimaryKey */
    val id: Column[scala.math.BigDecimal] = column[scala.math.BigDecimal]("id", O.AutoInc, O.PrimaryKey)
    /** Database column current_ppv DBType(varchar), Length(255,true) */
    val currentPpv: Column[String] = column[String]("current_ppv", O.Length(255,varying=true))
    /** Database column main_member_code DBType(varchar), Length(255,true) */
    val mainMemberCode: Column[String] = column[String]("main_member_code", O.Length(255,varying=true))
    /** Database column sub_member_code DBType(varchar), Length(255,true) */
    val subMemberCode: Column[String] = column[String]("sub_member_code", O.Length(255,varying=true))
  }
  /** Collection-like TableQuery object for table TempPpvCalc */
  lazy val TempPpvCalc = new TableQuery(tag => new TempPpvCalc(tag))
  
  /** Entity class storing rows of table Testtrigger1
   *  @param name Database column name DBType(varchar), Length(50,true) */
  case class Testtrigger1Row(name: Option[String])
  /** GetResult implicit for fetching Testtrigger1Row objects using plain SQL queries */
  implicit def GetResultTesttrigger1Row(implicit e0: GR[Option[String]]): GR[Testtrigger1Row] = GR{
    prs => import prs._
    Testtrigger1Row(<<?[String])
  }
  /** Table description of table testTrigger1. Objects of this class serve as prototypes for rows in queries. */
  class Testtrigger1(_tableTag: Tag) extends Table[Testtrigger1Row](_tableTag, Some("dbo"), "testTrigger1") {
    def * = name <> (Testtrigger1Row, Testtrigger1Row.unapply)
    
    /** Database column name DBType(varchar), Length(50,true) */
    val name: Column[Option[String]] = column[Option[String]]("name", O.Length(50,varying=true))
  }
  /** Collection-like TableQuery object for table Testtrigger1 */
  lazy val Testtrigger1 = new TableQuery(tag => new Testtrigger1(tag))
  
  /** Entity class storing rows of table Testtrigger2
   *  @param name Database column name DBType(varchar), Length(50,true) */
  case class Testtrigger2Row(name: Option[String])
  /** GetResult implicit for fetching Testtrigger2Row objects using plain SQL queries */
  implicit def GetResultTesttrigger2Row(implicit e0: GR[Option[String]]): GR[Testtrigger2Row] = GR{
    prs => import prs._
    Testtrigger2Row(<<?[String])
  }
  /** Table description of table testTrigger2. Objects of this class serve as prototypes for rows in queries. */
  class Testtrigger2(_tableTag: Tag) extends Table[Testtrigger2Row](_tableTag, Some("dbo"), "testTrigger2") {
    def * = name <> (Testtrigger2Row, Testtrigger2Row.unapply)
    
    /** Database column name DBType(varchar), Length(50,true) */
    val name: Column[Option[String]] = column[Option[String]]("name", O.Length(50,varying=true))
  }
  /** Collection-like TableQuery object for table Testtrigger2 */
  lazy val Testtrigger2 = new TableQuery(tag => new Testtrigger2(tag))
  
  /** Row type of table Tmp */
  type TmpRow = HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[Long],HCons[Option[Long],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for TmpRow providing default values if available in the database schema. */
  def TmpRow(szdatayear: String, szdatamonth: String, cdmember: String, cdpersa: Option[String], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], cdmemkind: Option[String], cdcid: Option[String], cdid: Option[String], dtcreate: Option[java.sql.Timestamp], cdsrvmember: Option[String], icumpv: Option[Long], icumuppv: Option[Long], idstatus: Option[String], szfullname: Option[String], cdpersg: Option[String], cdsponser: Option[String], cdzip: Option[String], szfulladdr: Option[String], uid: Option[String], cdpergp: Option[String], szdetail: Option[String], szmobile: Option[String], isflag3: Option[Boolean], cdpaymethod: Option[String], issuspend: Option[Boolean], cdbank: Option[String], cdbranch: Option[String], szaccountno: Option[String], szholder: Option[String], szbank: Option[String], cdpid: Option[String]): TmpRow = {
    szdatayear :: szdatamonth :: cdmember :: cdpersa :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: dtcreate :: cdsrvmember :: icumpv :: icumuppv :: idstatus :: szfullname :: cdpersg :: cdsponser :: cdzip :: szfulladdr :: uid :: cdpergp :: szdetail :: szmobile :: isflag3 :: cdpaymethod :: issuspend :: cdbank :: cdbranch :: szaccountno :: szholder :: szbank :: cdpid :: HNil
  }
  /** GetResult implicit for fetching TmpRow objects using plain SQL queries */
  implicit def GetResultTmpRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Long]], e4: GR[Option[Boolean]]): GR[TmpRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[Long] :: <<?[Long] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table tmp. Objects of this class serve as prototypes for rows in queries. */
  class Tmp(_tableTag: Tag) extends Table[TmpRow](_tableTag, Some("dbo"), "tmp") {
    def * = szdatayear :: szdatamonth :: cdmember :: cdpersa :: dtstrcontract :: dtendcontract :: cdmemkind :: cdcid :: cdid :: dtcreate :: cdsrvmember :: icumpv :: icumuppv :: idstatus :: szfullname :: cdpersg :: cdsponser :: cdzip :: szfulladdr :: uid :: cdpergp :: szdetail :: szmobile :: isflag3 :: cdpaymethod :: issuspend :: cdbank :: cdbranch :: szaccountno :: szholder :: szbank :: cdpid :: HNil
    
    /** Database column szDataYear DBType(char), Length(4,false) */
    val szdatayear: Column[String] = column[String]("szDataYear", O.Length(4,varying=false))
    /** Database column szDataMonth DBType(char), Length(2,false) */
    val szdatamonth: Column[String] = column[String]("szDataMonth", O.Length(2,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[Option[String]] = column[Option[String]]("cdPerSa", O.Length(4,varying=false))
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column cdSrvMember DBType(char), Length(10,false) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false))
    /** Database column iCumPv DBType(bigint) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv")
    /** Database column iCumUpPv DBType(bigint) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv")
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false))
    /** Database column szFullName DBType(nvarchar), Length(120,true) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[Option[String]] = column[Option[String]]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(10,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(10,varying=false))
    /** Database column szFullAddr DBType(nvarchar), Length(256,true) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(256,varying=true))
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[Option[String]] = column[Option[String]]("cdPerGp", O.Length(2,varying=false))
    /** Database column szDetail DBType(nvarchar), Length(128,true) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=true))
    /** Database column szMobile DBType(nvarchar), Length(128,true) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=true))
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column isSuspend DBType(bit) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend")
    /** Database column cdBank DBType(nvarchar), Length(60,true) */
    val cdbank: Column[Option[String]] = column[Option[String]]("cdBank", O.Length(60,varying=true))
    /** Database column cdBranch DBType(nvarchar), Length(60,true) */
    val cdbranch: Column[Option[String]] = column[Option[String]]("cdBranch", O.Length(60,varying=true))
    /** Database column szAccountNo DBType(nvarchar), Length(30,true) */
    val szaccountno: Column[Option[String]] = column[Option[String]]("szAccountNo", O.Length(30,varying=true))
    /** Database column szHolder DBType(nvarchar), Length(120,true) */
    val szholder: Column[Option[String]] = column[Option[String]]("szHolder", O.Length(120,varying=true))
    /** Database column szBank DBType(nvarchar), Length(128,true) */
    val szbank: Column[Option[String]] = column[Option[String]]("szBank", O.Length(128,varying=true))
    /** Database column cdPID DBType(varchar), Length(20,true) */
    val cdpid: Column[Option[String]] = column[Option[String]]("cdPID", O.Length(20,varying=true))
  }
  /** Collection-like TableQuery object for table Tmp */
  lazy val Tmp = new TableQuery(tag => new Tmp(tag))
  
  /** Entity class storing rows of table Tmpa00011220071114
   *  @param cdmember Database column cdmember DBType(char), Length(10,false)
   *  @param dtenddate Database column dtEndDate DBType(datetime) */
  case class Tmpa00011220071114Row(cdmember: String, dtenddate: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching Tmpa00011220071114Row objects using plain SQL queries */
  implicit def GetResultTmpa00011220071114Row(implicit e0: GR[String], e1: GR[Option[java.sql.Timestamp]]): GR[Tmpa00011220071114Row] = GR{
    prs => import prs._
    Tmpa00011220071114Row.tupled((<<[String], <<?[java.sql.Timestamp]))
  }
  /** Table description of table tmpA0001_12_20071114. Objects of this class serve as prototypes for rows in queries. */
  class Tmpa00011220071114(_tableTag: Tag) extends Table[Tmpa00011220071114Row](_tableTag, Some("dbo"), "tmpA0001_12_20071114") {
    def * = (cdmember, dtenddate) <> (Tmpa00011220071114Row.tupled, Tmpa00011220071114Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdmember.?, dtenddate).shaped.<>({r=>import r._; _1.map(_=> Tmpa00011220071114Row.tupled((_1.get, _2)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdmember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdmember", O.Length(10,varying=false))
    /** Database column dtEndDate DBType(datetime) */
    val dtenddate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndDate")
  }
  /** Collection-like TableQuery object for table Tmpa00011220071114 */
  lazy val Tmpa00011220071114 = new TableQuery(tag => new Tmpa00011220071114(tag))
  
  /** Entity class storing rows of table Tmpa0006
   *  @param cdmember Database column cdmember DBType(char), Length(10,false)
   *  @param cdtype Database column cdType DBType(char), Length(2,false) */
  case class Tmpa0006Row(cdmember: String, cdtype: Option[String])
  /** GetResult implicit for fetching Tmpa0006Row objects using plain SQL queries */
  implicit def GetResultTmpa0006Row(implicit e0: GR[String], e1: GR[Option[String]]): GR[Tmpa0006Row] = GR{
    prs => import prs._
    Tmpa0006Row.tupled((<<[String], <<?[String]))
  }
  /** Table description of table tmpa0006. Objects of this class serve as prototypes for rows in queries. */
  class Tmpa0006(_tableTag: Tag) extends Table[Tmpa0006Row](_tableTag, Some("dbo"), "tmpa0006") {
    def * = (cdmember, cdtype) <> (Tmpa0006Row.tupled, Tmpa0006Row.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdmember.?, cdtype).shaped.<>({r=>import r._; _1.map(_=> Tmpa0006Row.tupled((_1.get, _2)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdmember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdmember", O.Length(10,varying=false))
    /** Database column cdType DBType(char), Length(2,false) */
    val cdtype: Column[Option[String]] = column[Option[String]]("cdType", O.Length(2,varying=false))
  }
  /** Collection-like TableQuery object for table Tmpa0006 */
  lazy val Tmpa0006 = new TableQuery(tag => new Tmpa0006(tag))
  
  /** Row type of table Tmpbonusdata20111104 */
  type Tmpbonusdata20111104Row = HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[String,HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Option[String],HCons[java.sql.Timestamp,HCons[Option[String],HCons[java.sql.Timestamp,HCons[String,HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tmpbonusdata20111104Row providing default values if available in the database schema. */
  def Tmpbonusdata20111104Row(cdcenter: String, cdorderno: String, iserialno: Int, iseq: Int, szprodid: String, cdbonuscode: Option[String], szbonusyear: Option[String], szbonusmonth: Option[String], cdmember: String, cdmemberto: String, dtbusinessdate: Option[java.sql.Timestamp], cdcurrency: Option[String], ipvpoint: Int, ipvpointup: Int, ipvpointbonus: Int, iprodqty: Int, iusedqty: Int, inousedqty: Int, uidcreator: Option[String], dtcreated: java.sql.Timestamp, uidmodifier: Option[String], dtmodify: java.sql.Timestamp, cdprodkindmain: String, cdproject: Option[String]): Tmpbonusdata20111104Row = {
    cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreated :: uidmodifier :: dtmodify :: cdprodkindmain :: cdproject :: HNil
  }
  /** GetResult implicit for fetching Tmpbonusdata20111104Row objects using plain SQL queries */
  implicit def GetResultTmpbonusdata20111104Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[java.sql.Timestamp]): GR[Tmpbonusdata20111104Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<?[String] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[java.sql.Timestamp] :: <<[String] :: <<?[String] :: HNil
  }
  /** Table description of table tmpBonusData_20111104. Objects of this class serve as prototypes for rows in queries. */
  class Tmpbonusdata20111104(_tableTag: Tag) extends Table[Tmpbonusdata20111104Row](_tableTag, Some("dbo"), "tmpBonusData_20111104") {
    def * = cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreated :: uidmodifier :: dtmodify :: cdprodkindmain :: cdproject :: HNil
    
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(varchar), Length(8,true) */
    val szbonusyear: Column[Option[String]] = column[Option[String]]("szBonusYear", O.Length(8,varying=true))
    /** Database column szBonusMonth DBType(varchar), Length(4,true) */
    val szbonusmonth: Column[Option[String]] = column[Option[String]]("szBonusMonth", O.Length(4,varying=true))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[String] = column[String]("cdMemberTo", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointBonus DBType(int) */
    val ipvpointbonus: Column[Int] = column[Int]("iPvPointBonus")
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column iUsedQty DBType(int) */
    val iusedqty: Column[Int] = column[Int]("iUsedQty")
    /** Database column iNoUsedQty DBType(int) */
    val inousedqty: Column[Int] = column[Int]("iNoUsedQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreated DBType(datetime) */
    val dtcreated: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreated")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtModify")
    /** Database column cdProdkindMain DBType(varchar), Length(3,true) */
    val cdprodkindmain: Column[String] = column[String]("cdProdkindMain", O.Length(3,varying=true))
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
  }
  /** Collection-like TableQuery object for table Tmpbonusdata20111104 */
  lazy val Tmpbonusdata20111104 = new TableQuery(tag => new Tmpbonusdata20111104(tag))
  
  /** Row type of table Tmpbonusdata201111042 */
  type Tmpbonusdata201111042Row = HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[String,HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Option[String],HCons[java.sql.Timestamp,HCons[Option[String],HCons[java.sql.Timestamp,HCons[String,HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tmpbonusdata201111042Row providing default values if available in the database schema. */
  def Tmpbonusdata201111042Row(cdcenter: String, cdorderno: String, iserialno: Int, iseq: Int, szprodid: String, cdbonuscode: Option[String], szbonusyear: Option[String], szbonusmonth: Option[String], cdmember: String, cdmemberto: String, dtbusinessdate: Option[java.sql.Timestamp], cdcurrency: Option[String], ipvpoint: Int, ipvpointup: Int, ipvpointbonus: Int, iprodqty: Int, iusedqty: Int, inousedqty: Int, uidcreator: Option[String], dtcreated: java.sql.Timestamp, uidmodifier: Option[String], dtmodify: java.sql.Timestamp, cdprodkindmain: String, cdproject: Option[String]): Tmpbonusdata201111042Row = {
    cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreated :: uidmodifier :: dtmodify :: cdprodkindmain :: cdproject :: HNil
  }
  /** GetResult implicit for fetching Tmpbonusdata201111042Row objects using plain SQL queries */
  implicit def GetResultTmpbonusdata201111042Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[java.sql.Timestamp]): GR[Tmpbonusdata201111042Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<?[String] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[java.sql.Timestamp] :: <<[String] :: <<?[String] :: HNil
  }
  /** Table description of table tmpBonusData_20111104_2. Objects of this class serve as prototypes for rows in queries. */
  class Tmpbonusdata201111042(_tableTag: Tag) extends Table[Tmpbonusdata201111042Row](_tableTag, Some("dbo"), "tmpBonusData_20111104_2") {
    def * = cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreated :: uidmodifier :: dtmodify :: cdprodkindmain :: cdproject :: HNil
    
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(varchar), Length(8,true) */
    val szbonusyear: Column[Option[String]] = column[Option[String]]("szBonusYear", O.Length(8,varying=true))
    /** Database column szBonusMonth DBType(varchar), Length(4,true) */
    val szbonusmonth: Column[Option[String]] = column[Option[String]]("szBonusMonth", O.Length(4,varying=true))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[String] = column[String]("cdMemberTo", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointBonus DBType(int) */
    val ipvpointbonus: Column[Int] = column[Int]("iPvPointBonus")
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column iUsedQty DBType(int) */
    val iusedqty: Column[Int] = column[Int]("iUsedQty")
    /** Database column iNoUsedQty DBType(int) */
    val inousedqty: Column[Int] = column[Int]("iNoUsedQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreated DBType(datetime) */
    val dtcreated: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreated")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtModify")
    /** Database column cdProdkindMain DBType(varchar), Length(3,true) */
    val cdprodkindmain: Column[String] = column[String]("cdProdkindMain", O.Length(3,varying=true))
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
  }
  /** Collection-like TableQuery object for table Tmpbonusdata201111042 */
  lazy val Tmpbonusdata201111042 = new TableQuery(tag => new Tmpbonusdata201111042(tag))
  
  /** Row type of table Tmpbonusdata20111107 */
  type Tmpbonusdata20111107Row = HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[String,HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Option[String],HCons[java.sql.Timestamp,HCons[Option[String],HCons[java.sql.Timestamp,HCons[String,HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tmpbonusdata20111107Row providing default values if available in the database schema. */
  def Tmpbonusdata20111107Row(cdcenter: String, cdorderno: String, iserialno: Int, iseq: Int, szprodid: String, cdbonuscode: Option[String], szbonusyear: Option[String], szbonusmonth: Option[String], cdmember: String, cdmemberto: String, dtbusinessdate: Option[java.sql.Timestamp], cdcurrency: Option[String], ipvpoint: Int, ipvpointup: Int, ipvpointbonus: Int, iprodqty: Int, iusedqty: Int, inousedqty: Int, uidcreator: Option[String], dtcreated: java.sql.Timestamp, uidmodifier: Option[String], dtmodify: java.sql.Timestamp, cdprodkindmain: String, cdproject: Option[String]): Tmpbonusdata20111107Row = {
    cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreated :: uidmodifier :: dtmodify :: cdprodkindmain :: cdproject :: HNil
  }
  /** GetResult implicit for fetching Tmpbonusdata20111107Row objects using plain SQL queries */
  implicit def GetResultTmpbonusdata20111107Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[java.sql.Timestamp]): GR[Tmpbonusdata20111107Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<?[String] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[java.sql.Timestamp] :: <<[String] :: <<?[String] :: HNil
  }
  /** Table description of table tmpBonusData_20111107. Objects of this class serve as prototypes for rows in queries. */
  class Tmpbonusdata20111107(_tableTag: Tag) extends Table[Tmpbonusdata20111107Row](_tableTag, Some("dbo"), "tmpBonusData_20111107") {
    def * = cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreated :: uidmodifier :: dtmodify :: cdprodkindmain :: cdproject :: HNil
    
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(varchar), Length(8,true) */
    val szbonusyear: Column[Option[String]] = column[Option[String]]("szBonusYear", O.Length(8,varying=true))
    /** Database column szBonusMonth DBType(varchar), Length(4,true) */
    val szbonusmonth: Column[Option[String]] = column[Option[String]]("szBonusMonth", O.Length(4,varying=true))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[String] = column[String]("cdMemberTo", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointBonus DBType(int) */
    val ipvpointbonus: Column[Int] = column[Int]("iPvPointBonus")
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column iUsedQty DBType(int) */
    val iusedqty: Column[Int] = column[Int]("iUsedQty")
    /** Database column iNoUsedQty DBType(int) */
    val inousedqty: Column[Int] = column[Int]("iNoUsedQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreated DBType(datetime) */
    val dtcreated: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreated")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtModify")
    /** Database column cdProdkindMain DBType(varchar), Length(3,true) */
    val cdprodkindmain: Column[String] = column[String]("cdProdkindMain", O.Length(3,varying=true))
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
  }
  /** Collection-like TableQuery object for table Tmpbonusdata20111107 */
  lazy val Tmpbonusdata20111107 = new TableQuery(tag => new Tmpbonusdata20111107(tag))
  
  /** Row type of table Tmpbonusdata201111072 */
  type Tmpbonusdata201111072Row = HCons[String,HCons[String,HCons[Int,HCons[Int,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[String,HCons[String,HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Int,HCons[Option[String],HCons[java.sql.Timestamp,HCons[Option[String],HCons[java.sql.Timestamp,HCons[String,HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tmpbonusdata201111072Row providing default values if available in the database schema. */
  def Tmpbonusdata201111072Row(cdcenter: String, cdorderno: String, iserialno: Int, iseq: Int, szprodid: String, cdbonuscode: Option[String], szbonusyear: Option[String], szbonusmonth: Option[String], cdmember: String, cdmemberto: String, dtbusinessdate: Option[java.sql.Timestamp], cdcurrency: Option[String], ipvpoint: Int, ipvpointup: Int, ipvpointbonus: Int, iprodqty: Int, iusedqty: Int, inousedqty: Int, uidcreator: Option[String], dtcreated: java.sql.Timestamp, uidmodifier: Option[String], dtmodify: java.sql.Timestamp, cdprodkindmain: String, cdproject: Option[String]): Tmpbonusdata201111072Row = {
    cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreated :: uidmodifier :: dtmodify :: cdprodkindmain :: cdproject :: HNil
  }
  /** GetResult implicit for fetching Tmpbonusdata201111072Row objects using plain SQL queries */
  implicit def GetResultTmpbonusdata201111072Row(implicit e0: GR[String], e1: GR[Int], e2: GR[Option[String]], e3: GR[Option[java.sql.Timestamp]], e4: GR[java.sql.Timestamp]): GR[Tmpbonusdata201111072Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[Int] :: <<[Int] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<[String] :: <<[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<[Int] :: <<?[String] :: <<[java.sql.Timestamp] :: <<?[String] :: <<[java.sql.Timestamp] :: <<[String] :: <<?[String] :: HNil
  }
  /** Table description of table tmpBonusData_20111107_2. Objects of this class serve as prototypes for rows in queries. */
  class Tmpbonusdata201111072(_tableTag: Tag) extends Table[Tmpbonusdata201111072Row](_tableTag, Some("dbo"), "tmpBonusData_20111107_2") {
    def * = cdcenter :: cdorderno :: iserialno :: iseq :: szprodid :: cdbonuscode :: szbonusyear :: szbonusmonth :: cdmember :: cdmemberto :: dtbusinessdate :: cdcurrency :: ipvpoint :: ipvpointup :: ipvpointbonus :: iprodqty :: iusedqty :: inousedqty :: uidcreator :: dtcreated :: uidmodifier :: dtmodify :: cdprodkindmain :: cdproject :: HNil
    
    /** Database column cdCenter DBType(char), Length(4,false) */
    val cdcenter: Column[String] = column[String]("cdCenter", O.Length(4,varying=false))
    /** Database column cdOrderNo DBType(char), Length(14,false) */
    val cdorderno: Column[String] = column[String]("cdOrderNo", O.Length(14,varying=false))
    /** Database column iSerialNo DBType(int) */
    val iserialno: Column[Int] = column[Int]("iSerialNo")
    /** Database column iSeq DBType(int) */
    val iseq: Column[Int] = column[Int]("iSeq")
    /** Database column szProdID DBType(char), Length(15,false) */
    val szprodid: Column[String] = column[String]("szProdID", O.Length(15,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[Option[String]] = column[Option[String]]("cdBonusCode", O.Length(10,varying=false))
    /** Database column szBonusYear DBType(varchar), Length(8,true) */
    val szbonusyear: Column[Option[String]] = column[Option[String]]("szBonusYear", O.Length(8,varying=true))
    /** Database column szBonusMonth DBType(varchar), Length(4,true) */
    val szbonusmonth: Column[Option[String]] = column[Option[String]]("szBonusMonth", O.Length(4,varying=true))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdMemberTo DBType(char), Length(10,false) */
    val cdmemberto: Column[String] = column[String]("cdMemberTo", O.Length(10,varying=false))
    /** Database column dtBusinessDate DBType(datetime) */
    val dtbusinessdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBusinessDate")
    /** Database column cdCurrency DBType(char), Length(4,false) */
    val cdcurrency: Column[Option[String]] = column[Option[String]]("cdCurrency", O.Length(4,varying=false))
    /** Database column iPvPoint DBType(int) */
    val ipvpoint: Column[Int] = column[Int]("iPvPoint")
    /** Database column iPvPointUp DBType(int) */
    val ipvpointup: Column[Int] = column[Int]("iPvPointUp")
    /** Database column iPvPointBonus DBType(int) */
    val ipvpointbonus: Column[Int] = column[Int]("iPvPointBonus")
    /** Database column iProdQty DBType(int) */
    val iprodqty: Column[Int] = column[Int]("iProdQty")
    /** Database column iUsedQty DBType(int) */
    val iusedqty: Column[Int] = column[Int]("iUsedQty")
    /** Database column iNoUsedQty DBType(int) */
    val inousedqty: Column[Int] = column[Int]("iNoUsedQty")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreated DBType(datetime) */
    val dtcreated: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreated")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtModify")
    /** Database column cdProdkindMain DBType(varchar), Length(3,true) */
    val cdprodkindmain: Column[String] = column[String]("cdProdkindMain", O.Length(3,varying=true))
    /** Database column cdProject DBType(char), Length(15,false) */
    val cdproject: Column[Option[String]] = column[Option[String]]("cdProject", O.Length(15,varying=false))
  }
  /** Collection-like TableQuery object for table Tmpbonusdata201111072 */
  lazy val Tmpbonusdata201111072 = new TableQuery(tag => new Tmpbonusdata201111072(tag))
  
  /** Row type of table Tmpmember20071114 */
  type Tmpmember20071114Row = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[Long],HCons[Option[Long],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Int],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Boolean],HCons[Option[Int],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Blob],HCons[Option[Int],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for Tmpmember20071114Row providing default values if available in the database schema. */
  def Tmpmember20071114Row(uid: String, cdmember: String, cdapplyarea: String, cdpersa: String, cdpersb: String, cdpergp: String, cdpersg: String, cdsponser: Option[String], idservice: Option[String], cdseller: Option[String], cdspecial: Option[String], cdagency: Option[String], cdsuper: Option[String], cdsupervise: Option[String], cdsrvmember: Option[String], igeneration: Option[Int], cdcountry: Option[String], cdmemkind: Option[String], szfullname: Option[String], szename: Option[String], cdsex: Option[String], dtbirthday: Option[java.sql.Timestamp], cdcid: Option[String], uidcid: Option[String], cdsub0003: Option[String], cdid: Option[String], sz0005name: Option[String], sz0005cdid: Option[String], cdnotify: Option[String], cdsub0006: Option[String], szfulladdr: Option[String], szlocal: Option[String], cdsub0007: Option[String], szdetail: Option[String], szteldetail: Option[String], szfax: Option[String], szmobile: Option[String], szmail: Option[String], cdlanguage: Option[String], idstatus: Option[String], dtstractive: Option[java.sql.Timestamp], dtendactive: Option[java.sql.Timestamp], dtstrcontract: Option[java.sql.Timestamp], dtendcontract: Option[java.sql.Timestamp], icumpv: Option[Long], icumuppv: Option[Long], icurrpv: Option[Int], icurruppv: Option[Int], imovepv: Option[Int], ichgsponser: Option[Int], ichgbusiness: Option[Int], isextend: Option[Boolean], ismail: Option[Boolean], ispaper: Option[Boolean], szpaperbe: Option[String], issuspend: Option[Boolean], szsuspendbe: Option[String], isact0003: Option[Boolean], isflag1: Option[Boolean], isflag2: Option[Boolean], isflag3: Option[Boolean], isflag4: Option[Boolean], isflag5: Option[Boolean], isflag6: Option[Boolean], isflag7: Option[Boolean], isflag8: Option[Boolean], isflag9: Option[Boolean], isflag10: Option[Boolean], iscard: Option[Boolean], icardno: Option[Int], iputno: Option[Int], szmemo: Option[String], cdpaymethod: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp], byts: Option[java.sql.Blob], icardno2: Option[Int], cdcidnumber: Option[String], cdzip: Option[String], dtlastextended: Option[java.sql.Timestamp], cdidtax: Option[String]): Tmpmember20071114Row = {
    uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: HNil
  }
  /** GetResult implicit for fetching Tmpmember20071114Row objects using plain SQL queries */
  implicit def GetResultTmpmember20071114Row(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[java.sql.Timestamp]], e4: GR[Option[Long]], e5: GR[Option[Boolean]], e6: GR[Option[java.sql.Blob]]): GR[Tmpmember20071114Row] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[Long] :: <<?[Long] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Int] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Boolean] :: <<?[Int] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Blob] :: <<?[Int] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: HNil
  }
  /** Table description of table tmpMember_20071114. Objects of this class serve as prototypes for rows in queries. */
  class Tmpmember20071114(_tableTag: Tag) extends Table[Tmpmember20071114Row](_tableTag, Some("dbo"), "tmpMember_20071114") {
    def * = uid :: cdmember :: cdapplyarea :: cdpersa :: cdpersb :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: igeneration :: cdcountry :: cdmemkind :: szfullname :: szename :: cdsex :: dtbirthday :: cdcid :: uidcid :: cdsub0003 :: cdid :: sz0005name :: sz0005cdid :: cdnotify :: cdsub0006 :: szfulladdr :: szlocal :: cdsub0007 :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: cdlanguage :: idstatus :: dtstractive :: dtendactive :: dtstrcontract :: dtendcontract :: icumpv :: icumuppv :: icurrpv :: icurruppv :: imovepv :: ichgsponser :: ichgbusiness :: isextend :: ismail :: ispaper :: szpaperbe :: issuspend :: szsuspendbe :: isact0003 :: isflag1 :: isflag2 :: isflag3 :: isflag4 :: isflag5 :: isflag6 :: isflag7 :: isflag8 :: isflag9 :: isflag10 :: iscard :: icardno :: iputno :: szmemo :: cdpaymethod :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: byts :: icardno2 :: cdcidnumber :: cdzip :: dtlastextended :: cdidtax :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column cdApplyArea DBType(char), Length(4,false) */
    val cdapplyarea: Column[String] = column[String]("cdApplyArea", O.Length(4,varying=false))
    /** Database column cdPerSa DBType(char), Length(4,false) */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false))
    /** Database column cdPerSb DBType(char), Length(4,false) */
    val cdpersb: Column[String] = column[String]("cdPerSb", O.Length(4,varying=false))
    /** Database column cdPerGp DBType(char), Length(2,false) */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false))
    /** Database column cdPerSg DBType(char), Length(2,false) */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false))
    /** Database column cdSponser DBType(char), Length(10,false) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false))
    /** Database column idService DBType(char), Length(8,false) */
    val idservice: Column[Option[String]] = column[Option[String]]("idService", O.Length(8,varying=false))
    /** Database column cdSeller DBType(char), Length(10,false) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false))
    /** Database column cdSpecial DBType(char), Length(10,false) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false))
    /** Database column cdAgency DBType(char), Length(10,false) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false))
    /** Database column cdSuper DBType(char), Length(10,false) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false))
    /** Database column cdSupervise DBType(char), Length(10,false) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false))
    /** Database column cdSrvMember DBType(char), Length(10,false) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false))
    /** Database column iGeneration DBType(int) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration")
    /** Database column cdCountry DBType(char), Length(4,false) */
    val cdcountry: Column[Option[String]] = column[Option[String]]("cdCountry", O.Length(4,varying=false))
    /** Database column cdMemKind DBType(char), Length(1,false) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false))
    /** Database column szFullName DBType(nchar), Length(120,false) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=false))
    /** Database column szEName DBType(nchar), Length(120,false) */
    val szename: Column[Option[String]] = column[Option[String]]("szEName", O.Length(120,varying=false))
    /** Database column cdSex DBType(char), Length(1,false) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column uidCid DBType(uniqueidentifier), Length(36,false) */
    val uidcid: Column[Option[String]] = column[Option[String]]("uidCid", O.Length(36,varying=false))
    /** Database column cdSub0003 DBType(char), Length(2,false) */
    val cdsub0003: Column[Option[String]] = column[Option[String]]("cdSub0003", O.Length(2,varying=false))
    /** Database column cdId DBType(char), Length(20,false) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdId", O.Length(20,varying=false))
    /** Database column sz0005Name DBType(nchar), Length(120,false) */
    val sz0005name: Column[Option[String]] = column[Option[String]]("sz0005Name", O.Length(120,varying=false))
    /** Database column sz0005cdId DBType(char), Length(10,false) */
    val sz0005cdid: Column[Option[String]] = column[Option[String]]("sz0005cdId", O.Length(10,varying=false))
    /** Database column cdNotify DBType(char), Length(2,false) */
    val cdnotify: Column[Option[String]] = column[Option[String]]("cdNotify", O.Length(2,varying=false))
    /** Database column cdSub0006 DBType(char), Length(2,false) */
    val cdsub0006: Column[Option[String]] = column[Option[String]]("cdSub0006", O.Length(2,varying=false))
    /** Database column szFullAddr DBType(nchar), Length(128,false) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=false))
    /** Database column szLocal DBType(nchar), Length(128,false) */
    val szlocal: Column[Option[String]] = column[Option[String]]("szLocal", O.Length(128,varying=false))
    /** Database column cdSub0007 DBType(char), Length(2,false) */
    val cdsub0007: Column[Option[String]] = column[Option[String]]("cdSub0007", O.Length(2,varying=false))
    /** Database column szDetail DBType(nchar), Length(128,false) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=false))
    /** Database column szTelDetail DBType(nchar), Length(10,false) */
    val szteldetail: Column[Option[String]] = column[Option[String]]("szTelDetail", O.Length(10,varying=false))
    /** Database column szFax DBType(nchar), Length(128,false) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(128,varying=false))
    /** Database column szMobile DBType(nchar), Length(128,false) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=false))
    /** Database column szMail DBType(nchar), Length(128,false) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=false))
    /** Database column cdLanguage DBType(char), Length(10,false) */
    val cdlanguage: Column[Option[String]] = column[Option[String]]("cdLanguage", O.Length(10,varying=false))
    /** Database column idStatus DBType(char), Length(1,false) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false))
    /** Database column dtStrActive DBType(datetime) */
    val dtstractive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrActive")
    /** Database column dtEndActive DBType(datetime) */
    val dtendactive: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndActive")
    /** Database column dtStrContract DBType(datetime) */
    val dtstrcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtStrContract")
    /** Database column dtEndContract DBType(datetime) */
    val dtendcontract: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEndContract")
    /** Database column iCumPv DBType(bigint) */
    val icumpv: Column[Option[Long]] = column[Option[Long]]("iCumPv")
    /** Database column iCumUpPv DBType(bigint) */
    val icumuppv: Column[Option[Long]] = column[Option[Long]]("iCumUpPv")
    /** Database column iCurrPv DBType(int) */
    val icurrpv: Column[Option[Int]] = column[Option[Int]]("iCurrPv")
    /** Database column iCurrUpPv DBType(int) */
    val icurruppv: Column[Option[Int]] = column[Option[Int]]("iCurrUpPv")
    /** Database column iMovePv DBType(int) */
    val imovepv: Column[Option[Int]] = column[Option[Int]]("iMovePv")
    /** Database column iChgSponser DBType(int) */
    val ichgsponser: Column[Option[Int]] = column[Option[Int]]("iChgSponser")
    /** Database column iChgBusiness DBType(int) */
    val ichgbusiness: Column[Option[Int]] = column[Option[Int]]("iChgBusiness")
    /** Database column isExtend DBType(bit) */
    val isextend: Column[Option[Boolean]] = column[Option[Boolean]]("isExtend")
    /** Database column isMail DBType(bit) */
    val ismail: Column[Option[Boolean]] = column[Option[Boolean]]("isMail")
    /** Database column isPaper DBType(bit) */
    val ispaper: Column[Option[Boolean]] = column[Option[Boolean]]("isPaper")
    /** Database column szPaperBe DBType(nchar), Length(128,false) */
    val szpaperbe: Column[Option[String]] = column[Option[String]]("szPaperBe", O.Length(128,varying=false))
    /** Database column isSuspend DBType(bit) */
    val issuspend: Column[Option[Boolean]] = column[Option[Boolean]]("isSuspend")
    /** Database column szSuspendBe DBType(nchar), Length(128,false) */
    val szsuspendbe: Column[Option[String]] = column[Option[String]]("szSuspendBe", O.Length(128,varying=false))
    /** Database column isAct0003 DBType(bit) */
    val isact0003: Column[Option[Boolean]] = column[Option[Boolean]]("isAct0003")
    /** Database column isFlag1 DBType(bit) */
    val isflag1: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag1")
    /** Database column isFlag2 DBType(bit) */
    val isflag2: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag2")
    /** Database column isFlag3 DBType(bit) */
    val isflag3: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag3")
    /** Database column isFlag4 DBType(bit) */
    val isflag4: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag4")
    /** Database column isFlag5 DBType(bit) */
    val isflag5: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag5")
    /** Database column isFlag6 DBType(bit) */
    val isflag6: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag6")
    /** Database column isFlag7 DBType(bit) */
    val isflag7: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag7")
    /** Database column isFlag8 DBType(bit) */
    val isflag8: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag8")
    /** Database column isFlag9 DBType(bit) */
    val isflag9: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag9")
    /** Database column isFlag10 DBType(bit) */
    val isflag10: Column[Option[Boolean]] = column[Option[Boolean]]("isFlag10")
    /** Database column isCard DBType(bit) */
    val iscard: Column[Option[Boolean]] = column[Option[Boolean]]("isCard")
    /** Database column iCardNo DBType(int) */
    val icardno: Column[Option[Int]] = column[Option[Int]]("iCardNo")
    /** Database column iPutNo DBType(int) */
    val iputno: Column[Option[Int]] = column[Option[Int]]("iPutNo")
    /** Database column szMemo DBType(nchar), Length(256,false) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(256,varying=false))
    /** Database column cdPayMethod DBType(char), Length(1,false) */
    val cdpaymethod: Column[Option[String]] = column[Option[String]]("cdPayMethod", O.Length(1,varying=false))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column byTs DBType(timestamp) */
    val byts: Column[Option[java.sql.Blob]] = column[Option[java.sql.Blob]]("byTs")
    /** Database column iCardNo2 DBType(int) */
    val icardno2: Column[Option[Int]] = column[Option[Int]]("iCardNo2")
    /** Database column cdCidNumber DBType(char), Length(10,false) */
    val cdcidnumber: Column[Option[String]] = column[Option[String]]("cdCidNumber", O.Length(10,varying=false))
    /** Database column cdZip DBType(char), Length(6,false) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(6,varying=false))
    /** Database column dtLastExtended DBType(datetime) */
    val dtlastextended: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtLastExtended")
    /** Database column cdIDTax DBType(char), Length(10,false) */
    val cdidtax: Column[Option[String]] = column[Option[String]]("cdIDTax", O.Length(10,varying=false))
  }
  /** Collection-like TableQuery object for table Tmpmember20071114 */
  lazy val Tmpmember20071114 = new TableQuery(tag => new Tmpmember20071114(tag))
  
  /** Entity class storing rows of table Tmptest
   *  @param igeneration Database column iGeneration DBType(int)
   *  @param ivalue Database column iValue DBType(int) */
  case class TmptestRow(igeneration: Option[Int], ivalue: Option[Int])
  /** GetResult implicit for fetching TmptestRow objects using plain SQL queries */
  implicit def GetResultTmptestRow(implicit e0: GR[Option[Int]]): GR[TmptestRow] = GR{
    prs => import prs._
    TmptestRow.tupled((<<?[Int], <<?[Int]))
  }
  /** Table description of table tmpTest. Objects of this class serve as prototypes for rows in queries. */
  class Tmptest(_tableTag: Tag) extends Table[TmptestRow](_tableTag, Some("dbo"), "tmpTest") {
    def * = (igeneration, ivalue) <> (TmptestRow.tupled, TmptestRow.unapply)
    
    /** Database column iGeneration DBType(int) */
    val igeneration: Column[Option[Int]] = column[Option[Int]]("iGeneration")
    /** Database column iValue DBType(int) */
    val ivalue: Column[Option[Int]] = column[Option[Int]]("iValue")
  }
  /** Collection-like TableQuery object for table Tmptest */
  lazy val Tmptest = new TableQuery(tag => new Tmptest(tag))
  
  /** Entity class storing rows of table TracerOfCreatingOrder
   *  @param createdByUserUid Database column created_by_user_uid DBType(uniqueidentifier), Length(36,false)
   *  @param orderNo Database column order_no DBType(varchar), Length(50,true) */
  case class TracerOfCreatingOrderRow(createdByUserUid: String, orderNo: String)
  /** GetResult implicit for fetching TracerOfCreatingOrderRow objects using plain SQL queries */
  implicit def GetResultTracerOfCreatingOrderRow(implicit e0: GR[String]): GR[TracerOfCreatingOrderRow] = GR{
    prs => import prs._
    TracerOfCreatingOrderRow.tupled((<<[String], <<[String]))
  }
  /** Table description of table tracer_of_creating_order. Objects of this class serve as prototypes for rows in queries. */
  class TracerOfCreatingOrder(_tableTag: Tag) extends Table[TracerOfCreatingOrderRow](_tableTag, Some("dbo"), "tracer_of_creating_order") {
    def * = (createdByUserUid, orderNo) <> (TracerOfCreatingOrderRow.tupled, TracerOfCreatingOrderRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (createdByUserUid.?, orderNo.?).shaped.<>({r=>import r._; _1.map(_=> TracerOfCreatingOrderRow.tupled((_1.get, _2.get)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column created_by_user_uid DBType(uniqueidentifier), Length(36,false) */
    val createdByUserUid: Column[String] = column[String]("created_by_user_uid", O.Length(36,varying=false))
    /** Database column order_no DBType(varchar), Length(50,true) */
    val orderNo: Column[String] = column[String]("order_no", O.Length(50,varying=true))
  }
  /** Collection-like TableQuery object for table TracerOfCreatingOrder */
  lazy val TracerOfCreatingOrder = new TableQuery(tag => new TracerOfCreatingOrder(tag))
  
  /** Entity class storing rows of table Webbonusreports
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdbonuscode Database column cdBonusCode DBType(char), Length(10,false)
   *  @param isvalid Database column isValid DBType(bit), Default(Some(true))
   *  @param isdone Database column isDone DBType(bit), Default(Some(false))
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param dtmodify Database column dtModify DBType(datetime) */
  case class WebbonusreportsRow(uid: Option[String], cdbonuscode: String, isvalid: Option[Boolean] = Some(true), isdone: Option[Boolean] = Some(false), dtcreate: Option[java.sql.Timestamp], dtmodify: Option[java.sql.Timestamp])
  /** GetResult implicit for fetching WebbonusreportsRow objects using plain SQL queries */
  implicit def GetResultWebbonusreportsRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Option[Boolean]], e3: GR[Option[java.sql.Timestamp]]): GR[WebbonusreportsRow] = GR{
    prs => import prs._
    WebbonusreportsRow.tupled((<<?[String], <<[String], <<?[Boolean], <<?[Boolean], <<?[java.sql.Timestamp], <<?[java.sql.Timestamp]))
  }
  /** Table description of table webBonusReports. Objects of this class serve as prototypes for rows in queries. */
  class Webbonusreports(_tableTag: Tag) extends Table[WebbonusreportsRow](_tableTag, Some("dbo"), "webBonusReports") {
    def * = (uid, cdbonuscode, isvalid, isdone, dtcreate, dtmodify) <> (WebbonusreportsRow.tupled, WebbonusreportsRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid, cdbonuscode.?, isvalid, isdone, dtcreate, dtmodify).shaped.<>({r=>import r._; _2.map(_=> WebbonusreportsRow.tupled((_1, _2.get, _3, _4, _5, _6)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdBonusCode DBType(char), Length(10,false) */
    val cdbonuscode: Column[String] = column[String]("cdBonusCode", O.Length(10,varying=false))
    /** Database column isValid DBType(bit), Default(Some(true)) */
    val isvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isValid", O.Default(Some(true)))
    /** Database column isDone DBType(bit), Default(Some(false)) */
    val isdone: Column[Option[Boolean]] = column[Option[Boolean]]("isDone", O.Default(Some(false)))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
  }
  /** Collection-like TableQuery object for table Webbonusreports */
  lazy val Webbonusreports = new TableQuery(tag => new Webbonusreports(tag))
  
  /** Row type of table Webmember */
  type WebmemberRow = HCons[String,HCons[String,HCons[String,HCons[String,HCons[String,HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Boolean],HCons[Option[Boolean],HCons[java.sql.Timestamp,HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HNil]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for WebmemberRow providing default values if available in the database schema. */
  def WebmemberRow(uid: String, cdmember: String = "", cdpersa: String = "", cdpergp: String = "", cdpersg: String = "", cdsponser: Option[String] = Some(""), idservice: Option[String] = Some(""), cdseller: Option[String] = Some("9999999999"), cdspecial: Option[String] = Some("9999999999"), cdagency: Option[String] = Some("9999999999"), cdsuper: Option[String] = Some("9999999999"), cdsupervise: Option[String] = Some("9999999999"), cdsrvmember: Option[String] = Some("9999999999"), cdmemkind: Option[String] = Some(""), szfullname: Option[String] = Some(""), cdsex: Option[String] = Some(""), dtbirthday: Option[java.sql.Timestamp], cdcid: Option[String], szfulladdr: Option[String] = Some(""), szdetail: Option[String] = Some(""), szteldetail: Option[String] = Some(""), szfax: Option[String] = Some(""), szmobile: Option[String] = Some(""), szmail: Option[String] = Some(""), idstatus: Option[String] = Some("1"), cdzip: Option[String] = Some(""), isvalid: Option[Boolean] = Some(true), isdone: Option[Boolean] = Some(false), dtcreate: java.sql.Timestamp, uidcreator: Option[String], dtmodify: Option[java.sql.Timestamp], uidmodifier: Option[String], szmemo: Option[String] = Some(""), cdid: Option[String]): WebmemberRow = {
    uid :: cdmember :: cdpersa :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: cdmemkind :: szfullname :: cdsex :: dtbirthday :: cdcid :: szfulladdr :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: idstatus :: cdzip :: isvalid :: isdone :: dtcreate :: uidcreator :: dtmodify :: uidmodifier :: szmemo :: cdid :: HNil
  }
  /** GetResult implicit for fetching WebmemberRow objects using plain SQL queries */
  implicit def GetResultWebmemberRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[java.sql.Timestamp]], e3: GR[Option[Boolean]], e4: GR[java.sql.Timestamp]): GR[WebmemberRow] = GR{
    prs => import prs._
    <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Boolean] :: <<?[Boolean] :: <<[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: HNil
  }
  /** Table description of table webMember. Objects of this class serve as prototypes for rows in queries. */
  class Webmember(_tableTag: Tag) extends Table[WebmemberRow](_tableTag, Some("dbo"), "webMember") {
    def * = uid :: cdmember :: cdpersa :: cdpergp :: cdpersg :: cdsponser :: idservice :: cdseller :: cdspecial :: cdagency :: cdsuper :: cdsupervise :: cdsrvmember :: cdmemkind :: szfullname :: cdsex :: dtbirthday :: cdcid :: szfulladdr :: szdetail :: szteldetail :: szfax :: szmobile :: szmail :: idstatus :: cdzip :: isvalid :: isdone :: dtcreate :: uidcreator :: dtmodify :: uidmodifier :: szmemo :: cdid :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false), Default() */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false), O.Default(""))
    /** Database column cdPerSa DBType(char), Length(4,false), Default() */
    val cdpersa: Column[String] = column[String]("cdPerSa", O.Length(4,varying=false), O.Default(""))
    /** Database column cdPerGp DBType(char), Length(2,false), Default() */
    val cdpergp: Column[String] = column[String]("cdPerGp", O.Length(2,varying=false), O.Default(""))
    /** Database column cdPerSg DBType(char), Length(2,false), Default() */
    val cdpersg: Column[String] = column[String]("cdPerSg", O.Length(2,varying=false), O.Default(""))
    /** Database column cdSponser DBType(char), Length(10,false), Default(Some()) */
    val cdsponser: Column[Option[String]] = column[Option[String]]("cdSponser", O.Length(10,varying=false), O.Default(Some("")))
    /** Database column idService DBType(char), Length(8,false), Default(Some()) */
    val idservice: Column[Option[String]] = column[Option[String]]("idService", O.Length(8,varying=false), O.Default(Some("")))
    /** Database column cdSeller DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdseller: Column[Option[String]] = column[Option[String]]("cdSeller", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSpecial DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdspecial: Column[Option[String]] = column[Option[String]]("cdSpecial", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdAgency DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdagency: Column[Option[String]] = column[Option[String]]("cdAgency", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSuper DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsuper: Column[Option[String]] = column[Option[String]]("cdSuper", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSupervise DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsupervise: Column[Option[String]] = column[Option[String]]("cdSupervise", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdSrvMember DBType(char), Length(10,false), Default(Some(9999999999)) */
    val cdsrvmember: Column[Option[String]] = column[Option[String]]("cdSrvMember", O.Length(10,varying=false), O.Default(Some("9999999999")))
    /** Database column cdMemKind DBType(char), Length(1,false), Default(Some()) */
    val cdmemkind: Column[Option[String]] = column[Option[String]]("cdMemKind", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column szFullName DBType(nvarchar), Length(120,true), Default(Some()) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true), O.Default(Some("")))
    /** Database column cdSex DBType(char), Length(1,false), Default(Some()) */
    val cdsex: Column[Option[String]] = column[Option[String]]("cdSex", O.Length(1,varying=false), O.Default(Some("")))
    /** Database column dtBirthday DBType(datetime) */
    val dtbirthday: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBirthday")
    /** Database column cdCid DBType(char), Length(2,false) */
    val cdcid: Column[Option[String]] = column[Option[String]]("cdCid", O.Length(2,varying=false))
    /** Database column szFullAddr DBType(nvarchar), Length(128,true), Default(Some()) */
    val szfulladdr: Column[Option[String]] = column[Option[String]]("szFullAddr", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szDetail DBType(nvarchar), Length(128,true), Default(Some()) */
    val szdetail: Column[Option[String]] = column[Option[String]]("szDetail", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szTelDetail DBType(nvarchar), Length(10,true), Default(Some()) */
    val szteldetail: Column[Option[String]] = column[Option[String]]("szTelDetail", O.Length(10,varying=true), O.Default(Some("")))
    /** Database column szFax DBType(nvarchar), Length(128,true), Default(Some()) */
    val szfax: Column[Option[String]] = column[Option[String]]("szFax", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szMobile DBType(nvarchar), Length(128,true), Default(Some()) */
    val szmobile: Column[Option[String]] = column[Option[String]]("szMobile", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column szMail DBType(nvarchar), Length(128,true), Default(Some()) */
    val szmail: Column[Option[String]] = column[Option[String]]("szMail", O.Length(128,varying=true), O.Default(Some("")))
    /** Database column idStatus DBType(char), Length(1,false), Default(Some(1)) */
    val idstatus: Column[Option[String]] = column[Option[String]]("idStatus", O.Length(1,varying=false), O.Default(Some("1")))
    /** Database column cdZip DBType(char), Length(5,false), Default(Some()) */
    val cdzip: Column[Option[String]] = column[Option[String]]("cdZip", O.Length(5,varying=false), O.Default(Some("")))
    /** Database column isValid DBType(bit), Default(Some(true)) */
    val isvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isValid", O.Default(Some(true)))
    /** Database column isDone DBType(bit), Default(Some(false)) */
    val isdone: Column[Option[Boolean]] = column[Option[Boolean]]("isDone", O.Default(Some(false)))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column szMemo DBType(nvarchar), Length(50,true), Default(Some()) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(50,varying=true), O.Default(Some("")))
    /** Database column cdID DBType(varchar), Length(20,true) */
    val cdid: Column[Option[String]] = column[Option[String]]("cdID", O.Length(20,varying=true))
  }
  /** Collection-like TableQuery object for table Webmember */
  lazy val Webmember = new TableQuery(tag => new Webmember(tag))
  
  /** Entity class storing rows of table Webproduct
   *  @param uid Database column uid DBType(uniqueidentifier), Length(36,false)
   *  @param cdprodid Database column cdProdID DBType(char), Length(15,false)
   *  @param szprodname Database column szProdName DBType(varchar), Length(120,true), Default(Some())
   *  @param isonline Database column isOnline DBType(int), Default(Some(0))
   *  @param fsaleprice Database column fSalePrice DBType(float), Default(Some(0.0))
   *  @param bonus Database column bonus DBType(float), Default(Some(0.0))
   *  @param cdunitsale Database column cdUnitSale DBType(char), Length(10,false)
   *  @param ipvpoint Database column iPvPoint DBType(int), Default(Some(0))
   *  @param isdone Database column isDone DBType(bit), Default(Some(false))
   *  @param isvalid Database column isValid DBType(bit), Default(Some(true))
   *  @param szmemo Database column szMemo DBType(nvarchar), Length(50,true)
   *  @param dtcreate Database column dtCreate DBType(datetime)
   *  @param uidcreator Database column uidCreator DBType(uniqueidentifier), Length(36,false)
   *  @param dtmodify Database column dtModify DBType(datetime)
   *  @param uidmodifier Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
  case class WebproductRow(uid: String, cdprodid: String, szprodname: Option[String] = Some(""), isonline: Option[Int] = Some(0), fsaleprice: Option[Double] = Some(0.0), bonus: Option[Double] = Some(0.0), cdunitsale: Option[String], ipvpoint: Option[Int] = Some(0), isdone: Option[Boolean] = Some(false), isvalid: Option[Boolean] = Some(true), szmemo: Option[String], dtcreate: java.sql.Timestamp, uidcreator: Option[String], dtmodify: Option[java.sql.Timestamp], uidmodifier: Option[String])
  /** GetResult implicit for fetching WebproductRow objects using plain SQL queries */
  implicit def GetResultWebproductRow(implicit e0: GR[String], e1: GR[Option[String]], e2: GR[Option[Int]], e3: GR[Option[Double]], e4: GR[Option[Boolean]], e5: GR[java.sql.Timestamp], e6: GR[Option[java.sql.Timestamp]]): GR[WebproductRow] = GR{
    prs => import prs._
    WebproductRow.tupled((<<[String], <<[String], <<?[String], <<?[Int], <<?[Double], <<?[Double], <<?[String], <<?[Int], <<?[Boolean], <<?[Boolean], <<?[String], <<[java.sql.Timestamp], <<?[String], <<?[java.sql.Timestamp], <<?[String]))
  }
  /** Table description of table webProduct. Objects of this class serve as prototypes for rows in queries. */
  class Webproduct(_tableTag: Tag) extends Table[WebproductRow](_tableTag, Some("dbo"), "webProduct") {
    def * = (uid, cdprodid, szprodname, isonline, fsaleprice, bonus, cdunitsale, ipvpoint, isdone, isvalid, szmemo, dtcreate, uidcreator, dtmodify, uidmodifier) <> (WebproductRow.tupled, WebproductRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (uid.?, cdprodid.?, szprodname, isonline, fsaleprice, bonus, cdunitsale, ipvpoint, isdone, isvalid, szmemo, dtcreate.?, uidcreator, dtmodify, uidmodifier).shaped.<>({r=>import r._; _1.map(_=> WebproductRow.tupled((_1.get, _2.get, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12.get, _13, _14, _15)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[String] = column[String]("uid", O.Length(36,varying=false))
    /** Database column cdProdID DBType(char), Length(15,false) */
    val cdprodid: Column[String] = column[String]("cdProdID", O.Length(15,varying=false))
    /** Database column szProdName DBType(varchar), Length(120,true), Default(Some()) */
    val szprodname: Column[Option[String]] = column[Option[String]]("szProdName", O.Length(120,varying=true), O.Default(Some("")))
    /** Database column isOnline DBType(int), Default(Some(0)) */
    val isonline: Column[Option[Int]] = column[Option[Int]]("isOnline", O.Default(Some(0)))
    /** Database column fSalePrice DBType(float), Default(Some(0.0)) */
    val fsaleprice: Column[Option[Double]] = column[Option[Double]]("fSalePrice", O.Default(Some(0.0)))
    /** Database column bonus DBType(float), Default(Some(0.0)) */
    val bonus: Column[Option[Double]] = column[Option[Double]]("bonus", O.Default(Some(0.0)))
    /** Database column cdUnitSale DBType(char), Length(10,false) */
    val cdunitsale: Column[Option[String]] = column[Option[String]]("cdUnitSale", O.Length(10,varying=false))
    /** Database column iPvPoint DBType(int), Default(Some(0)) */
    val ipvpoint: Column[Option[Int]] = column[Option[Int]]("iPvPoint", O.Default(Some(0)))
    /** Database column isDone DBType(bit), Default(Some(false)) */
    val isdone: Column[Option[Boolean]] = column[Option[Boolean]]("isDone", O.Default(Some(false)))
    /** Database column isValid DBType(bit), Default(Some(true)) */
    val isvalid: Column[Option[Boolean]] = column[Option[Boolean]]("isValid", O.Default(Some(true)))
    /** Database column szMemo DBType(nvarchar), Length(50,true) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(50,varying=true))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[java.sql.Timestamp] = column[java.sql.Timestamp]("dtCreate")
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    
    /** Primary key of Webproduct (database name PK_webProduct) */
    val pk = primaryKey("PK_webProduct", (cdprodid, dtcreate))
  }
  /** Collection-like TableQuery object for table Webproduct */
  lazy val Webproduct = new TableQuery(tag => new Webproduct(tag))
  
  /** Entity class storing rows of table Xxx
   *  @param cdmember Database column cdMember DBType(char), Length(10,false)
   *  @param szfullname Database column szFullName DBType(nvarchar), Length(120,true) */
  case class XxxRow(cdmember: String, szfullname: Option[String])
  /** GetResult implicit for fetching XxxRow objects using plain SQL queries */
  implicit def GetResultXxxRow(implicit e0: GR[String], e1: GR[Option[String]]): GR[XxxRow] = GR{
    prs => import prs._
    XxxRow.tupled((<<[String], <<?[String]))
  }
  /** Table description of table xxx. Objects of this class serve as prototypes for rows in queries. */
  class Xxx(_tableTag: Tag) extends Table[XxxRow](_tableTag, Some("dbo"), "xxx") {
    def * = (cdmember, szfullname) <> (XxxRow.tupled, XxxRow.unapply)
    /** Maps whole row to an option. Useful for outer joins. */
    def ? = (cdmember.?, szfullname).shaped.<>({r=>import r._; _1.map(_=> XxxRow.tupled((_1.get, _2)))}, (_:Any) =>  throw new Exception("Inserting into ? projection not supported."))
    
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[String] = column[String]("cdMember", O.Length(10,varying=false))
    /** Database column szFullName DBType(nvarchar), Length(120,true) */
    val szfullname: Column[Option[String]] = column[Option[String]]("szFullName", O.Length(120,varying=true))
  }
  /** Collection-like TableQuery object for table Xxx */
  lazy val Xxx = new TableQuery(tag => new Xxx(tag))
  
  /** Row type of table Xxxtblhandombal */
  type XxxtblhandombalRow = HCons[Option[String],HCons[String,HCons[Int,HCons[Option[Int],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for XxxtblhandombalRow providing default values if available in the database schema. */
  def XxxtblhandombalRow(uid: Option[String], cdcode: String, itype: Int, istatus: Option[Int], dtdate: Option[java.sql.Timestamp], dtbegin: Option[java.sql.Timestamp], dtend: Option[java.sql.Timestamp], uidmember: Option[String], cdmember: Option[String], szmember: Option[String], icount: Option[Int], icountt: Option[Int], funit: Option[Double], famount: Option[Double], famountb: Option[Double], famountt: Option[Double], cdordercode: Option[String], szyyyymm: Option[String], szmemo: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): XxxtblhandombalRow = {
    uid :: cdcode :: itype :: istatus :: dtdate :: dtbegin :: dtend :: uidmember :: cdmember :: szmember :: icount :: icountt :: funit :: famount :: famountb :: famountt :: cdordercode :: szyyyymm :: szmemo :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching XxxtblhandombalRow objects using plain SQL queries */
  implicit def GetResultXxxtblhandombalRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Int], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[Double]]): GR[XxxtblhandombalRow] = GR{
    prs => import prs._
    <<?[String] :: <<[String] :: <<[Int] :: <<?[Int] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table xxxtblHandOMBal. Objects of this class serve as prototypes for rows in queries. */
  class Xxxtblhandombal(_tableTag: Tag) extends Table[XxxtblhandombalRow](_tableTag, Some("dbo"), "xxxtblHandOMBal") {
    def * = uid :: cdcode :: itype :: istatus :: dtdate :: dtbegin :: dtend :: uidmember :: cdmember :: szmember :: icount :: icountt :: funit :: famount :: famountb :: famountt :: cdordercode :: szyyyymm :: szmemo :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdCode DBType(char), Length(8,false) */
    val cdcode: Column[String] = column[String]("cdCode", O.Length(8,varying=false))
    /** Database column iType DBType(int) */
    val itype: Column[Int] = column[Int]("iType")
    /** Database column iStatus DBType(int) */
    val istatus: Column[Option[Int]] = column[Option[Int]]("iStatus")
    /** Database column dtDate DBType(datetime) */
    val dtdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtDate")
    /** Database column dtBegin DBType(datetime) */
    val dtbegin: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBegin")
    /** Database column dtEnd DBType(datetime) */
    val dtend: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEnd")
    /** Database column uidMember DBType(uniqueidentifier), Length(36,false) */
    val uidmember: Column[Option[String]] = column[Option[String]]("uidMember", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szMember DBType(nvarchar), Length(100,true) */
    val szmember: Column[Option[String]] = column[Option[String]]("szMember", O.Length(100,varying=true))
    /** Database column iCount DBType(int) */
    val icount: Column[Option[Int]] = column[Option[Int]]("iCount")
    /** Database column iCountT DBType(int) */
    val icountt: Column[Option[Int]] = column[Option[Int]]("iCountT")
    /** Database column fUnit DBType(float) */
    val funit: Column[Option[Double]] = column[Option[Double]]("fUnit")
    /** Database column fAmount DBType(float) */
    val famount: Column[Option[Double]] = column[Option[Double]]("fAmount")
    /** Database column fAmountB DBType(float) */
    val famountb: Column[Option[Double]] = column[Option[Double]]("fAmountB")
    /** Database column fAmountT DBType(float) */
    val famountt: Column[Option[Double]] = column[Option[Double]]("fAmountT")
    /** Database column cdOrderCode DBType(char), Length(100,false) */
    val cdordercode: Column[Option[String]] = column[Option[String]]("cdOrderCode", O.Length(100,varying=false))
    /** Database column szYYYYMM DBType(char), Length(6,false) */
    val szyyyymm: Column[Option[String]] = column[Option[String]]("szYYYYMM", O.Length(6,varying=false))
    /** Database column szMemo DBType(nvarchar), Length(100,true) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(100,varying=true))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Xxxtblhandombal (database name PK_tblHandOMBal) */
    val pk = primaryKey("PK_tblHandOMBal", cdcode :: itype :: HNil)
  }
  /** Collection-like TableQuery object for table Xxxtblhandombal */
  lazy val Xxxtblhandombal = new TableQuery(tag => new Xxxtblhandombal(tag))
  
  /** Row type of table Xxxtblhandombald */
  type XxxtblhandombaldRow = HCons[Option[String],HCons[String,HCons[Int,HCons[Option[Int],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[Int],HCons[Option[Int],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[Double],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[String],HCons[Option[java.sql.Timestamp],HCons[Option[String],HCons[Option[java.sql.Timestamp],HNil]]]]]]]]]]]]]]]]]]]]]]]
  /** Constructor for XxxtblhandombaldRow providing default values if available in the database schema. */
  def XxxtblhandombaldRow(uid: Option[String], cdcode: String, itype: Int, istatus: Option[Int], dtdate: Option[java.sql.Timestamp], dtbegin: Option[java.sql.Timestamp], dtend: Option[java.sql.Timestamp], uidmember: Option[String], cdmember: Option[String], szmember: Option[String], icount: Option[Int], icountt: Option[Int], funit: Option[Double], famount: Option[Double], famountb: Option[Double], famountt: Option[Double], cdordercode: Option[String], szyyyymm: Option[String], szmemo: Option[String], uidcreator: Option[String], dtcreate: Option[java.sql.Timestamp], uidmodifier: Option[String], dtmodify: Option[java.sql.Timestamp]): XxxtblhandombaldRow = {
    uid :: cdcode :: itype :: istatus :: dtdate :: dtbegin :: dtend :: uidmember :: cdmember :: szmember :: icount :: icountt :: funit :: famount :: famountb :: famountt :: cdordercode :: szyyyymm :: szmemo :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
  }
  /** GetResult implicit for fetching XxxtblhandombaldRow objects using plain SQL queries */
  implicit def GetResultXxxtblhandombaldRow(implicit e0: GR[Option[String]], e1: GR[String], e2: GR[Int], e3: GR[Option[Int]], e4: GR[Option[java.sql.Timestamp]], e5: GR[Option[Double]]): GR[XxxtblhandombaldRow] = GR{
    prs => import prs._
    <<?[String] :: <<[String] :: <<[Int] :: <<?[Int] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[Int] :: <<?[Int] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[Double] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[String] :: <<?[java.sql.Timestamp] :: <<?[String] :: <<?[java.sql.Timestamp] :: HNil
  }
  /** Table description of table xxxtblHandOMBalD. Objects of this class serve as prototypes for rows in queries. */
  class Xxxtblhandombald(_tableTag: Tag) extends Table[XxxtblhandombaldRow](_tableTag, Some("dbo"), "xxxtblHandOMBalD") {
    def * = uid :: cdcode :: itype :: istatus :: dtdate :: dtbegin :: dtend :: uidmember :: cdmember :: szmember :: icount :: icountt :: funit :: famount :: famountb :: famountt :: cdordercode :: szyyyymm :: szmemo :: uidcreator :: dtcreate :: uidmodifier :: dtmodify :: HNil
    
    /** Database column uid DBType(uniqueidentifier), Length(36,false) */
    val uid: Column[Option[String]] = column[Option[String]]("uid", O.Length(36,varying=false))
    /** Database column cdCode DBType(char), Length(8,false) */
    val cdcode: Column[String] = column[String]("cdCode", O.Length(8,varying=false))
    /** Database column iType DBType(int) */
    val itype: Column[Int] = column[Int]("iType")
    /** Database column iStatus DBType(int) */
    val istatus: Column[Option[Int]] = column[Option[Int]]("iStatus")
    /** Database column dtDate DBType(datetime) */
    val dtdate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtDate")
    /** Database column dtBegin DBType(datetime) */
    val dtbegin: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtBegin")
    /** Database column dtEnd DBType(datetime) */
    val dtend: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtEnd")
    /** Database column uidMember DBType(uniqueidentifier), Length(36,false) */
    val uidmember: Column[Option[String]] = column[Option[String]]("uidMember", O.Length(36,varying=false))
    /** Database column cdMember DBType(char), Length(10,false) */
    val cdmember: Column[Option[String]] = column[Option[String]]("cdMember", O.Length(10,varying=false))
    /** Database column szMember DBType(nvarchar), Length(100,true) */
    val szmember: Column[Option[String]] = column[Option[String]]("szMember", O.Length(100,varying=true))
    /** Database column iCount DBType(int) */
    val icount: Column[Option[Int]] = column[Option[Int]]("iCount")
    /** Database column iCountT DBType(int) */
    val icountt: Column[Option[Int]] = column[Option[Int]]("iCountT")
    /** Database column fUnit DBType(float) */
    val funit: Column[Option[Double]] = column[Option[Double]]("fUnit")
    /** Database column fAmount DBType(float) */
    val famount: Column[Option[Double]] = column[Option[Double]]("fAmount")
    /** Database column fAmountB DBType(float) */
    val famountb: Column[Option[Double]] = column[Option[Double]]("fAmountB")
    /** Database column fAmountT DBType(float) */
    val famountt: Column[Option[Double]] = column[Option[Double]]("fAmountT")
    /** Database column cdOrderCode DBType(char), Length(100,false) */
    val cdordercode: Column[Option[String]] = column[Option[String]]("cdOrderCode", O.Length(100,varying=false))
    /** Database column szYYYYMM DBType(char), Length(6,false) */
    val szyyyymm: Column[Option[String]] = column[Option[String]]("szYYYYMM", O.Length(6,varying=false))
    /** Database column szMemo DBType(nvarchar), Length(100,true) */
    val szmemo: Column[Option[String]] = column[Option[String]]("szMemo", O.Length(100,varying=true))
    /** Database column uidCreator DBType(uniqueidentifier), Length(36,false) */
    val uidcreator: Column[Option[String]] = column[Option[String]]("uidCreator", O.Length(36,varying=false))
    /** Database column dtCreate DBType(datetime) */
    val dtcreate: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtCreate")
    /** Database column uidModifier DBType(uniqueidentifier), Length(36,false) */
    val uidmodifier: Column[Option[String]] = column[Option[String]]("uidModifier", O.Length(36,varying=false))
    /** Database column dtModify DBType(datetime) */
    val dtmodify: Column[Option[java.sql.Timestamp]] = column[Option[java.sql.Timestamp]]("dtModify")
    
    /** Primary key of Xxxtblhandombald (database name PK_tblHandOMBalD) */
    val pk = primaryKey("PK_tblHandOMBalD", cdcode :: itype :: HNil)
  }
  /** Collection-like TableQuery object for table Xxxtblhandombald */
  lazy val Xxxtblhandombald = new TableQuery(tag => new Xxxtblhandombald(tag))
}
